[
    {
        "prompt": "# Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n# >>> has_close_elements {1.0 2.0 3.0} 0.5\n# false\n# >>> has_close_elements {1.0 2.8 3.0 4.0 5.0 2.0} 0.3\n# true\nproc has_close_elements {numbers threshold} {\n",
        "canonical_solution": "    set length [llength $numbers]\n    for {set i 0} {$i < $length} {incr i} {\n        for {set j [expr {$i + 1}]} {$j < $length} {incr j} {\n            set diff [expr {abs([lindex $numbers $i] - [lindex $numbers $j])}]\n            if {$diff < $threshold} {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nset a {1.0 2.0 3.9 4.0 5.0 2.2}\nassert {[has_close_elements $a 0.3] == true}\nassert {[has_close_elements $a 0.05] == false}\n\nassert {[has_close_elements {1.0 2.0 5.9 4.0 5.0} 0.95] == true}\nassert {[has_close_elements {1.0 2.0 5.9 4.0 5.0} 0.8] == false}\nassert {[has_close_elements {1.0 2.0 3.0 4.0 5.0} 2.0] == true}\nassert {[has_close_elements {1.1 2.2 3.1 4.1 5.1} 1.0] == true}\nassert {[has_close_elements {1.1 2.2 3.1 4.1 5.1} 0.5] == false}\n",
        "declaration": "proc has_close_elements {numbers threshold} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[has_close_elements {1.0 2.0 3.0} 0.5] == false}\nassert {[has_close_elements {1.0 2.8 3.0 4.0 5.0 2.0} 0.3] == true}\n",
        "prompt_text": "Check if in given list of numbers, are any two numbers closer to each other than given threshold.",
        "prompt_explain": "Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n>>> has_close_elements {1.0 2.0 3.0} 0.5\nfalse\n>>> has_close_elements {1.0 2.8 3.0 4.0 5.0 2.0} 0.3\ntrue",
        "func_title": "proc has_close_elements {numbers threshold}"
    },
    {
        "prompt": "# Input to this function is a string containing multiple groups of nested parentheses. Your goal is to separate those group into separate strings and return the list of those. Separate groups are balanced (each open brace is properly closed) and not nested within each other Ignore any spaces in the input string.\n# >>> separate_paren_groups \"( ) (( )) (( )( ))\"\n# {() (()) (()())}\nproc separate_paren_groups {paren_string} {\n",
        "canonical_solution": "    set all_parens {}\n    set current_paren \"\"\n    set level 0\n    foreach chr [split $paren_string \"\"] {\n        if {$chr eq \"(\"} {\n            incr level\n            append current_paren $chr\n        }\n        if {$chr eq \")\"} {\n            incr level -1\n            append current_paren $chr\n            if {$level == 0} {\n                lappend all_parens $current_paren\n                set current_paren \"\"\n            }\n        }\n    }\n    return $all_parens\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {return false}\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] ne [lindex $b $i]} {return false}\n    }\n    return true\n}\n\nassert {[issame [separate_paren_groups \"(()()) ((())) () ((())()())\"] {(()()) ((())) () ((())()())}]}\nassert {[issame [separate_paren_groups \"() (()) ((())) (((())))\"] {() (()) ((())) (((())))}]}\nassert {[issame [separate_paren_groups \"(()(())((())))\"] {(()(())((()())))}]}\nassert {[issame [separate_paren_groups \"( ) (( )) (( )( ))\"] {() (()) (()())}]}\n",
        "declaration": "proc separate_paren_groups {paren_string} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {return false}\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] ne [lindex $b $i]} {return false}\n    }\n    return true\n}\n\nassert {[issame [separate_paren_groups \"( ) (( )) (( )( ))\"] {() (()) (()())}]}\n",
        "prompt_text": "Input to this function is a string containing multiple groups of nested parentheses. Your goal is to separate those group into separate strings and return the list of those. Separate groups are balanced (each open brace is properly closed) and not nested within each other Ignore any spaces in the input string.",
        "prompt_explain": "Input to this function is a string containing multiple groups of nested parentheses. Your goal is to separate those group into separate strings and return the list of those. Separate groups are balanced (each open brace is properly closed) and not nested within each other Ignore any spaces in the input string.\n>>> separate_paren_groups \"( ) (( )) (( )( ))\"\n{() (()) (()())}",
        "func_title": "proc separate_paren_groups {paren_string}"
    },
    {
        "prompt": "# Given a positive integer n, you have to make a pile of n levels of stones. The first level has n stones. The number of stones in the next level is: - the next odd number if n is odd. - the next even number if n is even. Return the number of stones in each level in a list, where element at index i represents the number of stones in the level (i+1).\n# Examples:\n# >>> make_a_pile 3\n# {3 5 7}\nproc make_a_pile {n} {\n",
        "canonical_solution": "    set out [list $n]\n    for {set i 1} {$i < $n} {incr i} {\n        lappend out [expr {[lindex $out end] + 2}]\n    }\n    return $out\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {return false}\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {return false}\n    }\n    return true\n}\n\nassert {[issame [make_a_pile 3] {3 5 7}]}\nassert {[issame [make_a_pile 4] {4 6 8 10}]}\nassert {[issame [make_a_pile 5] {5 7 9 11 13}]}\nassert {[issame [make_a_pile 6] {6 8 10 12 14 16}]}\nassert {[issame [make_a_pile 8] {8 10 12 14 16 18 20 22}]}\n",
        "declaration": "proc make_a_pile {n} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {return false}\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {return false}\n    }\n    return true\n}\n\nassert {[issame [make_a_pile 3] {3 5 7}]}\n",
        "prompt_text": "Given a positive integer n, you have to make a pile of n levels of stones. The first level has n stones. The number of stones in the next level is: - the next odd number if n is odd. - the next even number if n is even. Return the number of stones in each level in a list, where element at index i represents the number of stones in the level (i+1).",
        "prompt_explain": "Given a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n- the next odd number if n is odd.\n- the next even number if n is even.\nReturn the number of stones in each level in a list, where element at index i represents the number of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile 3\n{3 5 7}",
        "func_title": "proc make_a_pile {n}"
    },
    {
        "prompt": "# You will be given a string of words separated by commas or spaces. Your task is to split the string into words and return a list of the words.\n#\n# For example:\n# words_string \"Hi, my name is John\" == {Hi my name is John}\n# words_string \"One, two, three, four, five, six\" == {One two three four five six}\nproc words_string {s} {\n",
        "canonical_solution": "    set out {}\n    set current \"\"\n    append s \" \"\n    for {set i 0} {$i < [string length $s]} {incr i} {\n        set char [string index $s $i]\n        if {$char eq \" \" || $char eq \",\"} {\n            if {[string length $current] > 0} {\n                lappend out $current\n                set current \"\"\n            }\n        } else {\n            append current $char\n        }\n    }\n    return $out\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {return false}\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] ne [lindex $b $i]} {return false}\n    }\n    return true\n}\n\nassert {[issame [words_string \"Hi, my name is John\"] {Hi my name is John}]}\nassert {[issame [words_string \"One, two, three, four, five, six\"] {One two three four five six}]}\nassert {[issame [words_string \"Hi, my name\"] {Hi my name}]}\nassert {[issame [words_string \"One,, two, three, four, five, six,\"] {One two three four five six}]}\nassert {[issame [words_string \"\"] {}]}\nassert {[issame [words_string \"ahmed     , gamal\"] {ahmed gamal}]}\n",
        "declaration": "proc words_string {s} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {return false}\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] ne [lindex $b $i]} {return false}\n    }\n    return true\n}\n\nassert {[issame [words_string \"Hi, my name is John\"] {Hi my name is John}]}\nassert {[issame [words_string \"One, two, three, four, five, six\"] {One two three four five six}]}\n",
        "prompt_text": "You will be given a string of words separated by commas or spaces. Your task is to split the string into words and return a list of the words.",
        "prompt_explain": "You will be given a string of words separated by commas or spaces. Your task is to split the string into words and return a list of the words.\n\nFor example:\nwords_string \"Hi, my name is John\" == {Hi my name is John}\nwords_string \"One, two, three, four, five, six\" == {One two three four five six}",
        "func_title": "proc words_string {s}"
    },
    {
        "prompt": "# This function takes two positive numbers x and y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.\n# For example:\n# choose_num 12 15 = 14\n# choose_num 13 12 = -1\nproc choose_num {x y} {\n",
        "canonical_solution": "    if {$y < $x} {return -1}\n    if {$y == $x && $y % 2 == 1} {return -1}\n    if {$y % 2 == 1} {return [expr {$y - 1}]}\n    return $y\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[choose_num 12 15] == 14}\nassert {[choose_num 13 12] == -1}\nassert {[choose_num 33 12354] == 12354}\nassert {[choose_num 5234 5233] == -1}\nassert {[choose_num 6 29] == 28}\nassert {[choose_num 27 10] == -1}\nassert {[choose_num 7 7] == -1}\nassert {[choose_num 546 546] == 546}\n",
        "declaration": "proc choose_num {x y} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[choose_num 12 15] == 14}\nassert {[choose_num 13 12] == -1}\n",
        "prompt_text": "This function takes two positive numbers x and y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.",
        "prompt_explain": "This function takes two positive numbers x and y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.\n\nFor example:\nchoose_num 12 15 = 14\nchoose_num 13 12 = -1",
        "func_title": "proc choose_num {x y}"
    },
    {
        "prompt": "# You are given two positive integers n and m, and your task is to compute the average of the integers from n through m (including n and m).\n# Round the answer to the nearest integer(smaller one) and convert that to binary.\n# If n is greater than m, return \"-1\".\n# Example:\n# rounded_avg 1 5 => \"11\"\n# rounded_avg 7 5 => \"-1\"\n# rounded_avg 10 20 => \"1111\"\n# rounded_avg 20 33 => \"11010\"\nproc rounded_avg {n m} {\n",
        "canonical_solution": "    if {$n > $m} { return \"-1\" }\n    set num [expr {($m + $n) / 2}]\n    set out \"\"\n    while {$num > 0} {\n        set out [expr {$num % 2}]$out\n        set num [expr {$num / 2}]\n    }\n    return $out\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[rounded_avg 1 5] == \"11\"}\nassert {[rounded_avg 7 13] == \"1010\"}\nassert {[rounded_avg 964 977] == \"1111001010\"}\nassert {[rounded_avg 996 997] == \"1111100100\"}\nassert {[rounded_avg 560 851] == \"1011000001\"}\nassert {[rounded_avg 185 546] == \"101101101\"}\nassert {[rounded_avg 362 496] == \"110101101\"}\nassert {[rounded_avg 350 902] == \"1001110010\"}\nassert {[rounded_avg 197 233] == \"11010111\"}\nassert {[rounded_avg 7 5] == \"-1\"}\nassert {[rounded_avg 5 1] == \"-1\"}\nassert {[rounded_avg 5 5] == \"101\"}\n",
        "declaration": "proc rounded_avg {n m} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[rounded_avg 1 5] == \"11\"}\nassert {[rounded_avg 7 5] == \"-1\"}\nassert {[rounded_avg 10 20] == \"1111\"}\nassert {[rounded_avg 20 33] == \"11010\"}\n",
        "prompt_text": "You are given two positive integers n and m, and your task is to compute the average of the integers from n through m (including n and m). Round the answer to the nearest integer(smaller one) and convert that to binary. If n is greater than m, return \"-1\".",
        "prompt_explain": "You are given two positive integers n and m, and your task is to compute the average of the integers from n through m (including n and m).\nRound the answer to the nearest integer(smaller one) and convert that to binary.\nIf n is greater than m, return \"-1\".\nExample:\nrounded_avg 1 5 => \"11\"\nrounded_avg 7 5 => \"-1\"\nrounded_avg 10 20 => \"1111\"\nrounded_avg 20 33 => \"11010\"",
        "func_title": "proc rounded_avg {n m}"
    },
    {
        "prompt": "# Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit.\n# Note: Returned list should be sorted in increasing order.\n# For example:\n# >>> unique_digits {15 33 1422 1}\n# {1 15 33}\n# >>> unique_digits {152 323 1422 10}\n# {}\nproc unique_digits {x} {\n",
        "canonical_solution": "    set out {}\n    foreach num $x {\n        set u 1\n        if {$num == 0} {set u 0}\n        set temp $num\n        while {$temp > 0 && $u} {\n            if {[expr {$temp % 2}] == 0} {set u 0}\n            set temp [expr {$temp / 10}]\n        }\n        if {$u} {lappend out $num}\n    }\n    set out [lsort -integer $out]\n    return $out\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {return 0}\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {return 0}\n    }\n    return 1\n}\n\nassert {[issame [unique_digits {15 33 1422 1}] {1 15 33}]}\nassert {[issame [unique_digits {152 323 1422 10}] {}]}\nassert {[issame [unique_digits {12345 2033 111 151}] {111 151}]}\nassert {[issame [unique_digits {135 103 31}] {31 135}]}\n",
        "declaration": "proc unique_digits {x} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {return 0}\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {return 0}\n    }\n    return 1\n}\n\nassert {[issame [unique_digits {15 33 1422 1}] {1 15 33}]}\nassert {[issame [unique_digits {152 323 1422 10}] {}]}\n",
        "prompt_text": "Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Note: Returned list should be sorted in increasing order.",
        "prompt_explain": "Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit.\n\nNote: Returned list should be sorted in increasing order.\n\nFor example:\n>>> unique_digits {15 33 1422 1}\n{1 15 33}\n>>> unique_digits {152 323 1422 10}\n{}",
        "func_title": "proc unique_digits {x}"
    },
    {
        "prompt": "# Implement the function f that takes n as a parameter, and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even or the sum of numbers from 1 to i otherwise. i starts from 1. the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n# Example:\n# f(5) == {1 2 6 24 15}\nproc f {n} {\n",
        "canonical_solution": "    set out {}\n    set sum 0\n    set prod 1\n    for {set i 1} {$i <= $n} {incr i} {\n        set sum [expr {$sum + $i}]\n        set prod [expr {$prod * $i}]\n        if {$i % 2 == 0} {\n            lappend out $prod\n        } else {\n            lappend out $sum\n        }\n    }\n    return $out\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {\n        return false\n    }\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {\n            return false\n        }\n    }\n    return true\n}\n\nassert {[issame [f 5] {1 2 6 24 15}]}\nassert {[issame [f 7] {1 2 6 24 15 720 28}]}\nassert {[issame [f 1] {1}]}\nassert {[issame [f 3] {1 2 6}]}\n",
        "declaration": "proc f {n} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {\n        return false\n    }\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {\n            return false\n        }\n    }\n    return true\n}\n\nassert {[issame [f 5] {1 2 6 24 15}]}\n",
        "prompt_text": "Implement the function f that takes n as a parameter, and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even or the sum of numbers from 1 to i otherwise. i starts from 1. the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).",
        "prompt_explain": "Implement the function f that takes n as a parameter, and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even or the sum of numbers from 1 to i otherwise. i starts from 1. the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == {1 2 6 24 15}",
        "func_title": "proc f {n}"
    },
    {
        "prompt": "# Write a function count_nums which takes a list of integers and returns the number of elements which has a sum of digits > 0. If a number is negative, then its first signed digit will be negative: e.g. -123 has signed digits -1, 2, and 3.\n# >>> count_nums {} == 0\n# >>> count_nums {-1 11 -11} == 1\n# >>> count_nums {1 1 2} == 3\nproc count_nums {n} {\n",
        "canonical_solution": "    set num 0\n    foreach i $n {\n        if {$i > 0} {\n            incr num\n        } else {\n            set sum 0\n            set w [expr {abs($i)}]\n            while {$w >= 10} {\n                set sum [expr {$sum + $w % 10}]\n                set w [expr {$w / 10}]\n            }\n            set sum [expr {$sum - $w}]\n            if {$sum > 0} {\n                incr num\n            }\n        }\n    }\n    return $num\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_nums {}] == 0}\nassert {[count_nums {-1 -2 0}] == 0}\nassert {[count_nums {1 1 2 -2 3 4 5}] == 6}\nassert {[count_nums {1 6 9 -6 0 1 5}] == 5}\nassert {[count_nums {1 100 98 -7 1 -1}] == 4}\nassert {[count_nums {12 23 34 -45 -56 0}] == 5}\nassert {[count_nums {-0 1}] == 1}\nassert {[count_nums {1}] == 1}\n",
        "declaration": "proc count_nums {n} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_nums {}] == 0}\nassert {[count_nums {-1 11 -11}] == 1}\nassert {[count_nums {1 1 2}] == 3}\n",
        "prompt_text": "Write a function count_nums which takes a list of integers and returns the number of elements which has a sum of digits > 0. If a number is negative, then its first signed digit will be negative: e.g. -123 has signed digits -1, 2, and 3.",
        "prompt_explain": "Write a function count_nums which takes a list of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums {} == 0\n>>> count_nums {-1 11 -11} == 1\n>>> count_nums {1 1 2} == 3",
        "func_title": "proc count_nums {n}"
    },
    {
        "prompt": "# We have a list \"arr\" of N integers arr[1], arr[2], ..., arr[N].The numbers in the list will be randomly ordered. Your task is to determine if it is possible to get a list sorted in non-decreasing order by performing the following operation on the given list: You are allowed to perform right shift operation any number of times. One right shift operation means shifting all elements of the list by one position in the right direction. The last element of the list will be moved to the starting position in the list i.e. 0th index. If it is possible to obtain the sorted list by performing the above operation then return true else return false. If the given list is empty then return true. Note: The given list is guaranteed to have unique elements. For Example:\n# move_one_ball {3 4 5 1 2} ==> true\n# Explanation: By performing 2 right shift operations, non-decreasing order can be achieved for the given list.\n# move_one_ball {3 5 4 1 2} ==> false\n# Explanation:It is not possible to get non-decreasing order for the given list by performing any number of right shift operations.\nproc move_one_ball {arr} {\n",
        "canonical_solution": "    set num 0\n    if {[llength $arr] == 0} {return true}\n    for {set i 1} {$i < [llength $arr]} {incr i} {\n        if {[lindex $arr $i] < [lindex $arr [expr {$i - 1}]]} {\n            incr num\n        }\n    }\n    if {[lindex $arr end] > [lindex $arr 0]} {\n        incr num\n    }\n    if {$num < 2} {return true}\n    return false\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[move_one_ball {3 4 5 1 2}] == true}\nassert {[move_one_ball {3 5 10 1 2}] == true}\nassert {[move_one_ball {4 3 1 2}] == false}\nassert {[move_one_ball {3 5 4 1 2}] == false}\nassert {[move_one_ball {}] == true}\n",
        "declaration": "proc move_one_ball {arr} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[move_one_ball {3 4 5 1 2}] == true}\nassert {[move_one_ball {3 5 4 1 2}] == false}\n",
        "prompt_text": "We have a list \"arr\" of N integers arr[1], arr[2], ..., arr[N].The numbers in the list will be randomly ordered. Your task is to determine if it is possible to get a list sorted in non-decreasing order by performing the following operation on the given list: You are allowed to perform right shift operation any number of times. One right shift operation means shifting all elements of the list by one position in the right direction. The last element of the list will be moved to the starting position in the list i.e. 0th index. If it is possible to obtain the sorted list by performing the above operation then return true else return false. If the given list is empty then return true. Note: The given list is guaranteed to have unique elements. For Example: ",
        "prompt_explain": "We have a list \"arr\" of N integers arr[1], arr[2], ..., arr[N].The numbers in the list will be randomly ordered. Your task is to determine if it is possible to get a list sorted in non-decreasing order by performing the following operation on the given list: You are allowed to perform right shift operation any number of times. One right shift operation means shifting all elements of the list by one position in the right direction. The last element of the list will be moved to the starting position in the list i.e. 0th index. If it is possible to obtain the sorted list by performing the above operation then return true else return false. If the given list is empty then return true. Note: The given list is guaranteed to have unique elements. For Example:\nmove_one_ball {3 4 5 1 2} ==> true\nExplanation: By performing 2 right shift operations, non-decreasing order can be achieved for the given list.\nmove_one_ball {3 5 4 1 2} ==> false\nExplanation:It is not possible to get non-decreasing order for the given list by performing any number of right shift operations.\n",
        "func_title": "proc move_one_ball {arr}"
    },
    {
        "prompt": "# Input are two strings a and b consisting only of 1s and 0s.\n# Perform binary XOR on these inputs and return result also as a string.\n# >>> string_xor \"010\" \"110\"\n# \"100\"\nproc string_xor {a b} {\n",
        "canonical_solution": "    set output \"\"\n    set len_a [string length $a]\n    set len_b [string length $b]\n    set max_len [expr {max($len_a, $len_b)}]\n    for {set i 0} {$i < $max_len} {incr i} {\n        set char_a [expr {$i < $len_a ? [string index $a $i] : \"0\"}]\n        set char_b [expr {$i < $len_b ? [string index $b $i] : \"0\"}]\n        if {$char_a == $char_b} {\n            append output \"0\"\n        } else {\n            append output \"1\"\n        }\n    }\n    return $output\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[string_xor \"111000\" \"101010\"] == \"010010\"}\nassert {[string_xor \"1\" \"1\"] == \"0\"}\nassert {[string_xor \"0101\" \"0000\"] == \"0101\"}\n",
        "declaration": "proc string_xor {a b} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[string_xor \"010\" \"110\"] == \"100\"}\n",
        "prompt_text": "Input are two strings a and b consisting only of 1s and 0s. Perform binary XOR on these inputs and return result also as a string.",
        "prompt_explain": "Input are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor \"010\" \"110\"\n\"100\"",
        "func_title": "proc string_xor {a b}"
    },
    {
        "prompt": "# In this problem, you will implement a function that takes two lists of numbers, and determines whether it is possible to perform an exchange of elements between them to make lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2. If it is possible to exchange elements between the lst1 and lst2 to make all the elements of lst1 to be even, return \"YES\". Otherwise, return \"NO\".\n# For example:\n# exchange {1 2 3 4} {1 2 3 4} => \"YES\"\n# exchange {1 2 3 4} {1 5 3 4} => \"NO\"\n# It is assumed that the input lists will be non-empty.\nproc exchange {lst1 lst2} {\n",
        "canonical_solution": "    set num 0\n    foreach n $lst1 {\n        if {$n % 2 == 0} {\n            incr num\n        }\n    }\n    foreach n $lst2 {\n        if {$n % 2 == 0} {\n            incr num\n        }\n    }\n    if {$num >= [llength $lst1]} {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[exchange {1 2 3 4} {1 2 3 4}] == \"YES\"}\nassert {[exchange {1 2 3 4} {1 5 3 4}] == \"NO\"}\nassert {[exchange {1 2 3 4} {2 1 4 3}] == \"YES\"}\nassert {[exchange {5 7 3} {2 6 4}] == \"YES\"}\nassert {[exchange {5 7 3} {2 6 3}] == \"NO\"}\nassert {[exchange {3 2 6 1 8 9} {3 5 5 1 1 1}] == \"NO\"}\nassert {[exchange {100 200} {200 200}] == \"YES\"}\n",
        "declaration": "proc exchange {lst1 lst2} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[exchange {1 2 3 4} {1 2 3 4}] == \"YES\"}\nassert {[exchange {1 2 3 4} {1 5 3 4}] == \"NO\"}\n",
        "prompt_text": "In this problem, you will implement a function that takes two lists of numbers, and determines whether it is possible to perform an exchange of elements between them to make lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2. If it is possible to exchange elements between the lst1 and lst2 to make all the elements of lst1 to be even, return \"YES\". Otherwise, return \"NO\".",
        "prompt_explain": "In this problem, you will implement a function that takes two lists of numbers, and determines whether it is possible to perform an exchange of elements between them to make lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2. If it is possible to exchange elements between the lst1 and lst2 to make all the elements of lst1 to be even, return \"YES\". Otherwise, return \"NO\".\nFor example:\nexchange {1 2 3 4} {1 2 3 4} => \"YES\"\nexchange {1 2 3 4} {1 5 3 4} => \"NO\"\nIt is assumed that the input lists will be non-empty.",
        "func_title": "proc exchange {lst1 lst2}"
    },
    {
        "prompt": "# Given a string representing a space separated lowercase letters, return a dictionary\n# of the letter with the most repetition and containing the corresponding count.\n# If several letters have the same occurrence, return all of them.\n#\n# Example:\n# histogram(\"a b c\") == {a 1 b 1 c 1}\n# histogram(\"a b b a\") == {a 2 b 2}\n# histogram(\"a b c a b\") == {a 2 b 2}\n# histogram(\"b b b b a\") == {b 4}\n# histogram(\"\") == {}\nproc histogram {test} {\n",
        "canonical_solution": "    array set count {}\n    set max 0\n    foreach char [split $test \" \"] {\n        if {$char ne \"\"} {\n            incr count($char)\n            if {$count($char) > $max} {\n                set max $count($char)\n            }\n        }\n    }\n    array set out {}\n    foreach {char cnt} [array get count] {\n        if {$cnt == $max} {\n            set out($char) $cnt\n        }\n    }\n    return [array get out]\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[array size a] != [array size b]} {\n        return false\n    }\n    foreach {key val} [array get a] {\n        if {![info exists b($key)] || $b($key) != $val} {\n            return false\n        }\n    }\n    return true\n}\n\narray set expected1 {a 2 b 2}\nassert {[issame [array get [histogram \"a b b a\"]] [array get expected1]]}\n\narray set expected2 {a 2 b 2}\nassert {[issame [array get [histogram \"a b c a b\"]] [array get expected2]]}\n\narray set expected3 {a 1 b 1 c 1 d 1 g 1}\nassert {[issame [array get [histogram \"a b c d g\"]] [array get expected3]]}\n\narray set expected4 {r 1 t 1 g 1}\nassert {[issame [array get [histogram \"r t g\"]] [array get expected4]]}\n\narray set expected5 {b 4}\nassert {[issame [array get [histogram \"b b b b a\"]] [array get expected5]]}\n\narray set expected6 {}\nassert {[issame [array get [histogram \"\"]] [array get expected6]]}\n\narray set expected7 {a 1}\nassert {[issame [array get [histogram \"a\"]] [array get expected7]]}\n",
        "declaration": "proc histogram {test} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[array size a] != [array size b]} {\n        return false\n    }\n    foreach {key val} [array get a] {\n        if {![info exists b($key)] || $b($key) != $val} {\n            return false\n        }\n    }\n    return true\n}\n\narray set expected1 {a 2 b 2}\nassert {[issame [array get [histogram \"a b b a\"]] [array get expected1]]}\n\narray set expected2 {a 2 b 2}\nassert {[issame [array get [histogram \"a b c a b\"]] [array get expected2]]}\n\narray set expected3 {a 1 b 1 c 1}\nassert {[issame [array get [histogram \"a b c\"]] [array get expected3]]}\n\narray set expected4 {b 4}\nassert {[issame [array get [histogram \"b b b b a\"]] [array get expected4]]}\n\narray set expected5 {}\nassert {[issame [array get [histogram \"\"]] [array get expected5]]}\n",
        "prompt_text": "Given a string representing a space separated lowercase letters, return a dictionary of the letter with the most repetition and containing the corresponding count. If several letters have the same occurrence, return all of them.",
        "prompt_explain": "Given a string representing a space separated lowercase letters, return a dictionary\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {a 1 b 1 c 1}\nhistogram(\"a b b a\") == {a 2 b 2}\nhistogram(\"a b c a b\") == {a 2 b 2}\nhistogram(\"b b b b a\") == {b 4}\nhistogram(\"\") == {}",
        "func_title": "proc histogram {test}"
    },
    {
        "prompt": "# Given a list of integers nums, find the minimum sum of any non-empty sub-list of nums.\n# Example\n# minSubListSum {2 3 4 1 2 4} == 1\n# minSubListSum {-1 -2 -3} == -6\nproc minSubListSum {nums} {\n",
        "canonical_solution": "    set current [lindex $nums 0]\n    set min [lindex $nums 0]\n    set length [llength $nums]\n    for {set i 1} {$i < $length} {incr i} {\n        if {$current < 0} {\n            set current [expr {$current + [lindex $nums $i]}]\n        } else {\n            set current [lindex $nums $i]\n        }\n        if {$current < $min} {\n            set min $current\n        }\n    }\n    return $min\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[minSubListSum {2 3 4 1 2 4}] == 1}\nassert {[minSubListSum {-1 -2 -3}] == -6}\nassert {[minSubListSum {-1 -2 -3 2 -10}] == -14}\nassert {[minSubListSum {-9999999999999999}] == -9999999999999999}\nassert {[minSubListSum {0 10 20 1000000}] == 0}\nassert {[minSubListSum {-1 -2 -3 10 -5}] == -6}\nassert {[minSubListSum {100 -1 -2 -3 10 -5}] == -6}\nassert {[minSubListSum {10 11 13 8 3 4}] == 3}\nassert {[minSubListSum {100 -33 32 -1 0 -2}] == -33}\nassert {[minSubListSum {-10}] == -10}\nassert {[minSubListSum {7}] == 7}\nassert {[minSubListSum {1 -1}] == -1}\n",
        "declaration": "proc minSubListSum {nums} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[minSubListSum {2 3 4 1 2 4}] == 1}\nassert {[minSubListSum {-1 -2 -3}] == -6}\n",
        "prompt_text": "Given a list of integers nums, find the minimum sum of any non-empty sub-list of nums. Example minSubListSum {2 3 4 1 2 4} == 1 minSubListSum {-1 -2 -3} == -6",
        "prompt_explain": "Given a list of integers nums, find the minimum sum of any non-empty sub-list of nums.\nExample\nminSubListSum {2 3 4 1 2 4} == 1\nminSubListSum {-1 -2 -3} == -6",
        "func_title": "proc minSubListSum {nums}"
    },
    {
        "prompt": "# You are given a rectangular grid of wells. Each row represents a single well, and each 1 in a row represents a single unit of water. Each well has a corresponding bucket that can be used to extract water from it, and all buckets have the same capacity. Your task is to use the buckets to empty the wells. Output the number of times you need to lower the buckets.\n# Example 1:\n# Input:\n# grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n# bucket_capacity : 1\n# Output: 6\n#\n# Example 2:\n# Input:\n# grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n# bucket_capacity : 2\n# Output: 5\n#\n# Example 3:\n# Input:\n# grid : {{0,0,0}, {0,0,0}}\n# bucket_capacity : 5\n# Output: 0\n#\n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid{:,1}.length <= 10^2\n# * grid{i}{j} -> 0 | 1\n# * 1 <= capacity <= 10\nproc max_fill {grid capacity} {\n",
        "canonical_solution": "    set out 0\n    foreach row $grid {\n        set sum 0\n        foreach cell $row {\n            incr sum $cell\n        }\n        if {$sum > 0} {\n            incr out [expr {($sum - 1) / $capacity + 1}]\n        }\n    }\n    return $out\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_fill {{0 0 1 0} {0 1 0 0} {1 1 1 1}} 1] == 6}\nassert {[max_fill {{0 0 1 1} {0 0 0 0} {1 1 1 1} {0 1 1 1}} 2] == 5}\nassert {[max_fill {{0 0 0} {0 0 0}} 5] == 0}\nassert {[max_fill {{1 1 1 1} {1 1 1 1}} 2] == 4}\nassert {[max_fill {{1 1 1 1} {1 1 1 1}} 9] == 2}\n",
        "declaration": "proc max_fill {grid capacity} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_fill {{0 0 1 0} {0 1 0 0} {1 1 1 1}} 1] == 6}\nassert {[max_fill {{0 0 1 1} {0 0 0 0} {1 1 1 1} {0 1 1 1}} 2] == 5}\nassert {[max_fill {{0 0 0} {0 0 0}} 5] == 0}\n",
        "prompt_text": "You are given a rectangular grid of wells. Each row represents a single well, and each 1 in a row represents a single unit of water. Each well has a corresponding bucket that can be used to extract water from it, and all buckets have the same capacity. Your task is to use the buckets to empty the wells. Output the number of times you need to lower the buckets. Example 1: Input: grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}} bucket_capacity : 1 Output: 6 Example 2: Input: grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}} bucket_capacity : 2 Output: 5 Example 3: Input: grid : {{0,0,0}, {0,0,0}} bucket_capacity : 5 Output: 0 Constraints: * all wells have the same length * 1 <= grid.length <= 10^2 * 1 <= grid{:,1}.length <= 10^2 * grid{i}{j} -> 0 | 1 * 1 <= capacity <= 10",
        "prompt_explain": "You are given a rectangular grid of wells. Each row represents a single well, and each 1 in a row represents a single unit of water. Each well has a corresponding bucket that can be used to extract water from it, and all buckets have the same capacity. Your task is to use the buckets to empty the wells. Output the number of times you need to lower the buckets.\n\nExample 1:\nInput:\ngrid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\nbucket_capacity : 1\nOutput: 6\n\nExample 2:\nInput:\ngrid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\nbucket_capacity : 2\nOutput: 5\n\nExample 3:\nInput:\ngrid : {{0,0,0}, {0,0,0}}\nbucket_capacity : 5\nOutput: 0\n\nConstraints:\n* all wells have the same length\n* 1 <= grid.length <= 10^2\n* 1 <= grid{:,1}.length <= 10^2\n* grid{i}{j} -> 0 | 1\n* 1 <= capacity <= 10",
        "func_title": "proc max_fill {grid capacity}"
    },
    {
        "prompt": "# You are given a list of two strings, both strings consist of open parentheses '(' or close parentheses ')' only.\n# Your job is to check if it is possible to concatenate the two strings in some order, that the resulting string will be good.\n# A string S is considered to be good if and only if all parentheses in S are balanced. For example: the string \"(())()\" is good, while the string \"())\" is not.\n# Return \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n#\n# Examples:\n# match_parens {{\"()(\", \")\"}} == \"Yes\"\n# match_parens {{\")\", \")\"}} == \"No\"\nproc match_parens {lst} {\n",
        "canonical_solution": "    set l1 [lindex $lst 0][lindex $lst 1]\n    set count 0\n    set can true\n    foreach char [split $l1 \"\"] {\n        if {$char eq \"(\"} {\n            incr count\n        } elseif {$char eq \")\"} {\n            incr count -1\n        }\n        if {$count < 0} {\n            set can false\n        }\n    }\n    if {$count != 0} {\n        return \"No\"\n    }\n    if {$can} {\n        return \"Yes\"\n    }\n    set l1 [lindex $lst 1][lindex $lst 0]\n    set can true\n    set count 0\n    foreach char [split $l1 \"\"] {\n        if {$char eq \"(\"} {\n            incr count\n        } elseif {$char eq \")\"} {\n            incr count -1\n        }\n        if {$count < 0} {\n            set can false\n        }\n    }\n    if {$can} {\n        return \"Yes\"\n    }\n    return \"No\"\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[match_parens {{\"()(\", \")\"}}] eq \"Yes\"}\nassert {[match_parens {{\")\", \")\"}}] eq \"No\"}\nassert {[match_parens {{\"(()(())\", \"())())\"}}] eq \"No\"}\nassert {[match_parens {{\")())\", \"(()()(\"}}] eq \"Yes\"}\nassert {[match_parens {{\"(())))\", \"(()())((\"}}] eq \"Yes\"}\nassert {[match_parens {{\"()\", \"())\"}}] eq \"No\"}\nassert {[match_parens {{\"(()(\", \"()))()\"}}] eq \"Yes\"}\nassert {[match_parens {{\"((((\", \"((())\"}}] eq \"No\"}\nassert {[match_parens {{\")(()\", \"(()(\"}}] eq \"No\"}\nassert {[match_parens {{\")(\", \")(\"}}] eq \"No\"}\nassert {[match_parens {{\"(\", \")\"}}] eq \"Yes\"}\nassert {[match_parens {{\")\", \"(\"}}] eq \"Yes\"}\n",
        "declaration": "proc match_parens {lst} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[match_parens {{\"()(\", \")\"}}] eq \"Yes\"}\nassert {[match_parens {{\")\", \")\"}}] eq \"No\"}\n",
        "prompt_text": "You are given a list of two strings, both strings consist of open parentheses '(' or close parentheses ')' only. Your job is to check if it is possible to concatenate the two strings in some order, that the resulting string will be good. A string S is considered to be good if and only if all parentheses in S are balanced. For example: the string \"(())()\" is good, while the string \"())\" is not. Return \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.",
        "prompt_explain": "You are given a list of two strings, both strings consist of open parentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in some order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S are balanced. For example: the string \"(())()\" is good, while the string \"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens {{\"()(\", \")\"}} == \"Yes\"\nmatch_parens {{\")\", \")\"}} == \"No\"",
        "func_title": "proc match_parens {lst}"
    },
    {
        "prompt": "# Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n# Examples\n# solution {5 8 7 1} ==> 12\n# solution {3 3 3 3 3} ==> 9\n# solution {30 13 24 321} ==>0\nproc solutions {lst} {\n",
        "canonical_solution": "    set sum 0\n    set length [llength $lst]\n    for {set i 0} {$i < $length} {incr i 2} {\n        set num [lindex $lst $i]\n        if {$num % 2 == 1} {\n            incr sum $num\n        }\n    }\n    return $sum\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[solutions {5 8 7 1}] == 12}\nassert {[solutions {3 3 3 3 3}] == 9}\nassert {[solutions {30 13 24 321}] == 0}\nassert {[solutions {5 9}] == 5}\nassert {[solutions {2 4 8}] == 0}\nassert {[solutions {30 13 23 32}] == 23}\nassert {[solutions {3 13 2 9}] == 3}\n",
        "declaration": "proc solutions {lst} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[solutions {5 8 7 1}] == 12}\nassert {[solutions {3 3 3 3 3}] == 9}\nassert {[solutions {30 13 24 321}] == 0}\n",
        "prompt_text": "Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions. Examples solution {5 8 7 1} ==> 12 solution {3 3 3 3 3} ==> 9 solution {30 13 24 321} ==>0",
        "prompt_explain": "Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\nExamples\nsolution {5 8 7 1} ==> 12\nsolution {3 3 3 3 3} ==> 9\nsolution {30 13 24 321} ==>0",
        "func_title": "proc solutions {lst}"
    },
    {
        "prompt": "# Given a non-empty list of integers arr and an integer k, return the sum of the elements with at most two digits from the first k elements of arr.\n# Example:\n# Input: arr = {111 21 3 4000 5 6 7 8 9}, k = 4\n# Output: 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <= len(arr)\nproc add_elements {arr k} {\n",
        "canonical_solution": "    set sum 0\n    for {set i 0} {$i < $k} {incr i} {\n        set num [lindex $arr $i]\n        if {$num >= -99 && $num <= 99} {\n            incr sum $num\n        }\n    }\n    return $sum\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[add_elements {1 -2 -3 41 57 76 87 88 99} 3] == -4}\nassert {[add_elements {111 121 3 4000 5 6} 2] == 0}\nassert {[add_elements {11 21 3 90 5 6 7 8 9} 4] == 125}\nassert {[add_elements {111 21 3 4000 5 6 7 8 9} 4] == 24}\nassert {[add_elements {1} 1] == 1}\n",
        "declaration": "proc add_elements {arr k} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[add_elements {111 21 3 4000 5 6 7 8 9} 4] == 24}\n",
        "prompt_text": "Given a non-empty list of integers arr and an integer k, return the sum of the elements with at most two digits from the first k elements of arr. Example: Input: arr = {111 21 3 4000 5 6 7 8 9}, k = 4 Output: 24 # sum of 21 + 3 Constraints: 1. 1 <= len(arr) <= 100 2. 1 <= k <= len(arr)",
        "prompt_explain": "Given a non-empty list of integers arr and an integer k, return the sum of the elements with at most two digits from the first k elements of arr.\n\nExample:\n\nInput: arr = {111 21 3 4000 5 6 7 8 9}, k = 4\nOutput: 24 # sum of 21 + 3\n\nConstraints:\n1. 1 <= len(arr) <= 100\n2. 1 <= k <= len(arr)",
        "func_title": "proc add_elements {arr k}"
    },
    {
        "prompt": "# Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n# The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n# as follows: start with any positive integer n. Then each term is obtained from the\n# previous term as follows: if the previous term is even, the next term is one half of\n# the previous term. If the previous term is odd, the next term is 3 times the previous\n# term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n# Note:\n# 1. Collatz(1) is {1}.\n# 2. returned list sorted in increasing order.\n# For example:\n# get_odd_collatz 5 returns {1 5} // The collatz sequence for 5 is {5 16 8 4 2 1}, so the odd numbers are only 1, and 5.\nproc get_odd_collatz {n} {\n",
        "canonical_solution": "    set out {1}\n    while {$n != 1} {\n        if {$n % 2 == 1} {\n            lappend out $n\n            set n [expr {$n * 3 + 1}]\n        } else {\n            set n [expr {$n / 2}]\n        }\n    }\n    set out [lsort -integer $out]\n    return $out\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {\n        return false\n    }\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {\n            return false\n        }\n    }\n    return true\n}\n\nassert {[issame [get_odd_collatz 14] {1 5 7 11 13 17}]}\nassert {[issame [get_odd_collatz 5] {1 5}]}\nassert {[issame [get_odd_collatz 12] {1 3 5}]}\nassert {[issame [get_odd_collatz 1] {1}]}\n",
        "declaration": "proc get_odd_collatz {n} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {\n        return false\n    }\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {\n            return false\n        }\n    }\n    return true\n}\n\nassert {[issame [get_odd_collatz 5] {1 5}]}\n",
        "prompt_text": "Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence. The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined as follows: start with any positive integer n. Then each term is obtained from the previous term as follows: if the previous term is even, the next term is one half of the previous term. If the previous term is odd, the next term is 3 times the previous term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1. Note: 1. Collatz(1) is {1}. 2. returned list sorted in increasing order.",
        "prompt_explain": "Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the\nprevious term as follows: if the previous term is even, the next term is one half of\nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote:\n1. Collatz(1) is {1}.\n2. returned list sorted in increasing order.\n\nFor example:\nget_odd_collatz 5 returns {1 5} // The collatz sequence for 5 is {5 16 8 4 2 1}, so the odd numbers are only 1, and 5.",
        "func_title": "proc get_odd_collatz {n}"
    },
    {
        "prompt": "# You have to write a function which validates a given date string and returns true if the date is valid otherwise false. The date is valid if all of the following rules are satisfied: 1. The date string is not empty. 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. 3. The months should not be less than 1 or higher than 12. 4. The date should be in the format: mm-dd-yyyy\n# for example:\n# valid_date \"03-11-2000\" => true\n# valid_date \"15-01-2012\" => false\n# valid_date \"04-0-2040\" => false\n# valid_date \"06-04-2020\" => true\n# valid_date \"06/04/2020\" => false\nproc valid_date {date} {\n",
        "canonical_solution": "    if {[string length $date] != 10} {return false}\n    for {set i 0} {$i < 10} {incr i} {\n        if {$i == 2 || $i == 5} {\n            if {[string index $date $i] != \"-\"} {return false}\n        } else {\n            if {![string is digit -strict [string index $date $i]]} {return false}\n        }\n    }\n    set mm [string range $date 0 1]\n    set dd [string range $date 3 4]\n    set yy [string range $date 6 9]\n    if {$mm < 1 || $mm > 12} {return false}\n    if {$dd < 1 || $dd > 31} {return false}\n    if {$dd == 31 && ($mm == 4 || $mm == 6 || $mm == 9 || $mm == 11 || $mm == 2)} {return false}\n    if {$dd == 30 && $mm == 2} {return false}\n    return true\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[valid_date \"03-11-2000\"] == true}\nassert {[valid_date \"15-01-2012\"] == false}\nassert {[valid_date \"04-0-2040\"] == false}\nassert {[valid_date \"06-04-2020\"] == true}\nassert {[valid_date \"01-01-2007\"] == true}\nassert {[valid_date \"03-32-2011\"] == false}\nassert {[valid_date \"\"] == false}\nassert {[valid_date \"04-31-3000\"] == false}\nassert {[valid_date \"06-06-2005\"] == true}\nassert {[valid_date \"21-31-2000\"] == false}\nassert {[valid_date \"04-12-2003\"] == true}\nassert {[valid_date \"04122003\"] == false}\nassert {[valid_date \"20030412\"] == false}\nassert {[valid_date \"2003-04\"] == false}\nassert {[valid_date \"2003-04-12\"] == false}\nassert {[valid_date \"04-2003\"] == false}\n",
        "declaration": "proc valid_date {date} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[valid_date \"03-11-2000\"] == true}\nassert {[valid_date \"15-01-2012\"] == false}\nassert {[valid_date \"04-0-2040\"] == false}\nassert {[valid_date \"06-04-2020\"] == true}\nassert {[valid_date \"06/04/2020\"] == false}\n",
        "prompt_text": "You have to write a function which validates a given date string and returns true if the date is valid otherwise false. The date is valid if all of the following rules are satisfied: 1. The date string is not empty. 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. 3. The months should not be less than 1 or higher than 12. 4. The date should be in the format: mm-dd-yyyy",
        "prompt_explain": "You have to write a function which validates a given date string and returns true if the date is valid otherwise false. The date is valid if all of the following rules are satisfied: 1. The date string is not empty. 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. 3. The months should not be less than 1 or higher than 12. 4. The date should be in the format: mm-dd-yyyy\n\nfor example:\nvalid_date \"03-11-2000\" => true\n\nvalid_date \"15-01-2012\" => false\n\nvalid_date \"04-0-2040\" => false\n\nvalid_date \"06-04-2020\" => true\n\nvalid_date \"06/04/2020\" => false",
        "func_title": "proc valid_date {date}"
    },
    {
        "prompt": "# Given a list of numbers, return whether or not they are sorted in ascending order. If list has more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n# Examples\n# is_sorted {5} ➞ true\n# is_sorted {1 2 3 4 5} ➞ true\n# is_sorted {1 3 2 4 5} ➞ false\n# is_sorted {1 2 3 4 5 6} ➞ true\n# is_sorted {1 2 3 4 5 6 7} ➞ true\n# is_sorted {1 3 2 4 5 6 7} ➞ false\n# is_sorted {1 2 2 3 3 4} ➞ true\n# is_sorted {1 2 2 2 3 4} ➞ false\nproc is_sorted {lst} {\n",
        "canonical_solution": "    set length [llength $lst]\n    for {set i 1} {$i < $length} {incr i} {\n        if {[lindex $lst $i] < [lindex $lst [expr {$i - 1}]]} {\n            return false\n        }\n        if {$i >= 2 && [lindex $lst $i] == [lindex $lst [expr {$i - 1}]] && [lindex $lst $i] == [lindex $lst [expr {$i - 2}]]} {\n            return false\n        }\n    }\n    return true\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[is_sorted {5}] == true}\nassert {[is_sorted {1 2 3 4 5}] == true}\nassert {[is_sorted {1 3 2 4 5}] == false}\nassert {[is_sorted {1 2 3 4 5 6}] == true}\nassert {[is_sorted {1 2 3 4 5 6 7}] == true}\nassert {[is_sorted {1 3 2 4 5 6 7}] == false}\nassert {[is_sorted {}] == true}\nassert {[is_sorted {1}] == true}\nassert {[is_sorted {3 2 1}] == false}\nassert {[is_sorted {1 2 2 2 3 4}] == false}\nassert {[is_sorted {1 2 3 3 3 4}] == false}\nassert {[is_sorted {1 2 2 3 3 4}] == true}\nassert {[is_sorted {1 2 3 4}] == true}\n",
        "declaration": "proc is_sorted {lst} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[is_sorted {5}] == true}\nassert {[is_sorted {1 2 3 4 5}] == true}\nassert {[is_sorted {1 3 2 4 5}] == false}\nassert {[is_sorted {1 2 3 4 5 6}] == true}\nassert {[is_sorted {1 2 3 4 5 6 7}] == true}\nassert {[is_sorted {1 3 2 4 5 6 7}] == false}\nassert {[is_sorted {1 2 2 2 3 4}] == false}\nassert {[is_sorted {1 2 2 3 3 4}] == true}\n",
        "prompt_text": "Given a list of numbers, return whether or not they are sorted in ascending order. If list has more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.",
        "prompt_explain": "Given a list of numbers, return whether or not they are sorted in ascending order. If list has more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n\nExamples\nis_sorted {5} ➞ true\nis_sorted {1 2 3 4 5} ➞ true\nis_sorted {1 3 2 4 5} ➞ false\nis_sorted {1 2 3 4 5 6} ➞ true\nis_sorted {1 2 3 4 5 6 7} ➞ true\nis_sorted {1 3 2 4 5 6 7} ➞ false\nis_sorted {1 2 2 3 3 4} ➞ true\nis_sorted {1 2 2 2 3 4} ➞ false",
        "func_title": "proc is_sorted {lst}"
    },
    {
        "prompt": "# You are given two intervals, where each interval is a pair of integers. For example, interval = (start, end) = (1, 2). The given intervals are closed which means that the interval (start, end) includes both start and end. For each given interval, it is assumed that its start is less or equal its end. Your task is to determine whether the length of intersection of these two intervals is a prime number. Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3) which its length is 1, which not a prime number. If the length of the intersection is a prime number, return \"YES\", otherwise, return \"NO\". If the two intervals don't intersect, return \"NO\".\n# {input/output} samples:\n# intersection {1 2} {2 3} ==> \"NO\"\n# intersection {-1 1} {0 4} ==> \"NO\"\n# intersection {-3 -1} {-5 5} ==> \"YES\"\nproc intersection {interval1 interval2} {\n",
        "canonical_solution": "    set inter1 [expr {max([lindex $interval1 0], [lindex $interval2 0])}]\n    set inter2 [expr {min([lindex $interval1 1], [lindex $interval2 1])}]\n    set l [expr {$inter2 - $inter1}]\n    if {$l < 2} { return \"NO\" }\n    for {set i 2} {$i * $i <= $l} {incr i} {\n        if {$l % $i == 0} { return \"NO\" }\n    }\n    return \"YES\"\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[intersection {1 2} {2 3}] == \"NO\"}\nassert {[intersection {-1 1} {0 4}] == \"NO\"}\nassert {[intersection {-3 -1} {-5 5}] == \"YES\"}\nassert {[intersection {-2 2} {-4 0}] == \"YES\"}\nassert {[intersection {-11 2} {-1 -1}] == \"NO\"}\nassert {[intersection {1 2} {3 5}] == \"NO\"}\nassert {[intersection {1 2} {1 2}] == \"NO\"}\nassert {[intersection {-2 -2} {-3 -2}] == \"NO\"}\n",
        "declaration": "proc intersection {interval1 interval2} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[intersection {1 2} {2 3}] == \"NO\"}\nassert {[intersection {-1 1} {0 4}] == \"NO\"}\nassert {[intersection {-3 -1} {-5 5}] == \"YES\"}\n",
        "prompt_text": "You are given two intervals, where each interval is a pair of integers. For example, interval = (start, end) = (1, 2). The given intervals are closed which means that the interval (start, end) includes both start and end. For each given interval, it is assumed that its start is less or equal its end. Your task is to determine whether the length of intersection of these two intervals is a prime number. Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3) which its length is 1, which not a prime number. If the length of the intersection is a prime number, return \"YES\", otherwise, return \"NO\". If the two intervals don't intersect, return \"NO\".   {input/output} samples:",
        "prompt_explain": "You are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two\nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection {1 2} {2 3} ==> \"NO\"\nintersection {-1 1} {0 4} ==> \"NO\"\nintersection {-3 -1} {-5 5} ==> \"YES\"",
        "func_title": "proc intersection {interval1 interval2}"
    },
    {
        "prompt": "# You are given a list arr of integers and you need to return sum of magnitudes of integers multiplied by product of all signs\n# of each number in the list, represented by 1, -1 or 0.\n# Note: return -32768 for empty arr.\n#\n# Example:\n# >>> prod_signs {1 2 2 -4} == -9\n# >>> prod_signs {0 1} == 0\n# >>> prod_signs {} == -32768\nproc prod_signs {arr} {\n",
        "canonical_solution": "    if {[llength $arr] == 0} {return -32768}\n    set sum 0\n    set prods 1\n    foreach num $arr {\n        set sum [expr {$sum + abs($num)}]\n        if {$num == 0} {set prods 0}\n        if {$num < 0} {set prods [expr {-$prods}]}\n    }\n    return [expr {$sum * $prods}]\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[prod_signs {1 2 2 -4}] == -9}\nassert {[prod_signs {0 1}] == 0}\nassert {[prod_signs {1 1 1 2 3 -1 1}] == -10}\nassert {[prod_signs {}] == -32768}\nassert {[prod_signs {2 4 1 2 -1 -1 9}] == 20}\nassert {[prod_signs {-1 1 -1 1}] == 4}\nassert {[prod_signs {-1 1 1 1}] == -4}\nassert {[prod_signs {-1 1 1 0}] == 0}\n",
        "declaration": "proc prod_signs {arr} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[prod_signs {1 2 2 -4}] == -9}\nassert {[prod_signs {0 1}] == 0}\nassert {[prod_signs {}] == -32768}\n",
        "prompt_text": "You are given a list arr of integers and you need to return sum of magnitudes of integers multiplied by product of all signs of each number in the list, represented by 1, -1 or 0. Note: return -32768 for empty arr.",
        "prompt_explain": "You are given a list arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the list, represented by 1, -1 or 0.\nNote: return -32768 for empty arr.\n\nExample:\n>>> prod_signs {1 2 2 -4} == -9\n>>> prod_signs {0 1} == 0\n>>> prod_signs {} == -32768",
        "func_title": "proc prod_signs {arr}"
    },
    {
        "prompt": "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor 3 5\n# 1\n# >>> greatest_common_divisor 25 15\n# 5\nproc greatest_common_divisor {a b} {\n",
        "canonical_solution": "    while {$b != 0} {\n        set temp $b\n        set b [expr {$a % $b}]\n        set a $temp\n    }\n    return $a\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[greatest_common_divisor 3 7] == 1}\nassert {[greatest_common_divisor 10 15] == 5}\nassert {[greatest_common_divisor 49 14] == 7}\nassert {[greatest_common_divisor 144 60] == 12}\n",
        "declaration": "proc greatest_common_divisor {a b} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[greatest_common_divisor 3 5] == 1}\nassert {[greatest_common_divisor 25 15] == 5}\n",
        "prompt_text": "Return a greatest common divisor of two integers a and b",
        "prompt_explain": "Return a greatest common divisor of two integers a and b\n>>> greatest_common_divisor 3 5\n1\n>>> greatest_common_divisor 25 15\n5",
        "func_title": "proc greatest_common_divisor {a b}"
    },
    {
        "prompt": "# Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in the last couple centuries. However, what people don't know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n# tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n# tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n#        = 2 + 3 + 3 = 8\n# You are given a non-negative integer number n, you have to a return a list of the\n# first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# tri(3) = {1, 3, 2, 8}\nproc tri {n} {\n",
        "canonical_solution": "    set out {1 3}\n    if {$n == 0} {return {1}}\n    for {set i 2} {$i <= $n} {incr i} {\n        if {$i % 2 == 0} {\n            lappend out [expr {1 + $i / 2}]\n        } else {\n            lappend out [expr {[lindex $out [expr {$i - 1}]] + [lindex $out [expr {$i - 2}]] + 1 + ($i + 1) / 2}]\n        }\n    }\n    return $out\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {return false}\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {return false}\n    }\n    return true\n}\n\nassert {[issame [tri 3] {1 3 2 8}]}\nassert {[issame [tri 4] {1 3 2 8 3}]}\nassert {[issame [tri 5] {1 3 2 8 3 15}]}\nassert {[issame [tri 6] {1 3 2 8 3 15 4}]}\nassert {[issame [tri 7] {1 3 2 8 3 15 4 24}]}\nassert {[issame [tri 8] {1 3 2 8 3 15 4 24 5}]}\nassert {[issame [tri 9] {1 3 2 8 3 15 4 24 5 35}]}\nassert {[issame [tri 20] {1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11}]}\nassert {[issame [tri 0] {1}]}\nassert {[issame [tri 1] {1 3}]}\n",
        "declaration": "proc tri {n} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {return false}\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {return false}\n    }\n    return true\n}\n\nassert {[issame [tri 3] {1 3 2 8}]}\n",
        "prompt_text": "Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in the last couple centuries. However, what people don't know is Tribonacci sequence. Tribonacci sequence is defined by the recurrence:",
        "prompt_explain": "Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n= 2 + 3 + 3 = 8\nYou are given a non-negative integer number n, you have to a return a list of the\nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}",
        "func_title": "proc tri {n}"
    },
    {
        "prompt": "# Given a positive integer n, return the product of the odd digits. Return 0 if all digits are even.\n# For example:\n# digits(1)  == 1\n# digits(4)  == 0\n# digits(235) == 15\nproc digits {n} {\n",
        "canonical_solution": "    set prod 1\n    set has 0\n    foreach digit [split $n {}] {\n        if {$digit % 2 == 1} {\n            set has 1\n            set prod [expr {$prod * $digit}]\n        }\n    }\n    if {$has == 0} {return 0}\n    return $prod\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[digits 5] == 5}\nassert {[digits 54] == 5}\nassert {[digits 120] == 1}\nassert {[digits 5014] == 5}\nassert {[digits 98765] == 315}\nassert {[digits 5576543] == 2625}\nassert {[digits 2468] == 0}\n",
        "declaration": "proc digits {n} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[digits 1] == 1}\nassert {[digits 4] == 0}\nassert {[digits 235] == 15}\n",
        "prompt_text": "Given a positive integer n, return the product of the odd digits. Return 0 if all digits are even.",
        "prompt_explain": "Given a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15",
        "func_title": "proc digits {n}"
    },
    {
        "prompt": "# You are given a list of numbers.\n# You need to return the sum of squared numbers in the given list,\n# round each element in the list to the upper int(Ceiling) first.\n# Examples:\n# For lst = {1,2,3} the output should be 14\n# For lst = {1,4,9} the output should be 98\n# For lst = {1,3,5,7} the output should be 84\n# For lst = {1.4,4.2,0} the output should be 29\n# For lst = {-2.4,1,1} the output should be 6\nproc sum_squares {lst} {\n",
        "canonical_solution": "    set sum 0\n    foreach num $lst {\n        set ceil_num [expr {ceil($num)}]\n        set sum [expr {$sum + $ceil_num * $ceil_num}]\n    }\n    return $sum\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_squares {1 2 3}] == 14}\nassert {[sum_squares {1.0 2 3}] == 14}\nassert {[sum_squares {1 3 5 7}] == 84}\nassert {[sum_squares {1.4 4.2 0}] == 29}\nassert {[sum_squares {-2.4 1 1}] == 6}\nassert {[sum_squares {100 1 15 2}] == 10230}\nassert {[sum_squares {10000 10000}] == 200000000}\nassert {[sum_squares {-1.4 4.6 6.3}] == 75}\nassert {[sum_squares {-1.4 17.9 18.9 19.9}] == 1086}\nassert {[sum_squares {0}] == 0}\nassert {[sum_squares {-1}] == 1}\nassert {[sum_squares {-1 1 0}] == 2}\n",
        "declaration": "proc sum_squares {lst} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_squares {1 2 3}] == 14}\nassert {[sum_squares {1 4 9}] == 98}\nassert {[sum_squares {1 3 5 7}] == 84}\nassert {[sum_squares {1.4 4.2 0}] == 29}\nassert {[sum_squares {-2.4 1 1}] == 6}\n",
        "prompt_text": "You are given a list of numbers. You need to return the sum of squared numbers in the given list, round each element in the list to the upper int(Ceiling) first. Examples: For lst = {1,2,3} the output should be 14 For lst = {1,4,9} the output should be 98 For lst = {1,3,5,7} the output should be 84 For lst = {1.4,4.2,0} the output should be 29 For lst = {-2.4,1,1} the output should be 6  ",
        "prompt_explain": "You are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n",
        "func_title": "proc sum_squares {lst}"
    },
    {
        "prompt": "# Create a function that returns true if the last character of a given string is an alphabetical character and is not a part of a word, and false otherwise. Note: \"word\" is a group of characters separated by space. \n# Examples:\n# check_if_last_char_is_a_letter \"apple pie\" ➞ false\n# check_if_last_char_is_a_letter \"apple pi e\" ➞ true\n# check_if_last_char_is_a_letter \"apple pi e \" ➞ false\n# check_if_last_char_is_a_letter \"\" ➞ false\nproc check_if_last_char_is_a_letter {txt} {\n",
        "canonical_solution": "    set length [string length $txt]\n    if {$length == 0} {return false}\n    set chr [string index $txt [expr {$length - 1}]]\n    if {![string is alpha $chr]} {return false}\n    if {$length == 1} {return true}\n    set chr [string index $txt [expr {$length - 2}]]\n    if {[string is alpha $chr]} {return false}\n    return true\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[check_if_last_char_is_a_letter \"apple\"] == false}\nassert {[check_if_last_char_is_a_letter \"apple pi e\"] == true}\nassert {[check_if_last_char_is_a_letter \"eeeee\"] == false}\nassert {[check_if_last_char_is_a_letter \"A\"] == true}\nassert {[check_if_last_char_is_a_letter \"Pumpkin pie \"] == false}\nassert {[check_if_last_char_is_a_letter \"Pumpkin pie 1\"] == false}\nassert {[check_if_last_char_is_a_letter \"\"] == false}\nassert {[check_if_last_char_is_a_letter \"eeeee e \"] == false}\nassert {[check_if_last_char_is_a_letter \"apple pie\"] == false}\nassert {[check_if_last_char_is_a_letter \"apple pi e \"] == false}\n",
        "declaration": "proc check_if_last_char_is_a_letter {txt} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[check_if_last_char_is_a_letter \"apple pi e\"] == true}\nassert {[check_if_last_char_is_a_letter \"\"] == false}\nassert {[check_if_last_char_is_a_letter \"apple pie\"] == false}\nassert {[check_if_last_char_is_a_letter \"apple pi e \"] == false}\n",
        "prompt_text": "Create a function that returns true if the last character of a given string is an alphabetical character and is not a part of a word, and false otherwise. Note: \"word\" is a group of characters separated by space.",
        "prompt_explain": "Create a function that returns true if the last character\nof a given string is an alphabetical character and is not\na part of a word, and false otherwise.\nNote: \"word\" is a group of characters separated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter \"apple pie\" ➞ false\ncheck_if_last_char_is_a_letter \"apple pi e\" ➞ true\ncheck_if_last_char_is_a_letter \"apple pi e \" ➞ false\ncheck_if_last_char_is_a_letter \"\" ➞ false",
        "func_title": "proc check_if_last_char_is_a_letter {txt}"
    },
    {
        "prompt": "# Create a function which returns the largest index of an element which is not greater than or equal to the element immediately preceding it. If no such element exists then return -1. The given list will not contain duplicate values.\n# Examples:\n# can_arrange {1 2 4 3 5} = 3\n# can_arrange {1 2 3} = -1\nproc can_arrange {arr} {\n",
        "canonical_solution": "    set max -1\n    set length [llength $arr]\n    for {set i 0} {$i < $length} {incr i} {\n        if {[lindex $arr $i] <= $i} {\n            set max $i\n        }\n    }\n    return $max\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[can_arrange {1 2 4 3 5}] == 3}\nassert {[can_arrange {1 2 4 5}] == -1}\nassert {[can_arrange {1 4 2 5 6 7 8 9 10}] == 2}\nassert {[can_arrange {4 8 5 7 3}] == 4}\nassert {[can_arrange {}] == -1}\n",
        "declaration": "proc can_arrange {arr} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[can_arrange {1 2 4 3 5}] == 3}\nassert {[can_arrange {1 2 3}] == -1}\n",
        "prompt_text": "Create a function which returns the largest index of an element which is not greater than or equal to the element immediately preceding it. If no such element exists then return -1. The given list will not contain duplicate values.",
        "prompt_explain": "Create a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given list will not contain\nduplicate values.\n\nExamples:\ncan_arrange {1 2 4 3 5} = 3\ncan_arrange {1 2 3} = -1",
        "func_title": "proc can_arrange {arr}"
    },
    {
        "prompt": "# Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n# Example\n# is_equal_to_sum_even 4 == false\n# is_equal_to_sum_even 6 == false\n# is_equal_to_sum_even 8 == true\nproc is_equal_to_sum_even {n} {\n",
        "canonical_solution": "    if {$n % 2 == 0 && $n >= 8} {\n        return true\n    }\n    return false\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[is_equal_to_sum_even 4] == false}\nassert {[is_equal_to_sum_even 6] == false}\nassert {[is_equal_to_sum_even 8] == true}\nassert {[is_equal_to_sum_even 10] == true}\nassert {[is_equal_to_sum_even 11] == false}\nassert {[is_equal_to_sum_even 12] == true}\nassert {[is_equal_to_sum_even 13] == false}\nassert {[is_equal_to_sum_even 16] == true}\n",
        "declaration": "proc is_equal_to_sum_even {n} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[is_equal_to_sum_even 4] == false}\nassert {[is_equal_to_sum_even 6] == false}\nassert {[is_equal_to_sum_even 8] == true}\n",
        "prompt_text": "Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers",
        "prompt_explain": "Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even 4 == false\nis_equal_to_sum_even 6 == false\nis_equal_to_sum_even 8 == true",
        "func_title": "proc is_equal_to_sum_even {n}"
    },
    {
        "prompt": "# The Brazilian factorial is defined as: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0\n# For example:\n# >>> special_factorial 4\n# 288\n# The function will receive an integer as input and should return the special factorial of this integer.\nproc special_factorial {n} {\n",
        "canonical_solution": "    set fact 1\n    set bfact 1\n    for {set i 1} {$i <= $n} {incr i} {\n        set fact [expr {$fact * $i}]\n        set bfact [expr {$bfact * $fact}]\n    }\n    return $bfact\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[special_factorial 4] == 288}\nassert {[special_factorial 5] == 34560}\nassert {[special_factorial 7] == 125411328000}\nassert {[special_factorial 1] == 1}\n",
        "declaration": "proc special_factorial {n} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[special_factorial 4] == 288}\n",
        "prompt_text": "The Brazilian factorial is defined as: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0 ",
        "prompt_explain": "The Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial 4\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.",
        "func_title": "proc special_factorial {n}"
    },
    {
        "prompt": "# Return list of all prefixes from shortest to longest of the input string\n# >>> all_prefixes \"abc\"\n# {a ab abc}\nproc all_prefixes {str} {\n",
        "canonical_solution": "    set out {}\n    set current \"\"\n    for {set i 0} {$i < [string length $str]} {incr i} {\n        append current [string index $str $i]\n        lappend out $current\n    }\n    return $out\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {return false}\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] ne [lindex $b $i]} {return false}\n    }\n    return true\n}\n\nassert {[issame [all_prefixes \"\"] {}]}\nassert {[issame [all_prefixes \"asdfgh\"] {a as asd asdf asdfg asdfgh}]}\nassert {[issame [all_prefixes \"WWW\"] {W WW WWW}]}\n",
        "declaration": "proc all_prefixes {str} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {return false}\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] ne [lindex $b $i]} {return false}\n    }\n    return true\n}\n\nassert {[issame [all_prefixes \"abc\"] {a ab abc}]}\n",
        "prompt_text": "Return list of all prefixes from shortest to longest of the input string",
        "prompt_explain": "Return list of all prefixes from shortest to longest of the input string\n>>> all_prefixes \"abc\"\n{a ab abc}",
        "func_title": "proc all_prefixes {str}"
    },
    {
        "prompt": "# Create a function which takes a string representing a file's name, and returns \"Yes\" if the the file's name is valid, and returns \"No\" otherwise. A file's name is considered to be valid if and only if all the following conditions are met: - There should not be more than three digits ('0'-'9') in the file's name. - The file's name contains exactly one dot \".\" - The substring before the dot should not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dot should be one of these: {'txt\", \"exe\", \"dll\"}\n# Examples:\n# file_name_check \"example.txt\" => \"Yes\"\n# file_name_check \"1example.dll\"  => \"No\" // (the name should start with a latin alphapet letter)\nproc file_name_check {file_name} {\n",
        "canonical_solution": "    set numdigit 0\n    set numdot 0\n    if {[string length $file_name] < 5} {return \"No\"}\n    set w [string index $file_name 0]\n    if {![string is alpha $w]} {return \"No\"}\n    set last [string range $file_name end-3 end]\n    if {$last ne \".txt\" && $last ne \".exe\" && $last ne \".dll\"} {return \"No\"}\n    foreach char [split $file_name \"\"] {\n        if {[string is digit $char]} {incr numdigit}\n        if {$char eq \".\"} {incr numdot}\n    }\n    if {$numdigit > 3 || $numdot != 1} {return \"No\"}\n    return \"Yes\"\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[file_name_check \"example.txt\"] == \"Yes\"}\nassert {[file_name_check \"1example.dll\"] == \"No\"}\nassert {[file_name_check \"s1sdf3.asd\"] == \"No\"}\nassert {[file_name_check \"K.dll\"] == \"Yes\"}\nassert {[file_name_check \"MY16FILE3.exe\"] == \"Yes\"}\nassert {[file_name_check \"His12FILE94.exe\"] == \"No\"}\nassert {[file_name_check \"_Y.txt\"] == \"No\"}\nassert {[file_name_check \"?aREYA.exe\"] == \"No\"}\nassert {[file_name_check \"/this_is_valid.dll\"] == \"No\"}\nassert {[file_name_check \"this_is_valid.wow\"] == \"No\"}\nassert {[file_name_check \"this_is_valid.txt\"] == \"Yes\"}\nassert {[file_name_check \"this_is_valid.txtexe\"] == \"No\"}\nassert {[file_name_check \"#this2_i4s_5valid.ten\"] == \"No\"}\nassert {[file_name_check \"@this1_is6_valid.exe\"] == \"No\"}\nassert {[file_name_check \"this_is_12valid.6exe4.txt\"] == \"No\"}\nassert {[file_name_check \"all.exe.txt\"] == \"No\"}\nassert {[file_name_check \"I563_No.exe\"] == \"Yes\"}\nassert {[file_name_check \"Is3youfault.txt\"] == \"Yes\"}\nassert {[file_name_check \"no_one#knows.dll\"] == \"Yes\"}\nassert {[file_name_check \"1I563_Yes3.exe\"] == \"No\"}\nassert {[file_name_check \"I563_Yes3.txtt\"] == \"No\"}\nassert {[file_name_check \"final..txt\"] == \"No\"}\nassert {[file_name_check \"final132\"] == \"No\"}\nassert {[file_name_check \"_f4indsartal132.\"] == \"No\"}\nassert {[file_name_check \".txt\"] == \"No\"}\nassert {[file_name_check \"s.\"] == \"No\"}\n",
        "declaration": "proc file_name_check {file_name} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[file_name_check \"example.txt\"] == \"Yes\"}\nassert {[file_name_check \"1example.dll\"] == \"No\"}\n",
        "prompt_text": "Create a function which takes a string representing a file's name, and returns \"Yes\" if the the file's name is valid, and returns \"No\" otherwise. A file's name is considered to be valid if and only if all the following conditions are met: - There should not be more than three digits ('0'-'9') in the file's name. - The file's name contains exactly one dot \".\" - The substring before the dot should not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dot should be one of these: {'txt\", \"exe\", \"dll\"}",
        "prompt_explain": "Create a function which takes a string representing a file's name, and returns\n\"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\nA file's name is considered to be valid if and only if all the following conditions\nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot \".\"\n- The substring before the dot should not be empty, and it starts with a letter from\nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: {'txt\", \"exe\", \"dll\"}\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)",
        "func_title": "proc file_name_check {file_name}"
    },
    {
        "prompt": "# This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n# Examples:\n# For lst = {1 2 3} the output should be 6\n# For lst = {}  the output should be 0\n# For lst = {-1 -5 2 -1 -5}  the output should be -126\nproc sum_squares {lst} {\n",
        "canonical_solution": "    set sum 0\n    set length [llength $lst]\n    for {set i 0} {$i < $length} {incr i} {\n        if {$i % 3 == 0} {\n            set sum [expr {$sum + [lindex $lst $i] * [lindex $lst $i]}]\n        } elseif {$i % 4 == 0} {\n            set sum [expr {$sum + [lindex $lst $i] * [lindex $lst $i] * [lindex $lst $i]}]\n        } else {\n            set sum [expr {$sum + [lindex $lst $i]}]\n        }\n    }\n    return $sum\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_squares {1 2 3}] == 6}\nassert {[sum_squares {1 4 9}] == 14}\nassert {[sum_squares {}] == 0}\nassert {[sum_squares {1 1 1 1 1 1 1 1 1}] == 9}\nassert {[sum_squares {-1 -1 -1 -1 -1 -1 -1 -1 -1}] == -3}\nassert {[sum_squares {0}] == 0}\nassert {[sum_squares {-1 -5 2 -1 -5}] == -126}\nassert {[sum_squares {-56 -99 1 0 -2}] == 3030}\nassert {[sum_squares {-1 0 0 0 0 0 0 0 -1}] == 0}\nassert {[sum_squares {-16 -9 -2 36 36 26 -20 25 -40 20 -4 12 -26 35 37}] == -14196}\nassert {[sum_squares {-1 -3 17 -1 -15 13 -1 14 -14 -12 -5 14 -14 6 13 11 16 16 4 10}] == -1448}\n",
        "declaration": "proc sum_squares {lst} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_squares {1 2 3}] == 6}\nassert {[sum_squares {}] == 0}\nassert {[sum_squares {-1 -5 2 -1 -5}] == -126}\n",
        "prompt_text": "This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. Examples: For lst = {1 2 3} the output should be 6 For lst = {}  the output should be 0 For lst = {-1 -5 2 -1 -5}  the output should be -126",
        "prompt_explain": "This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\nExamples:\nFor lst = {1 2 3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1 -5 2 -1 -5}  the output should be -126",
        "func_title": "proc sum_squares {lst}"
    },
    {
        "prompt": "# Your task is to implement a function that will simplify the expression x * n. The function returns true if x * n evaluates to a whole number and false otherwise. Both x and n, are string representation of a fraction, and have the following format, <numerator>/<denominator> where both numerator and denominator are positive whole numbers.  You can assume that x, and n are valid fractions, and do not have zero as denominator. \n# simplify(\"1/5\", \"5/1\") = true\n# simplify(\"1/6\", \"2/1\") = false\n# simplify(\"7/10\", \"10/2\") = false\nproc simplify {x n} {\n",
        "canonical_solution": "    set x_parts [split $x \"/\"]\n    set n_parts [split $n \"/\"]\n    set a [lindex $x_parts 0]\n    set b [lindex $x_parts 1]\n    set c [lindex $n_parts 0]\n    set d [lindex $n_parts 1]\n    if {[expr {($a * $c) % ($b * $d)}] == 0} {\n        return true\n    } else {\n        return false\n    }\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[simplify \"1/5\" \"5/1\"] == true}\nassert {[simplify \"1/6\" \"2/1\"] == false}\nassert {[simplify \"5/1\" \"3/1\"] == true}\nassert {[simplify \"7/10\" \"10/2\"] == false}\nassert {[simplify \"2/10\" \"50/10\"] == true}\nassert {[simplify \"7/2\" \"4/2\"] == true}\nassert {[simplify \"11/6\" \"6/1\"] == true}\nassert {[simplify \"2/3\" \"5/2\"] == false}\nassert {[simplify \"5/2\" \"3/5\"] == false}\nassert {[simplify \"2/4\" \"8/4\"] == true}\nassert {[simplify \"2/4\" \"4/2\"] == true}\nassert {[simplify \"1/5\" \"5/1\"] == true}\nassert {[simplify \"1/5\" \"1/5\"] == false}\n",
        "declaration": "proc simplify {x n} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[simplify \"1/5\" \"5/1\"] == true}\nassert {[simplify \"1/6\" \"2/1\"] == false}\nassert {[simplify \"7/10\" \"10/2\"] == false}\n",
        "prompt_text": "Your task is to implement a function that will simplify the expression x * n. The function returns true if x * n evaluates to a whole number and false otherwise. Both x and n, are string representation of a fraction, and have the following format, <numerator>/<denominator> where both numerator and denominator are positive whole numbers.  You can assume that x, and n are valid fractions, and do not have zero as denominator. ",
        "prompt_explain": "Your task is to implement a function that will simplify the expression\nx * n. The function returns true if x * n evaluates to a whole number and false\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = true\nsimplify(\"1/6\", \"2/1\") = false\nsimplify(\"7/10\", \"10/2\") = false",
        "func_title": "proc simplify {x n}"
    },
    {
        "prompt": "# Write a function that takes a list of numbers as input and returns the number of elements in the list that are greater than 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9).\n# For example:\n# specialFilter {15 -73 14 -15} => 1\n# specialFilter {33 -2 -3 45 21 109} => 2\nproc specialFilter {nums} {\n",
        "canonical_solution": "    set count 0\n    foreach num $nums {\n        if {$num > 10} {\n            set strNum [string trimleft [string trimleft $num \"-\"] \"0\"]\n            set firstDigit [string index $strNum 0]\n            set lastDigit [string index $strNum end]\n            if {$firstDigit % 2 == 1 && $lastDigit % 2 == 1} {\n                incr count\n            }\n        }\n    }\n    return $count\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[specialFilter {5 -2 1 -5}] == 0}\nassert {[specialFilter {15 -73 14 -15}] == 1}\nassert {[specialFilter {33 -2 -3 45 21 109}] == 2}\nassert {[specialFilter {43 -12 93 125 121 109}] == 4}\nassert {[specialFilter {71 -2 -33 75 21 19}] == 3}\nassert {[specialFilter {1}] == 0}\nassert {[specialFilter {}] == 0}\n",
        "declaration": "proc specialFilter {nums} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[specialFilter {15 -73 14 -15}] == 1}\nassert {[specialFilter {33 -2 -3 45 21 109}] == 2}\n",
        "prompt_text": "Write a function that takes a list of numbers as input and returns the number of elements in the list that are greater than 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9). For example: specialFilter {15 -73 14 -15} => 1 specialFilter {33 -2 -3 45 21 109} => 2",
        "prompt_explain": "Write a function that takes a list of numbers as input and returns\nthe number of elements in the list that are greater than 10 and both\nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter {15 -73 14 -15} => 1\nspecialFilter {33 -2 -3 45 21 109} => 2",
        "func_title": "proc specialFilter {nums}"
    },
    {
        "prompt": "# You are given a positive integer n. You have to create an integer list a of length n.\n# For each i (1 ≤ i ≤ n), the value of a{i} = i * i - i + 1.\n# Return the number of triples (a{i}, a{j}, a{k}) of a where i < j < k,\n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example :\n# Input: n = 5\n# Output: 1\n# Explanation:\n# a = {1, 3, 7, 13, 21}\n# The only valid triple is (1, 7, 13).\nproc get_matrix_triples {n} {\n",
        "canonical_solution": "    set a {}\n    set sum {{0 0 0}}\n    set sum2 {{0 0 0}}\n    for {set i 1} {$i <= $n} {incr i} {\n        lappend a [expr {($i * $i - $i + 1) % 3}]\n        lappend sum [lindex $sum end]\n        lset sum end [expr {[lindex $a end]}] [expr {[lindex $sum end [lindex $a end]] + 1}]\n    }\n    for {set times 1} {$times < 3} {incr times} {\n        for {set i 1} {$i <= $n} {incr i} {\n            lappend sum2 [lindex $sum2 end]\n            if {$i >= 1} {\n                for {set j 0} {$j <= 2} {incr j} {\n                    lset sum2 end [expr {([lindex $a [expr {$i - 1}]] + $j) % 3}] [expr {[lindex $sum2 end [expr {([lindex $a [expr {$i - 1}]] + $j) % 3}]] + [lindex $sum [expr {$i - 1}] $j]}]\n                }\n            }\n        }\n        set sum $sum2\n        set sum2 {{0 0 0}}\n    }\n    return [lindex $sum $n 0]\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[get_matrix_triples 5] == 1}\nassert {[get_matrix_triples 6] == 4}\nassert {[get_matrix_triples 10] == 36}\nassert {[get_matrix_triples 100] == 53361}\n",
        "declaration": "proc get_matrix_triples {n} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[get_matrix_triples 5] == 1}\n",
        "prompt_text": "You are given a positive integer n. You have to create an integer list a of length n. For each i (1 ≤ i ≤ n), the value of a{i} = i * i - i + 1. Return the number of triples (a{i}, a{j}, a{k}) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3. Example : Input: n = 5 Output: 1 Explanation: a = {1, 3, 7, 13, 21} The only valid triple is (1, 7, 13).",
        "prompt_explain": "You are given a positive integer n. You have to create an integer list a of length n.\nFor each i (1 ≤ i ≤ n), the value of a{i} = i * i - i + 1.\nReturn the number of triples (a{i}, a{j}, a{k}) of a where i < j < k,\nand a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\nInput: n = 5\nOutput: 1\nExplanation:\na = {1, 3, 7, 13, 21}\nThe only valid triple is (1, 7, 13).",
        "func_title": "proc get_matrix_triples {n}"
    },
    {
        "prompt": "# A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.\n# Examples:\n# for x_or_y 7 34 12 == 34\n# for x_or_y 15 8 5 == 5\nproc x_or_y {n x y} {\n",
        "canonical_solution": "    set isp true\n    if {$n < 2} {set isp false}\n    for {set i 2} {$i * $i <= $n} {incr i} {\n        if {$n % $i == 0} {set isp false}\n    }\n    if {$isp} {return $x}\n    return $y\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[x_or_y 7 34 12] == 34}\nassert {[x_or_y 15 8 5] == 5}\nassert {[x_or_y 3 33 5212] == 33}\nassert {[x_or_y 1259 3 52] == 3}\nassert {[x_or_y 7919 -1 12] == -1}\nassert {[x_or_y 3609 1245 583] == 583}\nassert {[x_or_y 91 56 129] == 129}\nassert {[x_or_y 6 34 1234] == 1234}\nassert {[x_or_y 1 2 0] == 0}\nassert {[x_or_y 2 2 0] == 2}\n",
        "declaration": "proc x_or_y {n x y} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[x_or_y 7 34 12] == 34}\nassert {[x_or_y 15 8 5] == 5}\n",
        "prompt_text": "A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.",
        "prompt_explain": "A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.\nExamples:\nfor x_or_y 7 34 12 == 34\nfor x_or_y 15 8 5 == 5\n",
        "func_title": "proc x_or_y {n x y}"
    },
    {
        "prompt": "# Given a list of numbers, return the sum of squares of the numbers in the list that are odd. Ignore numbers that are negative or not integers.\n# double_the_difference {1 3 2 0} == 1 + 9 + 0 + 0 = 10\n# double_the_difference {-1 -2 0} == 0\n# double_the_difference {9 -2} == 81\n# double_the_difference {0} == 0\n# If the input list is empty, return 0.\nproc double_the_difference {lst} {\n",
        "canonical_solution": "    set sum 0\n    foreach num $lst {\n        if {$num > 0 && $num == int($num) && int($num) % 2 == 1} {\n            set sum [expr {$sum + $num * $num}]\n        }\n    }\n    return $sum\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[double_the_difference {}] == 0}\nassert {[double_the_difference {5 4}] == 25}\nassert {[double_the_difference {0.1 0.2 0.3}] == 0}\nassert {[double_the_difference {-10 -20 -30}] == 0}\nassert {[double_the_difference {-1 -2 8}] == 0}\nassert {[double_the_difference {0.2 3 5}] == 34}\n\nset odd_sum 0\nset lst {}\nfor {set i -99} {$i < 100} {incr i 2} {\n    lappend lst $i\n    if {$i > 0 && $i % 2 == 1} {\n        set odd_sum [expr {$odd_sum + $i * $i}]\n    }\n}\nassert {[double_the_difference $lst] == $odd_sum}\n",
        "declaration": "proc double_the_difference {lst} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[double_the_difference {1 3 2 0}] == 10}\nassert {[double_the_difference {-1 -2 0}] == 0}\nassert {[double_the_difference {9 -2}] == 81}\nassert {[double_the_difference {0}] == 0}\n",
        "prompt_text": "Given a list of numbers, return the sum of squares of the numbers in the list that are odd. Ignore numbers that are negative or not integers.",
        "prompt_explain": "Given a list of numbers, return the sum of squares of the numbers in the list that are odd. Ignore numbers that are negative or not integers.\n\ndouble_the_difference {1 3 2 0} == 1 + 9 + 0 + 0 = 10\ndouble_the_difference {-1 -2 0} == 0\ndouble_the_difference {9 -2} == 81\ndouble_the_difference {0} == 0\n\nIf the input list is empty, return 0.",
        "func_title": "proc double_the_difference {lst}"
    },
    {
        "prompt": "# You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n# cycpattern_check \"abcd\" \"abd\" => false\n# cycpattern_check \"hello\" \"ell\" => true\n# cycpattern_check \"whassup\" \"psus\" => false\n# cycpattern_check \"abab\" \"baa\" => true\n# cycpattern_check \"efef\" \"eeff\" => false\n# cycpattern_check \"himenss\" \"simen\" => true\nproc cycpattern_check {a b} {\n",
        "canonical_solution": "    set len [string length $b]\n    for {set i 0} {$i < $len} {incr i} {\n        set rotate [string range $b $i end][string range $b 0 [expr {$i - 1}]]\n        if {[string first $rotate $a] != -1} {\n            return true\n        }\n    }\n    return false\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[cycpattern_check \"xyzw\" \"xyw\"] == false}\nassert {[cycpattern_check \"yello\" \"ell\"] == true}\nassert {[cycpattern_check \"whattup\" \"ptut\"] == false}\nassert {[cycpattern_check \"efef\" \"fee\"] == true}\nassert {[cycpattern_check \"abab\" \"aabb\"] == false}\nassert {[cycpattern_check \"winemtt\" \"tinem\"] == true}\n",
        "declaration": "proc cycpattern_check {a b} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[cycpattern_check \"abcd\" \"abd\"] == false}\nassert {[cycpattern_check \"hello\" \"ell\"] == true}\nassert {[cycpattern_check \"whassup\" \"psus\"] == false}\nassert {[cycpattern_check \"abab\" \"baa\"] == true}\nassert {[cycpattern_check \"efef\" \"eeff\"] == false}\nassert {[cycpattern_check \"himenss\" \"simen\"] == true}\n",
        "prompt_text": "You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word",
        "prompt_explain": "You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\ncycpattern_check \"abcd\" \"abd\" => false\ncycpattern_check \"hello\" \"ell\" => true\ncycpattern_check \"whassup\" \"psus\" => false\ncycpattern_check \"abab\" \"baa\" => true\ncycpattern_check \"efef\" \"eeff\" => false\ncycpattern_check \"himenss\" \"simen\" => true\n",
        "func_title": "proc cycpattern_check {a b}"
    },
    {
        "prompt": "# Given an integer. return a list that has the number of even and odd digits respectively.\n# Example:\n# even_odd_count -12 ==> {1 1}\n# even_odd_count 123 ==> {1 2}\nproc even_odd_count {num} {\n",
        "canonical_solution": "    set num [expr {abs($num)}]\n    set num_str [format \"%d\" $num]\n    set even 0\n    set odd 0\n    foreach digit [split $num_str \"\"] {\n        if {$digit % 2 == 0} {\n            incr even\n        } else {\n            incr odd\n        }\n    }\n    return [list $even $odd]\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {\n        return false\n    }\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {\n            return false\n        }\n    }\n    return true\n}\n\nassert {[issame [even_odd_count 7] {0 1}]}\nassert {[issame [even_odd_count -78] {1 1}]}\nassert {[issame [even_odd_count 3452] {2 2}]}\nassert {[issame [even_odd_count 346211] {3 3}]}\nassert {[issame [even_odd_count -345821] {3 3}]}\nassert {[issame [even_odd_count -2] {1 0}]}\nassert {[issame [even_odd_count -45347] {2 3}]}\nassert {[issame [even_odd_count 0] {1 0}]}\n",
        "declaration": "proc even_odd_count {num} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {\n        return false\n    }\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {\n            return false\n        }\n    }\n    return true\n}\n\nassert {[issame [even_odd_count -12] {1 1}]}\nassert {[issame [even_odd_count 123] {1 2}]}\n",
        "prompt_text": "Given an integer. return a list that has the number of even and odd digits respectively.",
        "prompt_explain": "Given an integer. return a list that has the number of even and odd digits respectively.\n\nExample:\neven_odd_count -12 ==> {1 1}\neven_odd_count 123 ==> {1 2}",
        "func_title": "proc even_odd_count {num}"
    },
    {
        "prompt": "# Given the lengths of the three sides of a triangle. Return true if the three sides form a right-angled triangle, false otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or 90 degree.\n# Example:\n# right_angle_triangle 3 4 5 == true\n# right_angle_triangle 1 2 3 == false\nproc right_angle_triangle {a b c} {\n",
        "canonical_solution": "    if {abs($a*$a + $b*$b - $c*$c) < 1e-4 || abs($a*$a + $c*$c - $b*$b) < 1e-4 || abs($b*$b + $c*$c - $a*$a) < 1e-4} {\n        return true\n    }\n    return false\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[right_angle_triangle 3 4 5] == true}\nassert {[right_angle_triangle 1 2 3] == false}\nassert {[right_angle_triangle 10 6 8] == true}\nassert {[right_angle_triangle 2 2 2] == false}\nassert {[right_angle_triangle 7 24 25] == true}\nassert {[right_angle_triangle 10 5 7] == false}\nassert {[right_angle_triangle 5 12 13] == true}\nassert {[right_angle_triangle 15 8 17] == true}\nassert {[right_angle_triangle 48 55 73] == true}\nassert {[right_angle_triangle 1 1 1] == false}\nassert {[right_angle_triangle 2 2 10] == false}\n",
        "declaration": "proc right_angle_triangle {a b c} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[right_angle_triangle 3 4 5] == true}\nassert {[right_angle_triangle 1 2 3] == false}\n",
        "prompt_text": "Given the lengths of the three sides of a triangle. Return true if the three sides form a right-angled triangle, false otherwise. A right-angled triangle is a triangle in which one angle is right angle or 90 degree.",
        "prompt_explain": "Given the lengths of the three sides of a triangle. Return true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or\n90 degree.\nExample:\nright_angle_triangle 3 4 5 == true\nright_angle_triangle 1 2 3 == false",
        "func_title": "proc right_angle_triangle {a b c}"
    },
    {
        "prompt": "# Given a string, find out how many distinct characters (regardless of case) does it consist of\n# >>> count_distinct_characters \"xyzXYZ\"\n# 3\n# >>> count_distinct_characters \"Jerry\"\n# 4\nproc count_distinct_characters {str} {\n",
        "canonical_solution": "    set distinct [list]\n    set str [string tolower $str]\n    foreach char [split $str \"\"] {\n        if {$char ni $distinct} {\n            lappend distinct $char\n        }\n    }\n    return [llength $distinct]\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_distinct_characters \"\"] == 0}\nassert {[count_distinct_characters \"abcde\"] == 5}\nassert {[count_distinct_characters \"abcdecadeCADE\"] == 5}\nassert {[count_distinct_characters \"aaaaAAAAaaaa\"] == 1}\nassert {[count_distinct_characters \"Jerry jERRY JeRRRY\"] == 5}\n",
        "declaration": "proc count_distinct_characters {str} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_distinct_characters \"xyzXYZ\"] == 3}\nassert {[count_distinct_characters \"Jerry\"] == 4}\n",
        "prompt_text": "Given a string, find out how many distinct characters (regardless of case) does it consist of",
        "prompt_explain": "Given a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters \"xyzXYZ\"\n3\n>>> count_distinct_characters \"Jerry\"\n4",
        "func_title": "proc count_distinct_characters {str}"
    },
    {
        "prompt": "# Given two lists operator, and operand. The first list has basic algebra operations, and the second list is a list of integers. Use the two given lists to build the algebraic expression and return the evaluation of this expression.\n# The basic algebra operations:\n# Addition ( + )\n# Subtraction ( - )\n# Multiplication ( * )\n# Floor division ( // )\n# Exponentiation ( ** )\n# Example:\n# operator {\"+\", \"*\", \"-\"}\n# list = {2, 3, 4, 5}\n# result = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is equal to the length of operand list minus one.\n# Operand is a list of non-negative integers.\n# Operator list has at least one operator, and operand list has at least two operands.\nproc do_algebra {operato operand} {\n",
        "canonical_solution": "    set result [lindex $operand 0]\n    set i 0\n    foreach op $operato {\n        set next [lindex $operand [expr {$i + 1}]]\n        switch $op {\n            \"+\" { set result [expr {$result + $next}] }\n            \"-\" { set result [expr {$result - $next}] }\n            \"*\" { set result [expr {$result * $next}] }\n            \"//\" { set result [expr {$result / $next}] }\n            \"**\" { set result [expr {$result ** $next}] }\n        }\n        incr i\n    }\n    return $result\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[do_algebra {\"**\" \"*\" \"+\"} {2 3 4 5}] == 37}\nassert {[do_algebra {\"+\" \"*\" \"-\"} {2 3 4 5}] == 9}\nassert {[do_algebra {\"//\" \"*\"} {7 3 4}] == 8}\n",
        "declaration": "proc do_algebra {operato operand} {\n",
        "example_test": "",
        "prompt_text": "Given two lists operator, and operand. The first list has basic algebra operations, and the second list is a list of integers. Use the two given lists to build the algebraic expression and return the evaluation of this expression. The basic algebra operations: Addition ( + ) Subtraction ( - ) Multiplication ( * ) Floor division ( // ) Exponentiation ( ** ) Example: operator {\"+\", \"*\", \"-\"} list = {2, 3, 4, 5} result = 2 + 3 * 4 - 5 => result = 9 Note: The length of operator list is equal to the length of operand list minus one. Operand is a list of non-negative integers. Operator list has at least one operator, and operand list has at least two operands.",
        "prompt_explain": "Given two lists operator, and operand. The first list has basic algebra operations, and the second list is a list of integers. Use the two given lists to build the algebraic expression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\n\nExample:\noperator {\"+\", \"*\", \"-\"}\nlist = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n",
        "func_title": "proc do_algebra {operato operand}"
    },
    {
        "prompt": "# Input to this function is a string representing musical notes in a special ASCII format.\n# Your task is to parse this string and return list of integers corresponding to how many beats does each\n# not last.\n#\n# Here is a legend:\n# \"o\" - whole note, lasts four beats\n# \"o|\" - half note, lasts two beats\n# \".|\" - quater note, lasts one beat\n#\n# >>> parse_music \"o o| .| o| o| .| .| .| .| o o\"\n# {4 2 1 2 2 1 1 1 1 4 4}\nproc parse_music {music_string} {\n",
        "canonical_solution": "    set out {}\n    set current \"\"\n    if {[string length $music_string] > 0} {\n        append music_string \" \"\n    }\n    for {set i 0} {$i < [string length $music_string]} {incr i} {\n        set char [string index $music_string $i]\n        if {$char eq \" \"} {\n            if {$current eq \"o\"} {\n                lappend out 4\n            } elseif {$current eq \"o|\"} {\n                lappend out 2\n            } elseif {$current eq \".|\"} {\n                lappend out 1\n            }\n            set current \"\"\n        } else {\n            append current $char\n        }\n    }\n    return $out\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {\n        return false\n    }\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {\n            return false\n        }\n    }\n    return true\n}\n\nassert {[issame [parse_music \"\"] {}]}\nassert {[issame [parse_music \"o o o o\"] {4 4 4 4}]}\nassert {[issame [parse_music \".| .| .| .|\"] {1 1 1 1}]}\nassert {[issame [parse_music \"o| o| .| .| o o o o\"] {2 2 1 1 4 4 4 4}]}\nassert {[issame [parse_music \"o| .| o| .| o o| o o|\"] {2 1 2 1 4 2 4 2}]}\n",
        "declaration": "proc parse_music {music_string} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {\n        return false\n    }\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {\n            return false\n        }\n    }\n    return true\n}\n\nassert {[issame [parse_music \"o o| .| o| o| .| .| .| .| o o\"] {4 2 1 2 2 1 1 1 1 4 4}]}\n",
        "prompt_text": "Input to this function is a string representing musical notes in a special ASCII format. Your task is to parse this string and return list of integers corresponding to how many beats does each not last.  Here is a legend: \"o\" - whole note, lasts four beats \"o|\" - half note, lasts two beats \".|\" - quater note, lasts one beat ",
        "prompt_explain": "Input to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return list of integers corresponding to how many beats does each\nnot last.\n\nHere is a legend:\n\"o\" - whole note, lasts four beats\n\"o|\" - half note, lasts two beats\n\".|\" - quater note, lasts one beat\n\n>>> parse_music \"o o| .| o| o| .| .| .| .| o o\"\n{4 2 1 2 2 1 1 1 1 4 4}",
        "func_title": "proc parse_music {music_string}"
    },
    {
        "prompt": "# Find how many times a given substring can be found in the original string. Count overlaping cases.\n# >>> how_many_times \"\" \"a\"\n# 0\n# >>> how_many_times \"aaa\" \"a\"\n# 3\n# >>> how_many_times \"aaaa\" \"aa\"\n# 3\nproc how_many_times {str substring} {\n",
        "canonical_solution": "    set out 0\n    set len [string length $str]\n    set sublen [string length $substring]\n    if {$len == 0} {return 0}\n    for {set i 0} {$i <= [expr {$len - $sublen}]} {incr i} {\n        if {[string equal -length $sublen [string range $str $i [expr {$i + $sublen - 1}]] $substring]} {\n            incr out\n        }\n    }\n    return $out\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[how_many_times \"\" \"x\"] == 0}\nassert {[how_many_times \"xyxyxyx\" \"x\"] == 4}\nassert {[how_many_times \"cacacacac\" \"cac\"] == 4}\nassert {[how_many_times \"john doe\" \"john\"] == 1}\n",
        "declaration": "proc how_many_times {str substring} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[how_many_times \"\" \"a\"] == 0}\nassert {[how_many_times \"aaa\" \"a\"] == 3}\nassert {[how_many_times \"aaaa\" \"aa\"] == 3}\n",
        "prompt_text": "Find how many times a given substring can be found in the original string. Count overlaping cases.",
        "prompt_explain": "Find how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times \"\" \"a\"\n0\n>>> how_many_times \"aaa\" \"a\"\n3\n>>> how_many_times \"aaaa\" \"aa\"\n3",
        "func_title": "proc how_many_times {str substring}"
    },
    {
        "prompt": "# Given a positive floating point number, it can be decomposed into and integer part (largest integer smaller than given number) and decimals (leftover part always smaller than 1).  Return the decimal part of the number.\n# >>> truncate_number 3.5\n# 0.5\nproc truncate_number {number} {\n",
        "canonical_solution": "    return [expr {$number - int($number)}]\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[expr {abs([truncate_number 3.5] - 0.5) < 1e-4}]}\nassert {[expr {abs([truncate_number 1.33] - 0.33) < 1e-4}]}\nassert {[expr {abs([truncate_number 123.456] - 0.456) < 1e-4}]}\n",
        "declaration": "proc truncate_number {number} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[expr {abs([truncate_number 3.5] - 0.5) < 1e-4}]}\n",
        "prompt_text": "Given a positive floating point number, it can be decomposed into and integer part (largest integer smaller than given number) and decimals (leftover part always smaller than 1).  Return the decimal part of the number.",
        "prompt_explain": "Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number 3.5\n0.5",
        "func_title": "proc truncate_number {number}"
    },
    {
        "prompt": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n# >>> find_closest_elements {1.0 2.0 3.0 4.0 5.0 2.2}\n# 2.0 2.2\n# >>> find_closest_elements {1.0 2.0 3.0 4.0 5.0 2.0}\n# 2.0 2.0\nproc find_closest_elements {numbers} {\n",
        "canonical_solution": "    set out {}\n    set length [llength $numbers]\n    for {set i 0} {$i < $length} {incr i} {\n        for {set j [expr {$i + 1}]} {$j < $length} {incr j} {\n            set diff [expr {abs([lindex $numbers $i] - [lindex $numbers $j])}]\n            if {[llength $out] == 0 || $diff < [expr {abs([lindex $out 0] - [lindex $out 1])}]} {\n                set out [list [lindex $numbers $i] [lindex $numbers $j]]\n            }\n        }\n    }\n    if {[lindex $out 0] > [lindex $out 1]} {\n        set out [list [lindex $out 1] [lindex $out 0]]\n    }\n    return $out\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {\n        return false\n    }\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {abs([lindex $a $i] - [lindex $b $i]) > 1e-4} {\n            return false\n        }\n    }\n    return true\n}\n\nassert {[issame [find_closest_elements {1.0 2.0 3.9 4.0 5.0 2.2}] {3.9 4.0}]}\nassert {[issame [find_closest_elements {1.0 2.0 5.9 4.0 5.0}] {5.0 5.9}]}\nassert {[issame [find_closest_elements {1.0 2.0 3.0 4.0 5.0 2.2}] {2.0 2.2}]}\nassert {[issame [find_closest_elements {1.0 2.0 3.0 4.0 5.0 2.0}] {2.0 2.0}]}\nassert {[issame [find_closest_elements {1.1 2.2 3.1 4.1 5.1}] {2.2 3.1}]}\n",
        "declaration": "proc find_closest_elements {numbers} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {\n        return false\n    }\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {abs([lindex $a $i] - [lindex $b $i]) > 1e-4} {\n            return false\n        }\n    }\n    return true\n}\n\nassert {[issame [find_closest_elements {1.0 2.0 3.0 4.0 5.0 2.2}] {2.0 2.2}]}\nassert {[issame [find_closest_elements {1.0 2.0 3.0 4.0 5.0 2.0}] {2.0 2.0}]}\n",
        "prompt_text": "From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).",
        "prompt_explain": "From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n>>> find_closest_elements {1.0 2.0 3.0 4.0 5.0 2.2}\n2.0 2.2\n>>> find_closest_elements {1.0 2.0 3.0 4.0 5.0 2.0}\n2.0 2.0",
        "func_title": "proc find_closest_elements {numbers}"
    },
    {
        "prompt": "# Given list of numbers (of at least two elements), apply a linear transform to that list, such that the smallest number will become 0 and the largest will become 1\n# >>> rescale_to_unit {1.0 2.0 3.0 4.0 5.0}\n# {0.0 0.25 0.5 0.75 1.0}\nproc rescale_to_unit {numbers} {\n",
        "canonical_solution": "    set min [lindex $numbers 0]\n    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num < $min} {set min $num}\n        if {$num > $max} {set max $num}\n    }\n    set result {}\n    foreach num $numbers {\n        lappend result [expr {($num - $min) / ($max - $min)}]\n    }\n    return $result\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {return false}\n    foreach ai $a bi $b {\n        if {abs($ai - $bi) > 1e-4} {return false}\n    }\n    return true\n}\n\nassert {[issame [rescale_to_unit {2.0 49.9}] {0.0 1.0}]}\nassert {[issame [rescale_to_unit {100.0 49.9}] {1.0 0.0}]}\nassert {[issame [rescale_to_unit {1.0 2.0 3.0 4.0 5.0}] {0.0 0.25 0.5 0.75 1.0}]}\nassert {[issame [rescale_to_unit {2.0 1.0 5.0 3.0 4.0}] {0.25 0.0 1.0 0.5 0.75}]}\nassert {[issame [rescale_to_unit {12.0 11.0 15.0 13.0 14.0}] {0.25 0.0 1.0 0.5 0.75}]}\n",
        "declaration": "proc rescale_to_unit {numbers} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {return false}\n    foreach ai $a bi $b {\n        if {abs($ai - $bi) > 1e-4} {return false}\n    }\n    return true\n}\n\nassert {[issame [rescale_to_unit {1.0 2.0 3.0 4.0 5.0}] {0.0 0.25 0.5 0.75 1.0}]}\n",
        "prompt_text": "Given list of numbers (of at least two elements), apply a linear transform to that list, such that the smallest number will become 0 and the largest will become 1",
        "prompt_explain": "Given list of numbers (of at least two elements), apply a linear transform to that list, such that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit {1.0 2.0 3.0 4.0 5.0}\n{0.0 0.25 0.5 0.75 1.0}",
        "func_title": "proc rescale_to_unit {numbers}"
    },
    {
        "prompt": "# Filter given list of any python values only for integers\n# >>> filter_integers {a 3.14 5}\n# {5}\n# >>> filter_integers {1 2 3 abc {} {}}\n# {1 2 3}\nproc filter_integers {values} {\n",
        "canonical_solution": "    set out {}\n    foreach value $values {\n        if {[string is integer -strict $value]} {\n            lappend out $value\n        }\n    }\n    return $out\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {\n        return false\n    }\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {\n            return false\n        }\n    }\n    return true\n}\n\nassert {[issame [filter_integers {}] {}]}\nassert {[issame [filter_integers {4 {} 23.2 9 adasd}] {4 9}]}\nassert {[issame [filter_integers {3 c 3 3 a b}] {3 3 3}]}\n",
        "declaration": "proc filter_integers {values} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {\n        return false\n    }\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {\n            return false\n        }\n    }\n    return true\n}\n\nassert {[issame [filter_integers {a 3.14 5}] {5}]}\nassert {[issame [filter_integers {1 2 3 abc {} {}}] {1 2 3}]}\n",
        "prompt_text": "Filter given list of any python values only for integers",
        "prompt_explain": "Filter given list of any python values only for integers\n>>> filter_integers {a 3.14 5}\n{5}\n>>> filter_integers {1 2 3 abc {} {}}\n{1 2 3}",
        "func_title": "proc filter_integers {values}"
    },
    {
        "prompt": "# Return length of given string\n# >>> strlen \"\"\n# 0\n# >>> strlen \"abc\"\n# 3\nproc strlen {str} {\n",
        "canonical_solution": "    return [string length $str]\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[strlen \"\"] == 0}\nassert {[strlen \"x\"] == 1}\nassert {[strlen \"asdasnakj\"] == 9}\n",
        "declaration": "proc strlen {str} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[strlen \"\"] == 0}\nassert {[strlen \"abc\"] == 3}\n",
        "prompt_text": "Return length of given string",
        "prompt_explain": "Return length of given string\n>>> strlen \"\"\n0\n>>> strlen \"abc\"\n3",
        "func_title": "proc strlen {str}"
    },
    {
        "prompt": "# For a given number n, find the largest number that divides n evenly, smaller than n\n# >>> largest_divisor 15\n# 5\nproc largest_divisor {n} {\n",
        "canonical_solution": "    for {set i 2} {$i * $i <= $n} {incr i} {\n        if {$n % $i == 0} {\n            return [expr {$n / $i}]\n        }\n    }\n    return 1\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[largest_divisor 3] == 1}\nassert {[largest_divisor 7] == 1}\nassert {[largest_divisor 10] == 5}\nassert {[largest_divisor 100] == 50}\nassert {[largest_divisor 49] == 7}\n",
        "declaration": "proc largest_divisor {n} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[largest_divisor 15] == 5}\n",
        "prompt_text": "For a given number n, find the largest number that divides n evenly, smaller than n",
        "prompt_explain": "For a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor 15\n5",
        "func_title": "proc largest_divisor {n}"
    },
    {
        "prompt": "# Return list of prime factors of given integer in the order from smallest to largest.\n# Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n# Input number should be equal to the product of all factors\n# >>> factorize 8\n# {2 2 2}\n# >>> factorize 25\n# {5 5}\n# >>> factorize 70\n# {2 5 7}\nproc factorize {n} {\n",
        "canonical_solution": "    set out {}\n    for {set i 2} {$i * $i <= $n} {incr i} {\n        while {$n % $i == 0} {\n            set n [expr {$n / $i}]\n            lappend out $i\n        }\n    }\n    if {$n > 1} {\n        lappend out $n\n    }\n    return $out\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {\n        return false\n    }\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {\n            return false\n        }\n    }\n    return true\n}\n\nassert {[issame [factorize 2] {2}]}\nassert {[issame [factorize 4] {2 2}]}\nassert {[issame [factorize 8] {2 2 2}]}\nassert {[issame [factorize [expr {3 * 19}]] {3 19}]}\nassert {[issame [factorize [expr {3 * 19 * 3 * 19}]] {3 3 19 19}]}\nassert {[issame [factorize [expr {3 * 19 * 3 * 19 * 3 * 19}]] {3 3 3 19 19 19}]}\nassert {[issame [factorize [expr {3 * 19 * 19 * 19}]] {3 19 19 19}]}\nassert {[issame [factorize [expr {3 * 2 * 3}]] {2 3 3}]}\n",
        "declaration": "proc factorize {n} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {\n        return false\n    }\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {\n            return false\n        }\n    }\n    return true\n}\n\nassert {[issame [factorize 8] {2 2 2}]}\nassert {[issame [factorize 25] {5 5}]}\nassert {[issame [factorize 70] {2 5 7}]}\n",
        "prompt_text": "Return list of prime factors of given integer in the order from smallest to largest. Each of the factors should be listed number of times corresponding to how many times it appears in factorization. Input number should be equal to the product of all factors",
        "prompt_explain": "Return list of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be listed number of times corresponding to how many times it appears in factorization.\nInput number should be equal to the product of all factors\n>>> factorize 8\n{2 2 2}\n>>> factorize 25\n{5 5}\n>>> factorize 70\n{2 5 7}",
        "func_title": "proc factorize {n}"
    },
    {
        "prompt": "# From a list of integers, remove all elements that occur more than once. Keep order of elements left the same as in the input.\n# >>> remove_duplicates {1 2 3 2 4}\n# {1 3 4}\nproc remove_duplicates {numbers} {\n",
        "canonical_solution": "    set out {}\n    set has1 {}\n    set has2 {}\n    foreach num $numbers {\n        if {[lsearch -exact $has2 $num] != -1} continue\n        if {[lsearch -exact $has1 $num] != -1} {\n            lappend has2 $num\n        } else {\n            lappend has1 $num\n        }\n    }\n    foreach num $numbers {\n        if {[lsearch -exact $has2 $num] == -1} {\n            lappend out $num\n        }\n    }\n    return $out\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {return false}\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {return false}\n    }\n    return true\n}\n\nassert {[issame [remove_duplicates {}] {}]}\nassert {[issame [remove_duplicates {1 2 3 4}] {1 2 3 4}]}\nassert {[issame [remove_duplicates {1 2 3 2 4 3 5}] {1 4 5}]}\n",
        "declaration": "proc remove_duplicates {numbers} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {return false}\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {return false}\n    }\n    return true\n}\n\nassert {[issame [remove_duplicates {1 2 3 2 4}] {1 3 4}]}\n",
        "prompt_text": "From a list of integers, remove all elements that occur more than once. Keep order of elements left the same as in the input.",
        "prompt_explain": "From a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates {1 2 3 2 4}\n{1 3 4}",
        "func_title": "proc remove_duplicates {numbers}"
    },
    {
        "prompt": "# Filter an input list of strings only for ones that start with a given prefix.\n# >>> filter_by_prefix {} \"a\"\n# {}\n# >>> filter_by_prefix {\"abc\" \"bcd\" \"cde\" \"vector\"} \"a\"\n# {\"abc\" \"vector\"}\nproc filter_by_prefix {strings prefix} {\n",
        "canonical_solution": "    set out {}\n    foreach str $strings {\n        if {[string equal -length [string length $prefix] $str $prefix]} {\n            lappend out $str\n        }\n    }\n    return $out\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {\n        return false\n    }\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] ne [lindex $b $i]} {\n            return false\n        }\n    }\n    return true\n}\n\nassert {[issame [filter_by_prefix {} \"john\"] {}]}\nassert {[issame [filter_by_prefix {\"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\"} \"xxx\"] {\"xxx\" \"xxxAAA\" \"xxx\"}]}\n",
        "declaration": "proc filter_by_prefix {strings prefix} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {\n        return false\n    }\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] ne [lindex $b $i]} {\n            return false\n        }\n    }\n    return true\n}\n\nassert {[issame [filter_by_prefix {} \"a\"] {}]}\nassert {[issame [filter_by_prefix {\"abc\" \"bcd\" \"cde\" \"array\"} \"a\"] {\"abc\" \"array\"}]}\n",
        "prompt_text": "Filter an input list of strings only for ones that start with a given prefix.",
        "prompt_explain": "Filter an input list of strings only for ones that start with a given prefix.\n>>> filter_by_prefix {} \"a\"\n{}\n>>> filter_by_prefix {\"abc\" \"bcd\" \"cde\" \"vector\"} \"a\"\n{\"abc\" \"vector\"}",
        "func_title": "proc filter_by_prefix {strings prefix}"
    },
    {
        "prompt": "# You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account falls below zero, and at that point function should return true. Otherwise it should return false.\n# >>> below_zero {1 2 3}\n# false\n# >>> below_zero {1 2 -4 5}\n# true\nproc below_zero {operations} {\n",
        "canonical_solution": "    set balance 0\n    foreach op $operations {\n        incr balance $op\n        if {$balance < 0} {\n            return true\n        }\n    }\n    return false\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[below_zero {}] == false}\nassert {[below_zero {1 2 -3 1 2 -3}] == false}\nassert {[below_zero {1 2 -4 5 6}] == true}\nassert {[below_zero {1 -1 2 -2 5 -5 4 -4}] == false}\nassert {[below_zero {1 -1 2 -2 5 -5 4 -5}] == true}\nassert {[below_zero {1 -2 2 -2 5 -5 4 -4}] == true}\n",
        "declaration": "proc below_zero {operations} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[below_zero {1 2 3}] == false}\nassert {[below_zero {1 2 -4 5}] == true}\n",
        "prompt_text": "You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account falls below zero, and at that point function should return true. Otherwise it should return false.",
        "prompt_explain": "You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account falls below zero, and at that point function should return true. Otherwise it should return false.\n>>> below_zero {1 2 3}\nfalse\n>>> below_zero {1 2 -4 5}\ntrue",
        "func_title": "proc below_zero {operations}"
    },
    {
        "prompt": "# Return only positive numbers in the list.\n# >>> get_positive {-1 2 -4 5 6}\n# {2 5 6}\n# >>> get_positive {5 3 -5 2 -3 3 9 0 123 1 -10}\n# {5 3 2 3 9 123 1}\nproc get_positive {l} {\n",
        "canonical_solution": "    set out {}\n    foreach num $l {\n        if {$num > 0} {\n            lappend out $num\n        }\n    }\n    return $out\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {\n        return false\n    }\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {abs([lindex $a $i] - [lindex $b $i]) > 1e-4} {\n            return false\n        }\n    }\n    return true\n}\n\nassert {[issame [get_positive {-1 -2 4 5 6}] {4 5 6}]}\nassert {[issame [get_positive {5 3 -5 2 3 3 9 0 123 1 -10}] {5 3 2 3 3 9 123 1}]}\nassert {[issame [get_positive {-1 -2}] {}]}\nassert {[issame [get_positive {}] {}]}\n",
        "declaration": "proc get_positive {l} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {\n        return false\n    }\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {abs([lindex $a $i] - [lindex $b $i]) > 1e-4} {\n            return false\n        }\n    }\n    return true\n}\n\nassert {[issame [get_positive {-1 2 -4 5 6}] {2 5 6}]}\nassert {[issame [get_positive {5 3 -5 2 -3 3 9 0 123 1 -10}] {5 3 2 3 9 123 1}]}\n",
        "prompt_text": "Return only positive numbers in the list.",
        "prompt_explain": "Return only positive numbers in the list.\n>>> get_positive {-1 2 -4 5 6}\n{2 5 6}\n>>> get_positive {5 3 -5 2 -3 3 9 0 123 1 -10}\n{5 3 2 3 9 123 1}",
        "func_title": "proc get_positive {l}"
    },
    {
        "prompt": "# Return true if a given number is prime, and false otherwise.\n# >>> is_prime 6\n# false\n# >>> is_prime 101\n# true\n# >>> is_prime 11\n# true\n# >>> is_prime 13441\n# true\n# >>> is_prime 61\n# true\n# >>> is_prime 4\n# false\n# >>> is_prime 1\n# false\nproc is_prime {n} {\n",
        "canonical_solution": "    if {$n < 2} {return false}\n    for {set i 2} {$i * $i <= $n} {incr i} {\n        if {$n % $i == 0} {return false}\n    }\n    return true\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[is_prime 6] == false}\nassert {[is_prime 101] == true}\nassert {[is_prime 11] == true}\nassert {[is_prime 13441] == true}\nassert {[is_prime 61] == true}\nassert {[is_prime 4] == false}\nassert {[is_prime 1] == false}\nassert {[is_prime 5] == true}\nassert {[is_prime 11] == true}\nassert {[is_prime 17] == true}\nassert {[is_prime [expr {5 * 17}]] == false}\nassert {[is_prime [expr {11 * 7}]] == false}\nassert {[is_prime [expr {13441 * 19}]] == false}\n",
        "declaration": "proc is_prime {n} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[is_prime 6] == false}\nassert {[is_prime 101] == true}\nassert {[is_prime 11] == true}\nassert {[is_prime 13441] == true}\nassert {[is_prime 61] == true}\nassert {[is_prime 4] == false}\nassert {[is_prime 1] == false}\n",
        "prompt_text": "Return true if a given number is prime, and false otherwise.",
        "prompt_explain": "Return true if a given number is prime, and false otherwise.\n>>> is_prime 6\nfalse\n>>> is_prime 101\ntrue\n>>> is_prime 11\ntrue\n>>> is_prime 13441\ntrue\n>>> is_prime 61\ntrue\n>>> is_prime 4\nfalse\n>>> is_prime 1\nfalse",
        "func_title": "proc is_prime {n}"
    },
    {
        "prompt": "# This function takes a list l and returns a list l' such that l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal to the values of the corresponding indices of l, but sorted.\n# >>> sort_third {1 2 3}\n# {1 2 3}\n# >>> sort_third {5 6 3 4 8 9 2}\n# {2 6 3 4 8 9 5}\nproc sort_third {l} {\n",
        "canonical_solution": "    set third {}\n    set length [llength $l]\n    for {set i 0} {$i < $length} {incr i 3} {\n        lappend third [lindex $l $i]\n    }\n    set third [lsort -integer $third]\n    set out {}\n    set thirdIndex 0\n    for {set i 0} {$i < $length} {incr i} {\n        if {$i % 3 == 0} {\n            lappend out [lindex $third $thirdIndex]\n            incr thirdIndex\n        } else {\n            lappend out [lindex $l $i]\n        }\n    }\n    return $out\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {return false}\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {return false}\n    }\n    return true\n}\n\nassert {[issame [sort_third {1 2 3}] {1 2 3}]}\nassert {[issame [sort_third {5 3 -5 2 -3 3 9 0 123 1 -10}] {5 3 -5 2 -3 3 9 0 123 1 -10}]}\nassert {[issame [sort_third {5 8 -12 4 23 2 3 11 12 -10}] {5 8 -12 4 23 2 3 11 12 -10}]}\nassert {[issame [sort_third {5 6 3 4 8 9 2}] {2 6 3 4 8 9 5}]}\nassert {[issame [sort_third {5 8 3 4 6 9 2}] {2 8 3 4 6 9 5}]}\nassert {[issame [sort_third {5 6 9 4 8 3 2}] {2 6 9 4 8 3 5}]}\nassert {[issame [sort_third {5 6 3 4 8 9 2 1}] {2 6 3 4 8 9 5 1}]}\n",
        "declaration": "proc sort_third {l} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {return false}\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {return false}\n    }\n    return true\n}\n\nassert {[issame [sort_third {1 2 3}] {1 2 3}]}\nassert {[issame [sort_third {5 6 3 4 8 9 2}] {2 6 3 4 8 9 5}]}\n",
        "prompt_text": "This function takes a list l and returns a list l' such that l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal to the values of the corresponding indices of l, but sorted.",
        "prompt_explain": "This function takes a list l and returns a list l' such that\nl' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\nto the values of the corresponding indices of l, but sorted.\n>>> sort_third {1 2 3}\n{1 2 3}\n>>> sort_third {5 6 3 4 8 9 2}\n{2 6 3 4 8 9 5}",
        "func_title": "proc sort_third {l}"
    },
    {
        "prompt": "# Return sorted unique elements in a list\n# >>> unique {5 3 5 2 3 3 9 0 123}\n# {0 2 3 5 9 123}\nproc unique {l} {\n",
        "canonical_solution": "    set out {}\n    foreach element $l {\n        if {[lsearch -exact $out $element] == -1} {\n            lappend out $element\n        }\n    }\n    set out [lsort -integer $out]\n    return $out\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {\n        return false\n    }\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {\n            return false\n        }\n    }\n    return true\n}\n\nassert {[issame [unique {5 3 5 2 3 3 9 0 123}] {0 2 3 5 9 123}]}\n",
        "declaration": "proc unique {l} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {\n        return false\n    }\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {\n            return false\n        }\n    }\n    return true\n}\n\nassert {[issame [unique {5 3 5 2 3 3 9 0 123}] {0 2 3 5 9 123}]}\n",
        "prompt_text": "Return sorted unique elements in a list",
        "prompt_explain": "Return sorted unique elements in a list\n>>> unique {5 3 5 2 3 3 9 0 123}\n{0 2 3 5 9 123}",
        "func_title": "proc unique {l}"
    },
    {
        "prompt": "# Return maximum element in the list.\n# >>> max_element {1 2 3}\n# 3\n# >>> max_element {5 3 -5 2 -3 3 9 0 123 1 -10}\n# 123\nproc max_element {l} {\n",
        "canonical_solution": "    set max -10000\n    foreach num $l {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {abs([max_element {1 2 3}] - 3) < 1e-4}\nassert {abs([max_element {5 3 -5 2 -3 3 9 0 124 1 -10}] - 124) < 1e-4}\n",
        "declaration": "proc max_element {l} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {abs([max_element {1 2 3}] - 3) < 1e-4}\nassert {abs([max_element {5 3 -5 2 -3 3 9 0 123 1 -10}] - 123) < 1e-4}\n",
        "prompt_text": "Return maximum element in the list.",
        "prompt_explain": "Return maximum element in the list.\n>>> max_element {1 2 3}\n3\n>>> max_element {5 3 -5 2 -3 3 9 0 123 1 -10}\n123",
        "func_title": "proc max_element {l}"
    },
    {
        "prompt": "# Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n# >>> fizz_buzz 50\n# 0\n# >>> fizz_buzz 78\n# 2\n# >>> fizz_buzz 79\n# 3\nproc fizz_buzz {n} {\n",
        "canonical_solution": "    set count 0\n    for {set i 0} {$i < $n} {incr i} {\n        if {$i % 11 == 0 || $i % 13 == 0} {\n            set q $i\n            while {$q > 0} {\n                if {$q % 10 == 7} {\n                    incr count\n                }\n                set q [expr {$q / 10}]\n            }\n        }\n    }\n    return $count\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[fizz_buzz 50] == 0}\nassert {[fizz_buzz 78] == 2}\nassert {[fizz_buzz 79] == 3}\nassert {[fizz_buzz 100] == 3}\nassert {[fizz_buzz 200] == 6}\nassert {[fizz_buzz 4000] == 192}\nassert {[fizz_buzz 10000] == 639}\nassert {[fizz_buzz 100000] == 8026}\n",
        "declaration": "proc fizz_buzz {n} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[fizz_buzz 50] == 0}\nassert {[fizz_buzz 78] == 2}\nassert {[fizz_buzz 79] == 3}\n",
        "prompt_text": "Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.",
        "prompt_explain": "Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz 50\n0\n>>> fizz_buzz 78\n2\n>>> fizz_buzz 79\n3",
        "func_title": "proc fizz_buzz {n}"
    },
    {
        "prompt": "# This function takes a list l and returns a list l' such that l' is identical to l in the odd indices, while its values at the even indices are equal to the values of the even indices of l, but sorted.\n# >>> sort_even {1 2 3}\n# {1 2 3}\n# >>> sort_even {5 6 3 4}\n# {3 6 5 4}\nproc sort_even {l} {\n",
        "canonical_solution": "    set out {}\n    set even {}\n    for {set i 0} {[expr {$i * 2}] < [llength $l]} {incr i} {\n        lappend even [lindex $l [expr {$i * 2}]]\n    }\n    set even [lsort -real $even]\n    for {set i 0} {$i < [llength $l]} {incr i} {\n        if {$i % 2 == 0} {\n            lappend out [lindex $even [expr {$i / 2}]]\n        } else {\n            lappend out [lindex $l $i]\n        }\n    }\n    return $out\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {\n        return false\n    }\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {abs([lindex $a $i] - [lindex $b $i]) > 1e-4} {\n            return false\n        }\n    }\n    return true\n}\n\nassert {[issame [sort_even {1 2 3}] {1 2 3}]}\nassert {[issame [sort_even {5 3 -5 2 -3 3 9 0 123 1 -10}] {-10 3 -5 2 -3 3 5 0 9 1 123}]}\nassert {[issame [sort_even {5 8 -12 4 23 2 3 11 12 -10}] {-12 8 3 4 5 2 12 11 23 -10}]}\n",
        "declaration": "proc sort_even {l} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {\n        return false\n    }\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {abs([lindex $a $i] - [lindex $b $i]) > 1e-4} {\n            return false\n        }\n    }\n    return true\n}\n\nassert {[issame [sort_even {1 2 3}] {1 2 3}]}\nassert {[issame [sort_even {5 6 3 4}] {3 6 5 4}]}\n",
        "prompt_text": "This function takes a list l and returns a list l' such that l' is identical to l in the odd indices, while its values at the even indices are equal to the values of the even indices of l, but sorted.",
        "prompt_explain": "This function takes a list l and returns a list l' such that\nl' is identical to l in the odd indices, while its values at the even indices are equal\nto the values of the even indices of l, but sorted.\n>>> sort_even {1 2 3}\n{1 2 3}\n>>> sort_even {5 6 3 4}\n{3 6 5 4}",
        "func_title": "proc sort_even {l}"
    },
    {
        "prompt": "# takes as input string encoded with encode_cyclic function. Returns decoded string.\nproc decode_cyclic {s} {\n",
        "canonical_solution": "    set l [string length $s]\n    set num [expr {($l + 2) / 3}]\n    set output \"\"\n    for {set i 0} {$i * 3 < $l} {incr i} {\n        set x [string range $s [expr {$i * 3}] [expr {$i * 3 + 2}]]\n        if {[string length $x] == 3} {\n            set x [string index $x 2][string range $x 0 1]\n        }\n        append output $x\n    }\n    return $output\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nfor {set i 0} {$i < 100} {incr i} {\n    set l [expr {10 + int(rand() * 11)}]\n    set str \"\"\n    for {set j 0} {$j < $l} {incr j} {\n        set chr [expr {97 + int(rand() * 26)}]\n        append str [format %c $chr]\n    }\n\n    set encoded_str [encode_cyclic $str]\n    assert {[decode_cyclic $encoded_str] == $str}\n}\n",
        "declaration": "proc decode_cyclic {s} {\n",
        "example_test": "",
        "prompt_text": "takes as input string encoded with encode_cyclic function. Returns decoded string.",
        "prompt_explain": "takes as input string encoded with encode_cyclic function. Returns decoded string.",
        "func_title": "proc decode_cyclic {s}"
    },
    {
        "prompt": "# prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n# >>> prime_fib 1\n# 2\n# >>> prime_fib 2\n# 3\n# >>> prime_fib 3\n# 5\n# >>> prime_fib 4\n# 13\n# >>> prime_fib 5\n# 89\nproc prime_fib {n} {\n",
        "canonical_solution": "    set f1 1\n    set f2 2\n    set count 0\n    while {$count < $n} {\n        set temp $f1\n        set f1 $f2\n        set f2 [expr {$temp + $f2}]\n        set isprime 1\n        for {set w 2} {$w * $w <= $f1} {incr w} {\n            if {$f1 % $w == 0} {\n                set isprime 0\n                break\n            }\n        }\n        if {$isprime} {\n            incr count\n        }\n        if {$count == $n} {\n            return $f1\n        }\n    }\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[prime_fib 1] == 2}\nassert {[prime_fib 2] == 3}\nassert {[prime_fib 3] == 5}\nassert {[prime_fib 4] == 13}\nassert {[prime_fib 5] == 89}\nassert {[prime_fib 6] == 233}\nassert {[prime_fib 7] == 1597}\nassert {[prime_fib 8] == 28657}\nassert {[prime_fib 9] == 514229}\nassert {[prime_fib 10] == 433494437}\n",
        "declaration": "proc prime_fib {n} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[prime_fib 1] == 2}\nassert {[prime_fib 2] == 3}\nassert {[prime_fib 3] == 5}\nassert {[prime_fib 4] == 13}\nassert {[prime_fib 5] == 89}\n",
        "prompt_text": "prime_fib returns n-th number that is a Fibonacci number and it's also prime.",
        "prompt_explain": "prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib 1\n2\n>>> prime_fib 2\n3\n>>> prime_fib 3\n5\n>>> prime_fib 4\n13\n>>> prime_fib 5\n89",
        "func_title": "proc prime_fib {n}"
    },
    {
        "prompt": "# For a given list of input numbers, calculate Mean Absolute Deviation around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute difference between each element and a centerpoint (mean in this case):\n# MAD = average | x - x_mean |\n# >>> mean_absolute_deviation {1.0 2.0 3.0 4.0}\n# 1.0\nproc mean_absolute_deviation {numbers} {\n",
        "canonical_solution": "    set sum 0\n    set length [llength $numbers]\n    foreach num $numbers {\n        set sum [expr {$sum + $num}]\n    }\n    set avg [expr {$sum / $length}]\n    set msum 0\n    foreach num $numbers {\n        set msum [expr {$msum + abs($num - $avg)}]\n    }\n    return [expr {$msum / $length}]\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {abs([mean_absolute_deviation {1.0 2.0 3.0}] - [expr {2.0 / 3.0}]) < 1e-4}\nassert {abs([mean_absolute_deviation {1.0 2.0 3.0 4.0}] - 1.0) < 1e-4}\nassert {abs([mean_absolute_deviation {1.0 2.0 3.0 4.0 5.0}] - [expr {6.0 / 5.0}]) < 1e-4}\n",
        "declaration": "proc mean_absolute_deviation {numbers} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {abs([mean_absolute_deviation {1.0 2.0 3.0 4.0}] - 1.0) < 1e-4}\n",
        "prompt_text": "For a given list of input numbers, calculate Mean Absolute Deviation around the mean of this dataset. Mean Absolute Deviation is the average absolute difference between each element and a centerpoint (mean in this case): MAD = average | x - x_mean |",
        "prompt_explain": "For a given list of input numbers, calculate Mean Absolute Deviation around the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each element and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation {1.0 2.0 3.0 4.0}\n1.0",
        "func_title": "proc mean_absolute_deviation {numbers}"
    },
    {
        "prompt": "# triples_sum_to_zero takes a list of integers as an input.\n# it returns true if there are three distinct elements in the list that sum to zero, and false otherwise.\n# >>> triples_sum_to_zero {1 3 5 0}\n# false\n# >>> triples_sum_to_zero {1 3 -2 1}\n# true\n# >>> triples_sum_to_zero {1 2 3 7}\n# false\n# >>> triples_sum_to_zero {2 4 -5 3 9 7}\n# true\n# >>> triples_sum_to_zero {1}\n# false\nproc triples_sum_to_zero {l} {\n",
        "canonical_solution": "    set length [llength $l]\n    for {set i 0} {$i < $length} {incr i} {\n        for {set j [expr {$i + 1}]} {$j < $length} {incr j} {\n            for {set k [expr {$j + 1}]} {$k < $length} {incr k} {\n                if {[expr {[lindex $l $i] + [lindex $l $j] + [lindex $l $k]}] == 0} {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[triples_sum_to_zero {1 3 5 0}] == false}\nassert {[triples_sum_to_zero {1 3 5 -1}] == false}\nassert {[triples_sum_to_zero {1 3 -2 1}] == true}\nassert {[triples_sum_to_zero {1 2 3 7}] == false}\nassert {[triples_sum_to_zero {1 2 5 7}] == false}\nassert {[triples_sum_to_zero {2 4 -5 3 9 7}] == true}\nassert {[triples_sum_to_zero {1}] == false}\nassert {[triples_sum_to_zero {1 3 5 -100}] == false}\nassert {[triples_sum_to_zero {100 3 5 -100}] == false}\n",
        "declaration": "proc triples_sum_to_zero {l} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[triples_sum_to_zero {1 3 5 0}] == false}\nassert {[triples_sum_to_zero {1 3 -2 1}] == true}\nassert {[triples_sum_to_zero {1 2 3 7}] == false}\nassert {[triples_sum_to_zero {2 4 -5 3 9 7}] == true}\n",
        "prompt_text": "triples_sum_to_zero takes a list of integers as an input. it returns true if there are three distinct elements in the list that sum to zero, and false otherwise.",
        "prompt_explain": "triples_sum_to_zero takes a list of integers as an input.\nit returns true if there are three distinct elements in the list that\nsum to zero, and false otherwise.\n\n>>> triples_sum_to_zero {1 3 5 0}\nfalse\n>>> triples_sum_to_zero {1 3 -2 1}\ntrue\n>>> triples_sum_to_zero {1 2 3 7}\nfalse\n>>> triples_sum_to_zero {2 4 -5 3 9 7}\ntrue\n>>> triples_sum_to_zero {1}\nfalse",
        "func_title": "proc triples_sum_to_zero {l}"
    },
    {
        "prompt": "# Imagine a road that's a perfectly straight infinitely long line. n cars are driving left to right;  simultaneously, a different set of n cars are driving right to left.   The two sets of cars start out being very far from each other.  All cars move in the same speed.  Two cars are said to collide when a car that's moving left to right hits a car that's moving right to left. However, the cars are infinitely sturdy and strong; as a result, they continue moving in their trajectory as if they did not collide.  This function outputs the number of such collisions.\nproc car_race_collision {n} {\n",
        "canonical_solution": "    return [expr {$n * $n}]\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[car_race_collision 2] == 4}\nassert {[car_race_collision 3] == 9}\nassert {[car_race_collision 4] == 16}\nassert {[car_race_collision 8] == 64}\nassert {[car_race_collision 10] == 100}\n",
        "declaration": "proc car_race_collision {n} {\n",
        "example_test": "",
        "prompt_text": "Imagine a road that's a perfectly straight infinitely long line. n cars are driving left to right;  simultaneously, a different set of n cars are driving right to left.   The two sets of cars start out being very far from each other.  All cars move in the same speed.  Two cars are said to collide when a car that's moving left to right hits a car that's moving right to left. However, the cars are infinitely sturdy and strong; as a result, they continue moving in their trajectory as if they did not collide.  This function outputs the number of such collisions.",
        "prompt_explain": "Imagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.",
        "func_title": "proc car_race_collision {n}"
    },
    {
        "prompt": "# Return list with elements incremented by 1.\n# >>> incr_list {1 2 3}\n# {2 3 4}\n# >>> incr_list {5 3 5 2 3 3 9 0 123}\n# {6 4 6 3 4 4 10 1 124}\nproc incr_list {l} {\n",
        "canonical_solution": "    set result {}\n    foreach num $l {\n        lappend result [expr {$num + 1}]\n    }\n    return $result\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {\n        return false\n    }\n    foreach num1 $a num2 $b {\n        if {$num1 != $num2} {\n            return false\n        }\n    }\n    return true\n}\n\nassert {[issame [incr_list {}] {}]}\nassert {[issame [incr_list {3 2 1}] {4 3 2}]}\nassert {[issame [incr_list {5 2 5 2 3 3 9 0 123}] {6 3 6 3 4 4 10 1 124}]}\n",
        "declaration": "proc incr_list {l} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {\n        return false\n    }\n    foreach num1 $a num2 $b {\n        if {$num1 != $num2} {\n            return false\n        }\n    }\n    return true\n}\n\nassert {[issame [incr_list {1 2 3}] {2 3 4}]}\nassert {[issame [incr_list {5 2 5 2 3 3 9 0 123}] {6 3 6 3 4 4 10 1 124}]}\n",
        "prompt_text": "Return list with elements incremented by 1.",
        "prompt_explain": "Return list with elements incremented by 1.\n>>> incr_list {1 2 3}\n{2 3 4}\n>>> incr_list {5 3 5 2 3 3 9 0 123}\n{6 4 6 3 4 4 10 1 124}",
        "func_title": "proc incr_list {l}"
    },
    {
        "prompt": "# pairs_sum_to_zero takes a list of integers as an input. it returns true if there are two distinct elements in the list that sum to zero, and false otherwise.\n# >>> pairs_sum_to_zero {1 3 5 0}\n# false\n# >>> pairs_sum_to_zero {1 3 -2 1}\n# false\n# >>> pairs_sum_to_zero {1 2 3 7}\n# false\n# >>> pairs_sum_to_zero {2 4 -5 3 5 7}\n# true\n# >>> pairs_sum_to_zero {1}\n# false\nproc pairs_sum_to_zero {l} {\n",
        "canonical_solution": "    set length [llength $l]\n    for {set i 0} {$i < $length} {incr i} {\n        for {set j [expr {$i + 1}]} {$j < $length} {incr j} {\n            if {[expr {[lindex $l $i] + [lindex $l $j]}] == 0} {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[pairs_sum_to_zero {1 3 5 0}] == false}\nassert {[pairs_sum_to_zero {1 3 -2 1}] == false}\nassert {[pairs_sum_to_zero {1 2 3 7}] == false}\nassert {[pairs_sum_to_zero {2 4 -5 3 5 7}] == true}\nassert {[pairs_sum_to_zero {1}] == false}\nassert {[pairs_sum_to_zero {-3 9 -1 3 2 30}] == true}\nassert {[pairs_sum_to_zero {-3 9 -1 3 2 31}] == true}\nassert {[pairs_sum_to_zero {-3 9 -1 4 2 30}] == false}\nassert {[pairs_sum_to_zero {-3 9 -1 4 2 31}] == false}\n",
        "declaration": "proc pairs_sum_to_zero {l} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[pairs_sum_to_zero {1 3 5 0}] == false}\nassert {[pairs_sum_to_zero {1 3 -2 1}] == false}\nassert {[pairs_sum_to_zero {1 2 3 7}] == false}\nassert {[pairs_sum_to_zero {2 4 -5 3 5 7}] == true}\n",
        "prompt_text": "pairs_sum_to_zero takes a list of integers as an input. it returns true if there are two distinct elements in the list that sum to zero, and false otherwise.",
        "prompt_explain": "pairs_sum_to_zero takes a list of integers as an input.\nit returns true if there are two distinct elements in the list that\nsum to zero, and false otherwise.\n>>> pairs_sum_to_zero {1 3 5 0}\nfalse\n>>> pairs_sum_to_zero {1 3 -2 1}\nfalse\n>>> pairs_sum_to_zero {1 2 3 7}\nfalse\n>>> pairs_sum_to_zero {2 4 -5 3 5 7}\ntrue\n>>> pairs_sum_to_zero {1}\nfalse",
        "func_title": "proc pairs_sum_to_zero {l}"
    },
    {
        "prompt": "# Change numerical base of input number x to base. return string representation after the conversion. base numbers are less than 10.\n# >>> change_base 8 3\n# \"22\"\n# >>> change_base 8 2\n# \"1000\"\n# >>> change_base 7 2\n# \"111\"\nproc change_base {x base} {\n",
        "canonical_solution": "    set out \"\"\n    while {$x > 0} {\n        set out [expr {$x % $base}]$out\n        set x [expr {$x / $base}]\n    }\n    return $out\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[change_base 8 3] == \"22\"}\nassert {[change_base 9 3] == \"100\"}\nassert {[change_base 234 2] == \"11101010\"}\nassert {[change_base 16 2] == \"10000\"}\nassert {[change_base 8 2] == \"1000\"}\nassert {[change_base 7 2] == \"111\"}\nfor {set x 2} {$x < 8} {incr x} {\n    assert {[change_base $x [expr {$x + 1}]] == $x}\n}\n",
        "declaration": "proc change_base {x base} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[change_base 8 3] == \"22\"}\nassert {[change_base 8 2] == \"1000\"}\nassert {[change_base 7 2] == \"111\"}\n",
        "prompt_text": "Change numerical base of input number x to base. return string representation after the conversion. base numbers are less than 10.",
        "prompt_explain": "Change numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base 8 3\n\"22\"\n>>> change_base 8 2\n\"1000\"\n>>> change_base 7 2\n\"111\"",
        "func_title": "proc change_base {x base}"
    },
    {
        "prompt": "# Given length of a side and high return area for a triangle.\n# >>> triangle_area 5 3\n# 7.5\nproc triangle_area {a h} {\n",
        "canonical_solution": "    return [expr {$a * $h * 0.5}]\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {abs([triangle_area 5 3] - 7.5) < 1e-4}\nassert {abs([triangle_area 2 2] - 2.0) < 1e-4}\nassert {abs([triangle_area 10 8] - 40.0) < 1e-4}\n",
        "declaration": "proc triangle_area {a h} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {abs([triangle_area 5 3] - 7.5) < 1e-4}\n",
        "prompt_text": "Given length of a side and high return area for a triangle.",
        "prompt_explain": "Given length of a side and high return area for a triangle.\n>>> triangle_area 5 3\n7.5",
        "func_title": "proc triangle_area {a h}"
    },
    {
        "prompt": "# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n# Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n# >>> fib4 5\n# 4\n# >>> fib4 6\n# 8\n# >>> fib4 7\n# 14\nproc fib4 {n} {\n",
        "canonical_solution": "    set f [list 0 0 2 0]\n    for {set i 4} {$i <= $n} {incr i} {\n        lappend f [expr {[lindex $f [expr {$i - 1}]] + [lindex $f [expr {$i - 2}]] + [lindex $f [expr {$i - 3}]] + [lindex $f [expr {$i - 4}]]}]\n    }\n    return [lindex $f $n]\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[fib4 5] == 4}\nassert {[fib4 8] == 28}\nassert {[fib4 10] == 104}\nassert {[fib4 12] == 386}\n",
        "declaration": "proc fib4 {n} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[fib4 5] == 4}\nassert {[fib4 6] == 8}\nassert {[fib4 7] == 14}\n",
        "prompt_text": "The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:",
        "prompt_explain": "The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4 5\n4\n>>> fib4 6\n8\n>>> fib4 7\n14",
        "func_title": "proc fib4 {n}"
    },
    {
        "prompt": "# Return median of elements in the list l.\n# >>> median {3 1 2 4 5}\n# 3\n# >>> median {-10 4 6 1000 10 20}\n# 15.0\nproc median {l} {\n",
        "canonical_solution": "    set l [lsort -real $l]\n    set len [llength $l]\n    if {$len % 2 == 1} {\n        return [lindex $l [expr {$len / 2}]]\n    } else {\n        return [expr {([lindex $l [expr {$len / 2}]] + [lindex $l [expr {$len / 2 - 1}]]) / 2.0}]\n    }\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {abs([median {3 1 2 4 5}] - 3) < 1e-4}\nassert {abs([median {-10 4 6 1000 10 20}] - 8.0) < 1e-4}\nassert {abs([median {5}] - 5) < 1e-4}\nassert {abs([median {6 5}] - 5.5) < 1e-4}\nassert {abs([median {8 1 3 9 9 2 7}] - 7) < 1e-4}\n",
        "declaration": "proc median {l} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {abs([median {3 1 2 4 5}] - 3) < 1e-4}\nassert {abs([median {-10 4 6 1000 10 20}] - 8.0) < 1e-4}\n",
        "prompt_text": "Return median of elements in the list l.",
        "prompt_explain": "Return median of elements in the list l.\n>>> median {3 1 2 4 5}\n3\n>>> median {-10 4 6 1000 10 20}\n15.0",
        "func_title": "proc median {l}"
    },
    {
        "prompt": "# Return 2^n modulo p (be aware of numerics).\n# >>> modp 3 5\n# 3\n# >>> modp 1101 101\n# 2\n# >>> modp 0 101\n# 1\n# >>> modp 3 11\n# 8\n# >>> modp 100 101\n# 1\nproc modp {n p} {\n",
        "canonical_solution": "    set out 1\n    for {set i 0} {$i < $n} {incr i} {\n        set out [expr {($out * 2) % $p}]\n    }\n    return $out\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[modp 3 5] == 3}\nassert {[modp 1101 101] == 2}\nassert {[modp 0 101] == 1}\nassert {[modp 3 11] == 8}\nassert {[modp 100 101] == 1}\nassert {[modp 30 5] == 4}\nassert {[modp 31 5] == 3}\n",
        "declaration": "proc modp {n p} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[modp 3 5] == 3}\nassert {[modp 1101 101] == 2}\nassert {[modp 0 101] == 1}\nassert {[modp 3 11] == 8}\nassert {[modp 100 101] == 1}\n",
        "prompt_text": "Return 2^n modulo p (be aware of numerics).",
        "prompt_explain": "Return 2^n modulo p (be aware of numerics).\n>>> modp 3 5\n3\n>>> modp 1101 101\n2\n>>> modp 0 101\n1\n>>> modp 3 11\n8\n>>> modp 100 101\n1",
        "func_title": "proc modp {n p}"
    },
    {
        "prompt": "# Insert a number \"delimeter\" between every two consecutive elements of input list `numbers\"\n# >>> intersperse {} 4\n# {}\n# >>> intersperse {1 2 3} 4\n# {1 4 2 4 3}\nproc intersperse {numbers delimeter} {\n",
        "canonical_solution": "    set out {}\n    if {[llength $numbers] > 0} {\n        lappend out [lindex $numbers 0]\n    }\n    for {set i 1} {$i < [llength $numbers]} {incr i} {\n        lappend out $delimeter\n        lappend out [lindex $numbers $i]\n    }\n    return $out\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {\n        return false\n    }\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {\n            return false\n        }\n    }\n    return true\n}\n\nassert {[issame [intersperse {} 7] {}]}\nassert {[issame [intersperse {5 6 3 2} 8] {5 8 6 8 3 8 2}]}\nassert {[issame [intersperse {2 2 2} 2] {2 2 2 2 2}]}\n",
        "declaration": "proc intersperse {numbers delimeter} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {\n        return false\n    }\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {\n            return false\n        }\n    }\n    return true\n}\n\nassert {[issame [intersperse {} 4] {}]}\nassert {[issame [intersperse {1 2 3} 4] {1 4 2 4 3}]}\n",
        "prompt_text": "Insert a number \"delimeter\" between every two consecutive elements of input list `numbers\"",
        "prompt_explain": "Insert a number \"delimeter\" between every two consecutive elements of input list `numbers\"\n>>> intersperse {} 4\n{}\n>>> intersperse {1 2 3} 4\n{1 4 2 4 3}",
        "func_title": "proc intersperse {numbers delimeter}"
    },
    {
        "prompt": "# takes as input string encoded with encode_shift function. Returns decoded string.\nproc decode_shift {s} {\n",
        "canonical_solution": "    set out \"\"\n    set length [string length $s]\n    for {set i 0} {$i < $length} {incr i} {\n        set char [string index $s $i]\n        set w [expr {([scan $char %c] + 21 - [scan \"a\" %c]) % 26 + [scan \"a\" %c]}]\n        append out [format %c $w]\n    }\n    return $out\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nfor {set i 0} {$i < 100} {incr i} {\n    set l [expr {10 + int(rand() * 11)}]\n    set str \"\"\n    for {set j 0} {$j < $l} {incr j} {\n        set chr [expr {97 + int(rand() * 26)}]\n        append str [format %c $chr]\n    }\n\n    set encoded_str [encode_shift $str]\n    assert {[decode_shift $encoded_str] == $str}\n}\n",
        "declaration": "proc decode_shift {s} {\n",
        "example_test": "",
        "prompt_text": " takes as input string encoded with encode_shift function. Returns decoded string.",
        "prompt_explain": " takes as input string encoded with encode_shift function. Returns decoded string.",
        "func_title": "proc decode_shift {s}"
    },
    {
        "prompt": "# Return true if all numbers in the list l are below threshold t.\n# >>> below_threshold {1 2 4 10} 100\n# true\n# >>> below_threshold {1 20 4 10} 5\n# false\nproc below_threshold {l t} {\n",
        "canonical_solution": "    foreach num $l {\n        if {$num >= $t} {\n            return false\n        }\n    }\n    return true\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[below_threshold {1 2 4 10} 100]}\nassert {![below_threshold {1 20 4 10} 5]}\nassert {[below_threshold {1 20 4 10} 21]}\nassert {[below_threshold {1 20 4 10} 22]}\nassert {[below_threshold {1 8 4 10} 11]}\nassert {![below_threshold {1 8 4 10} 10]}\n",
        "declaration": "proc below_threshold {l t} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[below_threshold {1 2 4 10} 100]}\nassert {![below_threshold {1 20 4 10} 5]}\n",
        "prompt_text": "Return true if all numbers in the list l are below threshold t.",
        "prompt_explain": "Return true if all numbers in the list l are below threshold t.\n>>> below_threshold {1 2 4 10} 100\ntrue\n>>> below_threshold {1 20 4 10} 5\nfalse",
        "func_title": "proc below_threshold {l t}"
    },
    {
        "prompt": "# Add two numbers x and y\n# >>> add 2 3\n# 5\n# >>> add 5 7\n# 12\nproc add {x y} {\n",
        "canonical_solution": "    return [expr {$x + $y}]\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[add 0 1] == 1}\nassert {[add 1 0] == 1}\nassert {[add 2 3] == 5}\nassert {[add 5 7] == 12}\nassert {[add 7 5] == 12}\nfor {set i 0} {$i < 100} {incr i} {\n    set x [expr {int(rand() * 1000)}]\n    set y [expr {int(rand() * 1000)}]\n    assert {[add $x $y] == [expr {$x + $y}]}\n}\n",
        "declaration": "proc add {x y} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[add 2 3] == 5}\nassert {[add 5 7] == 12}\n",
        "prompt_text": "Add two numbers x and y",
        "prompt_explain": "Add two numbers x and y\n>>> add 2 3\n5\n>>> add 5 7\n12",
        "func_title": "proc add {x y}"
    },
    {
        "prompt": "# Check if two words have the same characters.\n# >>> same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\"\n# true\n# >>> same_chars \"abcd\" \"dddddddabc\"\n# true\n# >>> same_chars \"dddddddabc\" \"abcd\"\n# true\n# >>> same_chars \"eabcd\" \"dddddddabc\"\n# false\n# >>> same_chars \"abcd\" \"dddddddabce\"\n# false\n# >>> same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\n# false\nproc same_chars {s0 s1} {\n",
        "canonical_solution": "    foreach char [split $s0 \"\"] {\n        if {[string first $char $s1] == -1} {\n            return false\n        }\n    }\n    foreach char [split $s1 \"\"] {\n        if {[string first $char $s0] == -1} {\n            return false\n        }\n    }\n    return true\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\"] == true}\nassert {[same_chars \"abcd\" \"dddddddabc\"] == true}\nassert {[same_chars \"dddddddabc\" \"abcd\"] == true}\nassert {[same_chars \"eabcd\" \"dddddddabc\"] == false}\nassert {[same_chars \"abcd\" \"dddddddabcf\"] == false}\nassert {[same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\"] == false}\nassert {[same_chars \"aabb\" \"aaccc\"] == false}\n",
        "declaration": "proc same_chars {s0 s1} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\"] == true}\nassert {[same_chars \"abcd\" \"dddddddabc\"] == true}\nassert {[same_chars \"dddddddabc\" \"abcd\"] == true}\nassert {[same_chars \"eabcd\" \"dddddddabc\"] == false}\nassert {[same_chars \"abcd\" \"dddddddabcf\"] == false}\nassert {[same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\"] == false}\n",
        "prompt_text": "Check if two words have the same characters.",
        "prompt_explain": "Check if two words have the same characters.\n>>> same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\"\ntrue\n>>> same_chars \"abcd\" \"dddddddabc\"\ntrue\n>>> same_chars \"dddddddabc\" \"abcd\"\ntrue\n>>> same_chars \"eabcd\" \"dddddddabc\"\nfalse\n>>> same_chars \"abcd\" \"dddddddabce\"\nfalse\n>>> same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\nfalse",
        "func_title": "proc same_chars {s0 s1}"
    },
    {
        "prompt": "# Return n-th Fibonacci number.\n# >>> fib 10\n# 55\n# >>> fib 1\n# 1\n# >>> fib 8\n# 21\nproc fib {n} {\n",
        "canonical_solution": "    set f [list 0 1]\n    for {set i 2} {$i <= $n} {incr i} {\n        lappend f [expr {[lindex $f [expr {$i - 1}]] + [lindex $f [expr {$i - 2}]]}]\n    }\n    return [lindex $f $n]\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[fib 10] == 55}\nassert {[fib 1] == 1}\nassert {[fib 8] == 21}\nassert {[fib 11] == 89}\nassert {[fib 12] == 144}\n",
        "declaration": "proc fib {n} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[fib 10] == 55}\nassert {[fib 1] == 1}\nassert {[fib 8] == 21}\n",
        "prompt_text": "Return n-th Fibonacci number.",
        "prompt_explain": "Return n-th Fibonacci number.\n>>> fib 10\n55\n>>> fib 1\n1\n>>> fib 8\n21",
        "func_title": "proc fib {n}"
    },
    {
        "prompt": "# brackets is a string of '<' and '>'.\n# return true if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing \"<\"\n# false\n# >>> correct_bracketing \"<>\"\n# true\n# >>> correct_bracketing \"<<><>>\"\n# true\n# >>> correct_bracketing \"><<>\"\n# false\nproc correct_bracketing {brackets} {\n",
        "canonical_solution": "    set level 0\n    set length [string length $brackets]\n    for {set i 0} {$i < $length} {incr i} {\n        set char [string index $brackets $i]\n        if {$char eq \"<\"} {\n            incr level\n        } elseif {$char eq \">\"} {\n            incr level -1\n        }\n        if {$level < 0} {\n            return false\n        }\n    }\n    if {$level != 0} {\n        return false\n    }\n    return true\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[correct_bracketing \"<>\"]}\nassert {[correct_bracketing \"<<><>>\"]}\nassert {[correct_bracketing \"<><><<><>><>\"]}\nassert {[correct_bracketing \"<><><<<><><>><>><<><><<>>>\"]}\nassert {![correct_bracketing \"<<<><>>>>\"]}\nassert {![correct_bracketing \"><<>\"]}\nassert {![correct_bracketing \"<\"]}\nassert {![correct_bracketing \"<<<<\"]}\nassert {![correct_bracketing \">\"]}\nassert {![correct_bracketing \"<<>\"]}\nassert {![correct_bracketing \"<><><<><>><>><<>\"]}\nassert {![correct_bracketing \"<><><<><>><>>><>\"]}\n",
        "declaration": "proc correct_bracketing {brackets} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[correct_bracketing \"<>\"]}\nassert {[correct_bracketing \"<<><>>\"]}\nassert {![correct_bracketing \"><<>\"]}\nassert {![correct_bracketing \"<\"]}\n",
        "prompt_text": "brackets is a string of '<' and '>'. return true if every opening bracket has a corresponding closing bracket.",
        "prompt_explain": "brackets is a string of '<' and '>'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing \"<\"\nfalse\n>>> correct_bracketing \"<>\"\ntrue\n>>> correct_bracketing \"<<><>>\"\ntrue\n>>> correct_bracketing \"><<>\"\nfalse",
        "func_title": "proc correct_bracketing {brackets}"
    },
    {
        "prompt": "# Return true is list elements are monotonically increasing or decreasing.\n# >>> monotonic {1 2 4 20}\n# true\n# >>> monotonic {1 20 4 10}\n# false\n# >>> monotonic {4 1 0 -10}\n# true\nproc monotonic {l} {\n",
        "canonical_solution": "    set incr 0\n    set decr 0\n    set length [llength $l]\n    for {set i 1} {$i < $length} {incr i} {\n        if {[lindex $l $i] > [lindex $l [expr {$i - 1}]]} {\n            set incr 1\n        }\n        if {[lindex $l $i] < [lindex $l [expr {$i - 1}]]} {\n            set decr 1\n        }\n    }\n    if {[expr {$incr + $decr}] == 2} {\n        return false\n    }\n    return true\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[monotonic {1 2 4 10}] == true}\nassert {[monotonic {1 2 4 20}] == true}\nassert {[monotonic {1 20 4 10}] == false}\nassert {[monotonic {4 1 0 -10}] == true}\nassert {[monotonic {4 1 1 0}] == true}\nassert {[monotonic {1 2 3 2 5 60}] == false}\nassert {[monotonic {1 2 3 4 5 60}] == true}\nassert {[monotonic {9 9 9 9}] == true}\n",
        "declaration": "proc monotonic {l} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[monotonic {1 2 4 10}] == true}\nassert {[monotonic {1 20 4 10}] == false}\nassert {[monotonic {4 1 0 -10}] == true}\n",
        "prompt_text": "Return true is list elements are monotonically increasing or decreasing.",
        "prompt_explain": "Return true is list elements are monotonically increasing or decreasing.\n>>> monotonic {1 2 4 20}\ntrue\n>>> monotonic {1 20 4 10}\nfalse\n>>> monotonic {4 1 0 -10}\ntrue",
        "func_title": "proc monotonic {l}"
    },
    {
        "prompt": "# Return sorted unique common elements for two lists.\n# >>> common {1 4 3 34 653 2 5} {5 7 1 5 9 653 121}\n# {1 5 653}\n# >>> common {5 3 2 8} {3 2}\n# {2 3}\nproc common {l1 l2} {\n",
        "canonical_solution": "    set out {}\n    foreach elem $l1 {\n        if {[lsearch -exact $out $elem] == -1 && [lsearch -exact $l2 $elem] != -1} {\n            lappend out $elem\n        }\n    }\n    set out [lsort -integer $out]\n    return $out\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {return false}\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {return false}\n    }\n    return true\n}\n\nassert {[issame [common {1 4 3 34 653 2 5} {5 7 1 5 9 653 121}] {1 5 653}]}\nassert {[issame [common {5 3 2 8} {3 2}] {2 3}]}\nassert {[issame [common {4 3 2 8} {3 2 4}] {2 3 4}]}\nassert {[issame [common {4 3 2 8} {}] {}]}\n",
        "declaration": "proc common {l1 l2} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {return false}\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {return false}\n    }\n    return true\n}\n\nassert {[issame [common {1 4 3 34 653 2 5} {5 7 1 5 9 653 121}] {1 5 653}]}\nassert {[issame [common {5 3 2 8} {3 2}] {2 3}]}\n",
        "prompt_text": "Return sorted unique common elements for two lists.",
        "prompt_explain": "Return sorted unique common elements for two lists.\n>>> common {1 4 3 34 653 2 5} {5 7 1 5 9 653 121}\n{1 5 653}\n>>> common {5 3 2 8} {3 2}\n{2 3}\n",
        "func_title": "proc common {l1 l2}"
    },
    {
        "prompt": "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n# >>> largest_prime_factor 13195\n# 29\n# >>> largest_prime_factor 2048\n# 2\nproc largest_prime_factor {n} {\n",
        "canonical_solution": "    for {set i 2} {$i * $i <= $n} {incr i} {\n        while {$n % $i == 0 && $n > $i} {\n            set n [expr {$n / $i}]\n        }\n    }\n    return $n\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[largest_prime_factor 15] == 5}\nassert {[largest_prime_factor 27] == 3}\nassert {[largest_prime_factor 63] == 7}\nassert {[largest_prime_factor 330] == 11}\nassert {[largest_prime_factor 13195] == 29}\n",
        "declaration": "proc largest_prime_factor {n} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[largest_prime_factor 2048] == 2}\nassert {[largest_prime_factor 13195] == 29}\n",
        "prompt_text": "Return the largest prime factor of n. Assume n > 1 and is not a prime.",
        "prompt_explain": "Return the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor 13195\n29\n>>> largest_prime_factor 2048\n2",
        "func_title": "proc largest_prime_factor {n}"
    },
    {
        "prompt": "# Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n# For each of the group, output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting while ((())) has three.\n# >>> parse_nested_parens \"(()()) ((())) () ((())()())\"\n# {2 3 1 3}\nproc parse_nested_parens {paren_string} {\n",
        "canonical_solution": "    set all_levels {}\n    set current_paren \"\"\n    set level 0\n    set max_level 0\n    foreach chr [split $paren_string \"\"] {\n        if {$chr eq \"(\"} {\n            incr level\n            if {$level > $max_level} {set max_level $level}\n            append current_paren $chr\n        }\n        if {$chr eq \")\"} {\n            incr level -1\n            append current_paren $chr\n            if {$level == 0} {\n                lappend all_levels $max_level\n                set current_paren \"\"\n                set max_level 0\n            }\n        }\n    }\n    return $all_levels\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {return false}\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {return false}\n    }\n    return true\n}\n\nassert {[issame [parse_nested_parens \"(()()) ((())) () ((())()())\"] {2 3 1 3}]}\nassert {[issame [parse_nested_parens \"() (()) ((())) (((())))\"] {1 2 3 4}]}\nassert {[issame [parse_nested_parens \"(()(())((())))\"] {4}]}\n",
        "declaration": "proc parse_nested_parens {paren_string} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {return false}\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {return false}\n    }\n    return true\n}\n\nassert {[issame [parse_nested_parens \"(()()) ((())) () ((())()())\"] {2 3 1 3}]}\n",
        "prompt_text": "Input to this function is a string represented multiple groups for nested parentheses separated by spaces. For each of the group, output the deepest level of nesting of parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three.",
        "prompt_explain": "Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n>>> parse_nested_parens \"(()()) ((())) () ((())()())\"\n{2 3 1 3}",
        "func_title": "proc parse_nested_parens {paren_string}"
    },
    {
        "prompt": "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n 30\n# 465\n# >>> sum_to_n 100\n# 5050\n# >>> sum_to_n 5\n# 15\n# >>> sum_to_n 10\n# 55\n# >>> sum_to_n 1\n# 1\nproc sum_to_n {n} {\n",
        "canonical_solution": "    return [expr {$n * ($n + 1) / 2}]\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_to_n 1] == 1}\nassert {[sum_to_n 6] == 21}\nassert {[sum_to_n 11] == 66}\nassert {[sum_to_n 30] == 465}\nassert {[sum_to_n 100] == 5050}\n",
        "declaration": "proc sum_to_n {n} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_to_n 1] == 1}\nassert {[sum_to_n 5] == 15}\nassert {[sum_to_n 10] == 55}\nassert {[sum_to_n 30] == 465}\nassert {[sum_to_n 100] == 5050}\n",
        "prompt_text": "sum_to_n is a function that sums numbers from 1 to n.",
        "prompt_explain": "sum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n 30\n465\n>>> sum_to_n 100\n5050\n>>> sum_to_n 5\n15\n>>> sum_to_n 10\n55\n>>> sum_to_n 1\n1",
        "func_title": "proc sum_to_n {n}"
    },
    {
        "prompt": "# brackets is a string of '(' and ')'. return true if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing \"(\"\n# false\n# >>> correct_bracketing \"()\"\n# true\n# >>> correct_bracketing \"(()())\"\n# true\n# >>> correct_bracketing \")(()\"\n# false\nproc correct_bracketing {brackets} {\n",
        "canonical_solution": "    set level 0\n    set length [string length $brackets]\n    for {set i 0} {$i < $length} {incr i} {\n        set char [string index $brackets $i]\n        if {$char eq \"(\"} {\n            incr level\n        } elseif {$char eq \")\"} {\n            incr level -1\n        }\n        if {$level < 0} {\n            return false\n        }\n    }\n    if {$level != 0} {\n        return false\n    }\n    return true\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[correct_bracketing \"()\"]}\nassert {[correct_bracketing \"(()())\"]}\nassert {[correct_bracketing \"()()(()())()\"]}\nassert {[correct_bracketing \"()()((()()())())(()()(()))\"]}\nassert {![correct_bracketing \"((()())))\"]}\nassert {![correct_bracketing \")(()\"}\nassert {![correct_bracketing \"(\"]}\nassert {![correct_bracketing \"((((\"]}\nassert {![correct_bracketing \")\"]}\nassert {![correct_bracketing \"(()\"]}\nassert {![correct_bracketing \"()()(()())())(()\"]}\nassert {![correct_bracketing \"()()(()())()))()\"]}\n",
        "declaration": "proc correct_bracketing {brackets} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[correct_bracketing \"()\"]}\nassert {[correct_bracketing \"(()())\"]}\nassert {![correct_bracketing \")(()\"]}\nassert {![correct_bracketing \"(\"]}\n",
        "prompt_text": "brackets is a string of '(' and ')'. return true if every opening bracket has a corresponding closing bracket.",
        "prompt_explain": "brackets is a string of '(' and ')'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing \"(\"\nfalse\n>>> correct_bracketing \"()\"\ntrue\n>>> correct_bracketing \"(()())\"\ntrue\n>>> correct_bracketing \")(()\"\nfalse",
        "func_title": "proc correct_bracketing {brackets}"
    },
    {
        "prompt": "# xs represent coefficients of a polynomial. xs{0} + xs{1} * x + xs{2} * x^2 + .... Return derivative of this polynomial in the same form.\n# >>> derivative {3 1 2 4 5}\n# {1 4 12 20}\n# >>> derivative {1 2 3}\n# {2 6}\nproc derivative {xs} {\n",
        "canonical_solution": "    set out {}\n    set length [llength $xs]\n    for {set i 1} {$i < $length} {incr i} {\n        lappend out [expr {$i * [lindex $xs $i]}]\n    }\n    return $out\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {\n        return false\n    }\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {abs([lindex $a $i] - [lindex $b $i]) > 1e-4} {\n            return false\n        }\n    }\n    return true\n}\n\nassert {[issame [derivative {3 1 2 4 5}] {1 4 12 20}]}\nassert {[issame [derivative {1 2 3}] {2 6}]}\nassert {[issame [derivative {3 2 1}] {2 2}]}\nassert {[issame [derivative {3 2 1 0 4}] {2 2 0 16}]}\nassert {[issame [derivative {1}] {}]}\n",
        "declaration": "proc derivative {xs} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {\n        return false\n    }\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {abs([lindex $a $i] - [lindex $b $i]) > 1e-4} {\n            return false\n        }\n    }\n    return true\n}\n\nassert {[issame [derivative {3 1 2 4 5}] {1 4 12 20}]}\nassert {[issame [derivative {1 2 3}] {2 6}]}\n",
        "prompt_text": "xs represent coefficients of a polynomial. xs{0} + xs{1} * x + xs{2} * x^2 + .... Return derivative of this polynomial in the same form.",
        "prompt_explain": "xs represent coefficients of a polynomial.\nxs{0} + xs{1} * x + xs{2} * x^2 + ....\nReturn derivative of this polynomial in the same form.\n>>> derivative {3 1 2 4 5}\n{1 4 12 20}\n>>> derivative {1 2 3}\n{2 6}",
        "func_title": "proc derivative {xs}"
    },
    {
        "prompt": "# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) == 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n# >>> fibfib 1\n# 0\n# >>> fibfib 5\n# 4\n# >>> fibfib 8\n# 24\nproc fibfib {n} {\n",
        "canonical_solution": "    if {$n == 0 || $n == 1} {\n        return 0\n    } elseif {$n == 2} {\n        return 1\n    }\n    set ff [list 0 0 1]\n    for {set i 3} {$i <= $n} {incr i} {\n        lappend ff [expr {[lindex $ff [expr {$i - 1}]] + [lindex $ff [expr {$i - 2}]] + [lindex $ff [expr {$i - 3}]]}]\n    }\n    return [lindex $ff $n]\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[fibfib 2] == 1}\nassert {[fibfib 1] == 0}\nassert {[fibfib 5] == 4}\nassert {[fibfib 8] == 24}\nassert {[fibfib 10] == 81}\nassert {[fibfib 12] == 274}\nassert {[fibfib 14] == 927}\n",
        "declaration": "proc fibfib {n} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[fibfib 1] == 0}\nassert {[fibfib 5] == 4}\nassert {[fibfib 8] == 24}\n",
        "prompt_text": "The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:",
        "prompt_explain": "The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib 1\n0\n>>> fibfib 5\n4\n>>> fibfib 8\n24",
        "func_title": "proc fibfib {n}"
    },
    {
        "prompt": "# Write a function vowels_count which takes a string representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. \n# Here, 'y' is also a vowel, but only when it is at the end of the given word.\n# Example: \n# >>> vowels_count \"abcde\" \n# 2 \n# >>> vowels_count \"ACEDY\" \n# 3\nproc vowels_count {s} {\n",
        "canonical_solution": "    set vowels \"aeiouAEIOU\"\n    set count 0\n    set length [string length $s]\n    for {set i 0} {$i < $length} {incr i} {\n        set char [string index $s $i]\n        if {[string first $char $vowels] != -1} {\n            incr count\n        }\n    }\n    set last_char [string index $s end]\n    if {$last_char == \"y\" || $last_char == \"Y\"} {\n        incr count\n    }\n    return $count\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[vowels_count \"abcde\"] == 2}\nassert {[vowels_count \"Alone\"] == 3}\nassert {[vowels_count \"key\"] == 2}\nassert {[vowels_count \"bye\"] == 1}\nassert {[vowels_count \"keY\"] == 2}\nassert {[vowels_count \"bYe\"] == 1}\nassert {[vowels_count \"ACEDY\"] == 3}\n",
        "declaration": "proc vowels_count {s} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[vowels_count \"abcde\"] == 2}\nassert {[vowels_count \"ACEDY\"] == 3}\n",
        "prompt_text": "Write a function vowels_count which takes a string representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the end of the given word.",
        "prompt_explain": "Write a function vowels_count which takes a string representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'.\nHere, 'y' is also a vowel, but only when it is at the end of the given word.\nExample:\n>>> vowels_count \"abcde\"\n2\n>>> vowels_count \"ACEDY\"\n3",
        "func_title": "proc vowels_count {s}"
    },
    {
        "prompt": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only's ASCII codes.\n#\n# Examples:\n# digitSum \"\" => 0\n# digitSum \"abAB\" => 131\n# digitSum \"abcCd\" => 67\n# digitSum \"helloE\" => 69\n# digitSum \"woArBld\" => 131\n# digitSum \"aAaaaXa\" => 153\nproc digitSum {s} {\n",
        "canonical_solution": "    set sum 0\n    foreach char [split $s \"\"] {\n        if {[string is upper $char]} {\n            incr sum [scan $char %c]\n        }\n    }\n    return $sum\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[digitSum \"\"] == 0}\nassert {[digitSum \"abAB\"] == 131}\nassert {[digitSum \"abcCd\"] == 67}\nassert {[digitSum \"helloE\"] == 69}\nassert {[digitSum \"woArBld\"] == 131}\nassert {[digitSum \"aAaaaXa\"] == 153}\nassert {[digitSum \" How are yOu?\"] == 151}\nassert {[digitSum \"You arE Very Smart\"] == 327}\n",
        "declaration": "proc digitSum {s} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[digitSum \"\"] == 0}\nassert {[digitSum \"abAB\"] == 131}\nassert {[digitSum \"abcCd\"] == 67}\nassert {[digitSum \"helloE\"] == 69}\nassert {[digitSum \"woArBld\"] == 131}\nassert {[digitSum \"aAaaaXa\"] == 153}\n",
        "prompt_text": "Task Write a function that takes a string as input and returns the sum of the upper characters only's ASCII codes. Examples: digitSum \"\" => 0 digitSum \"abAB\" => 131 digitSum \"abcCd\" => 67 digitSum \"helloE\" => 69 digitSum \"woArBld\" => 131 digitSum \"aAaaaXa\" => 153",
        "prompt_explain": "Task\nWrite a function that takes a string as input and returns the sum of the upper characters only's\nASCII codes.\n\nExamples:\ndigitSum \"\" => 0\ndigitSum \"abAB\" => 131\ndigitSum \"abcCd\" => 67\ndigitSum \"helloE\" => 69\ndigitSum \"woArBld\" => 131\ndigitSum \"aAaaaXa\" => 153",
        "func_title": "proc digitSum {s}"
    },
    {
        "prompt": "# In this task, you will be given a string that represents a number of apples and oranges that are distributed in a basket of fruit this basket contains apples, oranges, and mango fruits. Given the string that represents the total number of the oranges and apples and an integer that represent the total number of the fruits in the basket return the number of the mango fruits in the basket.\n# for example:\n# fruit_distribution \"5 apples and 6 oranges\" 19 ->19 - 5 - 6 = 8\n# fruit_distribution \"0 apples and 1 oranges\" 3 -> 3 - 0 - 1 = 2\n# fruit_distribution \"2 apples and 3 oranges\" 100 -> 100 - 2 - 3 = 95\n# fruit_distribution \"100 apples and 1 oranges\" 120 -> 120 - 100 - 1 = 19\nproc fruit_distribution {s n} {\n",
        "canonical_solution": "    set num1 \"\"\n    set num2 \"\"\n    set is12 0\n    for {set i 0} {$i < [string length $s]} {incr i} {\n        set char [string index $s $i]\n        if {[string is digit $char]} {\n            if {$is12 == 0} {\n                append num1 $char\n            } else {\n                append num2 $char\n            }\n        } else {\n            if {$is12 == 0 && [string length $num1] > 0} {\n                set is12 1\n            }\n        }\n    }\n    return [expr {$n - $num1 - $num2}]\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[fruit_distribution \"5 apples and 6 oranges\" 19] == 8}\nassert {[fruit_distribution \"5 apples and 6 oranges\" 21] == 10}\nassert {[fruit_distribution \"0 apples and 1 oranges\" 3] == 2}\nassert {[fruit_distribution \"1 apples and 0 oranges\" 3] == 2}\nassert {[fruit_distribution \"2 apples and 3 oranges\" 100] == 95}\nassert {[fruit_distribution \"2 apples and 3 oranges\" 5] == 0}\nassert {[fruit_distribution \"1 apples and 100 oranges\" 120] == 19}\n",
        "declaration": "proc fruit_distribution {s n} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[fruit_distribution \"5 apples and 6 oranges\" 19] == 8}\nassert {[fruit_distribution \"0 apples and 1 oranges\" 3] == 2}\nassert {[fruit_distribution \"2 apples and 3 oranges\" 100] == 95}\nassert {[fruit_distribution \"1 apples and 100 oranges\" 120] == 19}\n",
        "prompt_text": "In this task, you will be given a string that represents a number of apples and oranges that are distributed in a basket of fruit this basket contains apples, oranges, and mango fruits. Given the string that represents the total number of the oranges and apples and an integer that represent the total number of the fruits in the basket return the number of the mango fruits in the basket.",
        "prompt_explain": "In this task, you will be given a string that represents a number of apples and oranges\nthat are distributed in a basket of fruit this basket contains\napples, oranges, and mango fruits. Given the string that represents the total number of\nthe oranges and apples and an integer that represent the total number of the fruits\nin the basket return the number of the mango fruits in the basket.\nfor example:\nfruit_distribution \"5 apples and 6 oranges\" 19 ->19 - 5 - 6 = 8\nfruit_distribution \"0 apples and 1 oranges\" 3 -> 3 - 0 - 1 = 2\nfruit_distribution \"2 apples and 3 oranges\" 100 -> 100 - 2 - 3 = 95\nfruit_distribution \"100 apples and 1 oranges\" 120 -> 120 - 100 - 1 = 19",
        "func_title": "proc fruit_distribution {s n}"
    },
    {
        "prompt": "# You are given a non-empty list of positive integers. Return the greatest integer that is greater than zero, and has a frequency greater than or equal to the value of the integer itself. The frequency of an integer is the number of times it appears in the list. If no such a value exist, return -1.\n# Examples:\n# search {4 1 2 2 3 1} == 2\n# search {1 2 2 3 3 3 4 4 4} == 3\n# search {5 5 4 4 4} == -1\nproc search {lst} {\n",
        "canonical_solution": "    array set freq {}\n    set max -1\n    foreach num $lst {\n        if {[info exists freq($num)]} {\n            incr freq($num)\n        } else {\n            set freq($num) 1\n        }\n        if {$freq($num) >= $num && $num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[search {5 5 5 5 1}] == 1}\nassert {[search {4 1 4 1 4 4}] == 4}\nassert {[search {3 3}] == -1}\nassert {[search {8 8 8 8 8 8 8 8}] == 8}\nassert {[search {2 3 3 2 2}] == 2}\nassert {[search {2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1}] == 1}\nassert {[search {3 2 8 2}] == 2}\nassert {[search {6 7 1 8 8 10 5 8 5 3 10}] == 1}\nassert {[search {8 8 3 6 5 6 4}] == -1}\nassert {[search {6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9}] == 1}\nassert {[search {1 9 10 1 3}] == 1}\nassert {[search {6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10}] == 5}\nassert {[search {1}] == 1}\nassert {[search {8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5}] == 4}\nassert {[search {2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10}] == 2}\nassert {[search {1 6 10 1 6 9 10 8 6 8 7 3}] == 1}\nassert {[search {9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4}] == 4}\nassert {[search {2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7}] == 4}\nassert {[search {9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1}] == 2}\nassert {[search {5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8}] == -1}\nassert {[search {10}] == -1}\nassert {[search {9 7 7 2 4 7 2 10 9 7 5 7 2}] == 2}\nassert {[search {5 4 10 2 1 1 10 3 6 1 8}] == 1}\nassert {[search {7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6}] == 1}\nassert {[search {3 10 10 9 2}] == -1}\n",
        "declaration": "proc search {lst} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[search {4 1 2 2 3 1}] == 2}\nassert {[search {1 2 2 3 3 3 4 4 4}] == 3}\nassert {[search {5 5 4 4 4}] == -1}\n",
        "prompt_text": "You are given a non-empty list of positive integers. Return the greatest integer that is greater than zero, and has a frequency greater than or equal to the value of the integer itself. The frequency of an integer is the number of times it appears in the list. If no such a value exist, return -1.",
        "prompt_explain": "You are given a non-empty list of positive integers. Return the greatest integer that is greater than zero, and has a frequency greater than or equal to the value of the integer itself. The frequency of an integer is the number of times it appears in the list. If no such a value exist, return -1.\nExamples:\nsearch {4 1 2 2 3 1} == 2\nsearch {1 2 2 3 3 3 4 4 4} == 3\nsearch {5 5 4 4 4} == -1",
        "func_title": "proc search {lst}"
    },
    {
        "prompt": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring {} \"a\"\n# {}\n# >>> filter_by_substring {\"abc\" \"bacd\" \"cde\" \"vector\"} \"a\"\n# {\"abc\" \"bacd\" \"vector\"}\nproc filter_by_substring {strings substring} {\n",
        "canonical_solution": "    set out {}\n    foreach str $strings {\n        if {[string first $substring $str] != -1} {\n            lappend out $str\n        }\n    }\n    return $out\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {\n        return false\n    }\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] ne [lindex $b $i]} {\n            return false\n        }\n    }\n    return true\n}\n\nassert {[issame [filter_by_substring {} \"john\"] {}]}\nassert {[issame [filter_by_substring {\"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\"} \"xxx\"] {\"xxx\" \"xxxAAA\" \"xxx\"}]}\nassert {[issame [filter_by_substring {\"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\"} \"xx\"] {\"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"}]}\nassert {[issame [filter_by_substring {\"grunt\" \"trumpet\" \"prune\" \"gruesome\"} \"run\"] {\"grunt\" \"prune\"}]}\n",
        "declaration": "proc filter_by_substring {strings substring} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {\n        return false\n    }\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] ne [lindex $b $i]} {\n            return false\n        }\n    }\n    return true\n}\n\nassert {[issame [filter_by_substring {} \"a\"] {}]}\nassert {[issame [filter_by_substring {\"abc\" \"bacd\" \"cde\" \"array\"} \"a\"] {\"abc\" \"bacd\" \"array\"}]}\n",
        "prompt_text": "Filter an input list of strings only for ones that contain given substring",
        "prompt_explain": "Filter an input list of strings only for ones that contain given substring\n>>> filter_by_substring {} \"a\"\n{}\n>>> filter_by_substring {\"abc\" \"bacd\" \"cde\" \"vector\"} \"a\"\n{\"abc\" \"bacd\" \"vector\"}",
        "func_title": "proc filter_by_substring {strings substring}"
    },
    {
        "prompt": "# Given list of integers, return list in strange order.\n# Strange sorting, is when you start with the minimum value,\n# then maximum of the remaining integers, then minimum and so on.\n#\n# Examples:\n# strange_sort_list {1 2 3 4} == {1 4 2 3}\n# strange_sort_list {5 5 5 5} == {5 5 5 5}\n# strange_sort_list {} == {}\nproc strange_sort_list {lst} {\n",
        "canonical_solution": "    set out {}\n    set lst [lsort -integer $lst]\n    set l 0\n    set r [expr {[llength $lst] - 1}]\n    while {$l < $r} {\n        lappend out [lindex $lst $l]\n        incr l\n        lappend out [lindex $lst $r]\n        incr r -1\n    }\n    if {$l == $r} {\n        lappend out [lindex $lst $l]\n    }\n    return $out\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {\n        return false\n    }\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {\n            return false\n        }\n    }\n    return true\n}\n\nassert {[issame [strange_sort_list {1 2 3 4}] {1 4 2 3}]}\nassert {[issame [strange_sort_list {5 6 7 8 9}] {5 9 6 8 7}]}\nassert {[issame [strange_sort_list {1 2 3 4 5}] {1 5 2 4 3}]}\nassert {[issame [strange_sort_list {5 6 7 8 9 1}] {1 9 5 8 6 7}]}\nassert {[issame [strange_sort_list {5 5 5 5}] {5 5 5 5}]}\nassert {[issame [strange_sort_list {}] {}]}\nassert {[issame [strange_sort_list {1 2 3 4 5 6 7 8}] {1 8 2 7 3 6 4 5}]}\nassert {[issame [strange_sort_list {0 2 2 2 5 5 -5 -5}] {-5 5 -5 5 0 2 2 2}]}\nassert {[issame [strange_sort_list {111111}] {111111}]}\n",
        "declaration": "proc strange_sort_list {lst} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {\n        return false\n    }\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {\n            return false\n        }\n    }\n    return true\n}\n\nassert {[issame [strange_sort_list {1 2 3 4}] {1 4 2 3}]}\nassert {[issame [strange_sort_list {5 5 5 5}] {5 5 5 5}]}\nassert {[issame [strange_sort_list {}] {}]}\n",
        "prompt_text": "Given list of integers, return list in strange order. Strange sorting, is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on. Examples: strange_sort_list {1 2 3 4} == {1 4 2 3} strange_sort_list {5 5 5 5} == {5 5 5 5} strange_sort_list {} == {}",
        "prompt_explain": "Given list of integers, return list in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\n\nExamples:\nstrange_sort_list {1 2 3 4} == {1 4 2 3}\nstrange_sort_list {5 5 5 5} == {5 5 5 5}\nstrange_sort_list {} == {}",
        "func_title": "proc strange_sort_list {lst}"
    },
    {
        "prompt": "# Given the lengths of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise return -1 Three sides make a valid triangle when the sum of any two sides is greater than the third side.\n# Example:\n# triangle_area 3 4 5 == 6.00\n# triangle_area 1 2 10 == -1\nproc triangle_area {a b c} {\n",
        "canonical_solution": "    if {$a+$b<=$c || $a+$c<=$b || $b+$c<=$a} {return -1}\n    set h [expr {($a+$b+$c)/2.0}]\n    set area [expr {sqrt($h*($h-$a)*($h-$b)*($h-$c))}]\n    return [expr {round($area*100)/100}]\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {abs([triangle_area 3 4 5] - 6.00) < 0.01}\nassert {abs([triangle_area 1 2 10] + 1) < 0.01}\nassert {abs([triangle_area 4 8 5] - 8.18) < 0.01}\nassert {abs([triangle_area 2 2 2] - 1.73) < 0.01}\nassert {abs([triangle_area 1 2 3] + 1) < 0.01}\nassert {abs([triangle_area 10 5 7] - 16.25) < 0.01}\nassert {abs([triangle_area 2 6 3] + 1) < 0.01}\nassert {abs([triangle_area 1 1 1] - 0.43) < 0.01}\nassert {abs([triangle_area 2 2 10] + 1) < 0.01}\n",
        "declaration": "proc triangle_area {a b c} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {abs([triangle_area 3 4 5] - 6.00) < 0.01}\nassert {abs([triangle_area 1 2 10] + 1) < 0.01}\n",
        "prompt_text": "Given the lengths of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise return -1 Three sides make a valid triangle when the sum of any two sides is greater than the third side.",
        "prompt_explain": "Given the lengths of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise return -1 Three sides make a valid triangle when the sum of any two sides is greater than the third side.\nExample:\ntriangle_area 3 4 5 == 6.00\ntriangle_area 1 2 10 == -1",
        "func_title": "proc triangle_area {a b c}"
    },
    {
        "prompt": "# Write a function that returns true if the object q will fly, and false otherwise. The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n# Example:\n# will_it_fly {1 2} 5 ➞ false\n# // 1+2 is less than the maximum possible weight, but it's unbalanced.\n#\n# will_it_fly {3 2 3} 1 ➞ false\n# // it's balanced, but 3+2+3 is more than the maximum possible weight.\n#\n# will_it_fly {3 2 3} 9 ➞ true\n# // 3+2+3 is less than the maximum possible weight, and it's balanced.\n#\n# will_it_fly {3} 5 ➞ true\n# // 3 is less than the maximum possible weight, and it's balanced.\nproc will_it_fly {q w} {\n",
        "canonical_solution": "    set sum 0\n    set length [llength $q]\n    for {set i 0} {$i < $length} {incr i} {\n        if {[lindex $q $i] != [lindex $q [expr {$length - 1 - $i}]]} {\n            return false\n        }\n        set sum [expr {$sum + [lindex $q $i]}]\n    }\n    if {$sum > $w} {\n        return false\n    }\n    return true\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[will_it_fly {3 2 3} 9] == true}\nassert {[will_it_fly {1 2} 5] == false}\nassert {[will_it_fly {3} 5] == true}\nassert {[will_it_fly {3 2 3} 1] == false}\nassert {[will_it_fly {1 2 3} 6] == false}\nassert {[will_it_fly {5} 5] == true}\n",
        "declaration": "proc will_it_fly {q w} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[will_it_fly {3 2 3} 9] == true}\nassert {[will_it_fly {1 2} 5] == false}\nassert {[will_it_fly {3} 5] == true}\nassert {[will_it_fly {3 2 3} 1] == false}\n",
        "prompt_text": "Write a function that returns true if the object q will fly, and false otherwise. The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.",
        "prompt_explain": "Write a function that returns true if the object q will fly, and false otherwise.\nThe object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\nExample:\nwill_it_fly {1 2} 5 ➞ false\n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly {3 2 3} 1 ➞ false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly {3 2 3} 9 ➞ true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly {3} 5 ➞ true\n// 3 is less than the maximum possible weight, and it's balanced.",
        "func_title": "proc will_it_fly {q w}"
    },
    {
        "prompt": "# Given a list arr of integers, find the minimum number of elements that need to be changed to make the list palindromic. A palindromic list is a list that is read the same backwards and forwards. In one change, you can change one element to any other element.\n#\n# For example:\n# smallest_change {1 2 3 5 4 7 9 6} == 4\n# smallest_change {1 2 3 4 3 2 2} == 1\n# smallest_change {1 2 3 2 1} == 0\nproc smallest_change {arr} {\n",
        "canonical_solution": "    set out 0\n    set length [llength $arr]\n    for {set i 0} {$i < $length / 2} {incr i} {\n        if {[lindex $arr $i] != [lindex $arr [expr {$length - 1 - $i}]]} {\n            incr out\n        }\n    }\n    return $out\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[smallest_change {1 2 3 5 4 7 9 6}] == 4}\nassert {[smallest_change {1 2 3 4 3 2 2}] == 1}\nassert {[smallest_change {1 4 2}] == 1}\nassert {[smallest_change {1 4 4 2}] == 1}\nassert {[smallest_change {1 2 3 2 1}] == 0}\nassert {[smallest_change {3 1 1 3}] == 0}\nassert {[smallest_change {1}] == 0}\nassert {[smallest_change {0 1}] == 1}\n",
        "declaration": "proc smallest_change {arr} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[smallest_change {1 2 3 5 4 7 9 6}] == 4}\nassert {[smallest_change {1 2 3 4 3 2 2}] == 1}\nassert {[smallest_change {1 2 3 2 1}] == 0}\nassert {[smallest_change {3 1 1 3}] == 0}\n",
        "prompt_text": "Given a list arr of integers, find the minimum number of elements that need to be changed to make the list palindromic. A palindromic list is a list that is read the same backwards and forwards. In one change, you can change one element to any other element.",
        "prompt_explain": "Given a list arr of integers, find the minimum number of elements that\nneed to be changed to make the list palindromic. A palindromic list is a list that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change {1 2 3 5 4 7 9 6} == 4\nsmallest_change {1 2 3 4 3 2 2} == 1\nsmallest_change {1 2 3 2 1} == 0",
        "func_title": "proc smallest_change {arr}"
    },
    {
        "prompt": "# Write a function that returns true if the given number is the multiplication of 3 prime numbers and false otherwise.\n# Knowing that (a) is less then 100.\n# Example:\n# is_multiply_prime 30 == true\n# 30 = 2 * 3 * 5\nproc is_multiply_prime {a} {\n",
        "canonical_solution": "    set num 0\n    for {set i 2} {$i * $i <= $a} {incr i} {\n        while {$a % $i == 0 && $a > $i} {\n            set a [expr {$a / $i}]\n            incr num\n        }\n    }\n    if {$num == 2} {\n        return true\n    }\n    return false\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[is_multiply_prime 5] == false}\nassert {[is_multiply_prime 30] == true}\nassert {[is_multiply_prime 8] == true}\nassert {[is_multiply_prime 10] == false}\nassert {[is_multiply_prime 125] == true}\nassert {[is_multiply_prime [expr {3 * 5 * 7}]] == true}\nassert {[is_multiply_prime [expr {3 * 6 * 7}]] == false}\nassert {[is_multiply_prime [expr {9 * 9 * 9}]] == false}\nassert {[is_multiply_prime [expr {11 * 9 * 9}]] == false}\nassert {[is_multiply_prime [expr {11 * 13 * 7}]] == true}\n",
        "declaration": "proc is_multiply_prime {a} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[is_multiply_prime 30] == true}\n",
        "prompt_text": "Write a function that returns true if the given number is the multiplication of 3 prime numbers and false otherwise. Knowing that (a) is less then 100.",
        "prompt_explain": "Write a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100.\nExample:\nis_multiply_prime 30 == true\n30 = 2 * 3 * 5",
        "func_title": "proc is_multiply_prime {a}"
    },
    {
        "prompt": "# Your task is to write a function that returns true if a number x is a simple power of n and false in other cases. x is a simple power of n if n**int=x\n# For example:\n# is_simple_power 1 4 => true\n# is_simple_power 2 2 => true\n# is_simple_power 8 2 => true\n# is_simple_power 3 2 => false\n# is_simple_power 3 1 => false\n# is_simple_power 5 3 => false\nproc is_simple_power {x n} {\n",
        "canonical_solution": "    set p 1\n    set count 0\n    while {$p <= $x && $count < 100} {\n        if {$p == $x} {\n            return true\n        }\n        set p [expr {$p * $n}]\n        incr count\n    }\n    return false\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[is_simple_power 1 4] == true}\nassert {[is_simple_power 2 2] == true}\nassert {[is_simple_power 8 2] == true}\nassert {[is_simple_power 3 2] == false}\nassert {[is_simple_power 3 1] == false}\nassert {[is_simple_power 5 3] == false}\nassert {[is_simple_power 16 2] == true}\nassert {[is_simple_power 143214 16] == false}\nassert {[is_simple_power 4 2] == true}\nassert {[is_simple_power 9 3] == true}\nassert {[is_simple_power 16 4] == true}\nassert {[is_simple_power 24 2] == false}\nassert {[is_simple_power 128 4] == false}\nassert {[is_simple_power 12 6] == false}\nassert {[is_simple_power 1 1] == true}\nassert {[is_simple_power 1 12] == true}\n",
        "declaration": "proc is_simple_power {x n} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[is_simple_power 1 4] == true}\nassert {[is_simple_power 2 2] == true}\nassert {[is_simple_power 8 2] == true}\nassert {[is_simple_power 3 2] == false}\nassert {[is_simple_power 3 1] == false}\nassert {[is_simple_power 5 3] == false}\n",
        "prompt_text": "Your task is to write a function that returns true if a number x is a simple power of n and false in other cases. x is a simple power of n if n**int=x",
        "prompt_explain": "Your task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power 1 4 => true\nis_simple_power 2 2 => true\nis_simple_power 8 2 => true\nis_simple_power 3 2 => false\nis_simple_power 3 1 => false\nis_simple_power 5 3 => false",
        "func_title": "proc is_simple_power {x n}"
    },
    {
        "prompt": "# Write a function that takes an integer a and returns true if this integer is a cube of some integer number.\n# Note: you may assume the input is always valid.\n# Examples:\n# iscube 1 ==> true\n# iscube 2 ==> false\n# iscube -1 ==> true\n# iscube 64 ==> true\n# iscube 0 ==> true\n# iscube 180 ==> false\nproc iscube {a} {\n",
        "canonical_solution": "    set a [expr {abs($a)}]\n    for {set i 0} {[expr {$i * $i * $i}] <= $a} {incr i} {\n        if {[expr {$i * $i * $i}] == $a} {\n            return true\n        }\n    }\n    return false\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[iscube 1] == true}\nassert {[iscube 2] == false}\nassert {[iscube -1] == true}\nassert {[iscube 64] == true}\nassert {[iscube 180] == false}\nassert {[iscube 1000] == true}\nassert {[iscube 0] == true}\nassert {[iscube 1729] == false}\n",
        "declaration": "proc iscube {a} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[iscube 1] == true}\nassert {[iscube 2] == false}\nassert {[iscube -1] == true}\nassert {[iscube 64] == true}\nassert {[iscube 180] == false}\nassert {[iscube 0] == true}\n",
        "prompt_text": "Write a function that takes an integer a and returns true if this integer is a cube of some integer number. Note: you may assume the input is always valid. Examples: iscube 1 ==> true iscube 2 ==> false iscube -1 ==> true iscube 64 ==> true iscube 0 ==> true iscube 180 ==> false",
        "prompt_explain": "Write a function that takes an integer a and returns true if this integer is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\niscube 1 ==> true\niscube 2 ==> false\niscube -1 ==> true\niscube 64 ==> true\niscube 0 ==> true\niscube 180 ==> false",
        "func_title": "proc iscube {a}"
    },
    {
        "prompt": "# You have been tasked to write a function that receives a hexadecimal number as a string and counts the number of hexadecimal digits that are primes (prime number, or a prime, is a natural number greater than 1 that is not a product of two smaller natural numbers). Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Prime numbers are 2, 3, 5, 7, 11, 13, 17,... So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13). Note: you may assume the input is always correct or empty string, and symbols A,B,C,D,E,F are always uppercase. Examples: For num = \"AB\" the output should be 1. For num = \"1077E\" the output should be 2. For num = \"ABED1A33\" the output should be 4. For num = \"123456789ABCDEF0\" the output should be 6. For num = \"2020\" the output should be 2.\nproc hex_key {num} {\n",
        "canonical_solution": "    set key \"2357BD\"\n    set out 0\n    set length [string length $num]\n    for {set i 0} {$i < $length} {incr i} {\n        set char [string index $num $i]\n        if {[string first $char $key] != -1} {\n            incr out\n        }\n    }\n    return $out\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[hex_key \"AB\"] == 1}\nassert {[hex_key \"1077E\"] == 2}\nassert {[hex_key \"ABED1A33\"] == 4}\nassert {[hex_key \"2020\"] == 2}\nassert {[hex_key \"123456789ABCDEF0\"] == 6}\nassert {[hex_key \"112233445566778899AABBCCDDEEFF00\"] == 12}\nassert {[hex_key \"\"] == 0}\n",
        "declaration": "proc hex_key {num} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[hex_key \"AB\"] == 1}\nassert {[hex_key \"1077E\"] == 2}\nassert {[hex_key \"ABED1A33\"] == 4}\nassert {[hex_key \"2020\"] == 2}\nassert {[hex_key \"123456789ABCDEF0\"] == 6}\n",
        "prompt_text": "You have been tasked to write a function that receives a hexadecimal number as a string and counts the number of hexadecimal digits that are primes (prime number, or a prime, is a natural number greater than 1 that is not a product of two smaller natural numbers). Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Prime numbers are 2, 3, 5, 7, 11, 13, 17,... So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13). Note: you may assume the input is always correct or empty string, and symbols A,B,C,D,E,F are always uppercase. Examples: For num = \"AB\" the output should be 1. For num = \"1077E\" the output should be 2. For num = \"ABED1A33\" the output should be 4. For num = \"123456789ABCDEF0\" the output should be 6. For num = \"2020\" the output should be 2.",
        "prompt_explain": "You have been tasked to write a function that receives a hexadecimal number as a string and counts the number of hexadecimal digits that are primes (prime number, or a prime, is a natural number greater than 1 that is not a product of two smaller natural numbers). Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Prime numbers are 2, 3, 5, 7, 11, 13, 17,... So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13). Note: you may assume the input is always correct or empty string, and symbols A,B,C,D,E,F are always uppercase. Examples: For num = \"AB\" the output should be 1. For num = \"1077E\" the output should be 2. For num = \"ABED1A33\" the output should be 4. For num = \"123456789ABCDEF0\" the output should be 6. For num = \"2020\" the output should be 2.",
        "func_title": "proc hex_key {num}"
    },
    {
        "prompt": "# You are given a string s.\n# Your task is to check if the string is happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n# For example:\n# is_happy \"a\" => false\n# is_happy \"aa\" => false\n# is_happy \"abcd\" => true\n# is_happy \"aabb\" => false\n# is_happy \"adb\" => true\n# is_happy \"xyy\" => false\nproc is_happy {s} {\n",
        "canonical_solution": "    if {[string length $s] < 3} {return false}\n    for {set i 2} {$i < [string length $s]} {incr i} {\n        if {[string index $s $i] == [string index $s [expr {$i - 1}]] || [string index $s $i] == [string index $s [expr {$i - 2}]]} {\n            return false\n        }\n    }\n    return true\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[is_happy \"a\"] == false}\nassert {[is_happy \"aa\"] == false}\nassert {[is_happy \"abcd\"] == true}\nassert {[is_happy \"aabb\"] == false}\nassert {[is_happy \"adb\"] == true}\nassert {[is_happy \"xyy\"] == false}\nassert {[is_happy \"iopaxpoi\"] == true}\nassert {[is_happy \"iopaxioi\"] == false}\n",
        "declaration": "proc is_happy {s} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[is_happy \"a\"] == false}\nassert {[is_happy \"aa\"] == false}\nassert {[is_happy \"abcd\"] == true}\nassert {[is_happy \"aabb\"] == false}\nassert {[is_happy \"adb\"] == true}\nassert {[is_happy \"xyy\"] == false}\n",
        "prompt_text": "You are given a string s. Your task is to check if the string is happy or not. A string is happy if its length is at least 3 and every 3 consecutive letters are distinct",
        "prompt_explain": "You are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy \"a\" => false\nis_happy \"aa\" => false\nis_happy \"abcd\" => true\nis_happy \"aabb\" => false\nis_happy \"adb\" => true\nis_happy \"xyy\" => false",
        "func_title": "proc is_happy {s}"
    },
    {
        "prompt": "# Write a function that takes a string and returns true if the string length is a prime number or false otherwise\n# Examples\n# prime_length \"Hello\" == true\n# prime_length \"abcdcba\" == true\n# prime_length \"kittens\" == true\n# prime_length \"orange\" == false\nproc prime_length {str} {\n",
        "canonical_solution": "    set l [string length $str]\n    if {$l < 2} {return false}\n    for {set i 2} {$i * $i <= $l} {incr i} {\n        if {$l % $i == 0} {return false}\n    }\n    return true\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[prime_length \"Hello\"] == true}\nassert {[prime_length \"abcdcba\"] == true}\nassert {[prime_length \"kittens\"] == true}\nassert {[prime_length \"orange\"] == false}\nassert {[prime_length \"wow\"] == true}\nassert {[prime_length \"world\"] == true}\nassert {[prime_length \"MadaM\"] == true}\nassert {[prime_length \"Wow\"] == true}\nassert {[prime_length \"\"] == false}\nassert {[prime_length \"HI\"] == true}\nassert {[prime_length \"go\"] == true}\nassert {[prime_length \"gogo\"] == false}\nassert {[prime_length \"aaaaaaaaaaaaaaa\"] == false}\nassert {[prime_length \"Madam\"] == true}\nassert {[prime_length \"M\"] == false}\nassert {[prime_length \"0\"] == false}\n",
        "declaration": "proc prime_length {str} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[prime_length \"Hello\"] == true}\nassert {[prime_length \"abcdcba\"] == true}\nassert {[prime_length \"kittens\"] == true}\nassert {[prime_length \"orange\"] == false}\n",
        "prompt_text": "Write a function that takes a string and returns true if the string length is a prime number or false otherwise",
        "prompt_explain": "Write a function that takes a string and returns true if the string\nlength is a prime number or false otherwise\nExamples\nprime_length \"Hello\" == true\nprime_length \"abcdcba\" == true\nprime_length \"kittens\" == true\nprime_length \"orange\" == false",
        "func_title": "proc prime_length {str}"
    },
    {
        "prompt": "# Given a positive integer n, return the count of the numbers of n-digit positive integers that start or end with 1.\nproc starts_one_ends {n} {\n",
        "canonical_solution": "    if {$n < 1} {return 0}\n    if {$n == 1} {return 1}\n    set out 18\n    for {set i 2} {$i < $n} {incr i} {\n        set out [expr {$out * 10}]\n    }\n    return $out\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[starts_one_ends 1] == 1}\nassert {[starts_one_ends 2] == 18}\nassert {[starts_one_ends 3] == 180}\nassert {[starts_one_ends 4] == 1800}\nassert {[starts_one_ends 5] == 18000}\n",
        "declaration": "proc starts_one_ends {n} {\n",
        "example_test": "",
        "prompt_text": "Given a positive integer n, return the count of the numbers of n-digit positive integers that start or end with 1.",
        "prompt_explain": "Given a positive integer n, return the count of the numbers of n-digit positive integers that start or end with 1.",
        "func_title": "proc starts_one_ends {n}"
    },
    {
        "prompt": "# Given a positive integer N, return the total sum of its digits in binary.\n# Example\n# For N = 1000, the sum of digits will be 1 the output should be \"1\".\n# For N = 150, the sum of digits will be 6 the output should be \"110\".\n# For N = 147, the sum of digits will be 12 the output should be \"1100\".\n# Variables:\n# @N integer\n# Constraints: 0 ≤ N ≤ 10000.\n# Output:\n# a string of binary number\nproc solve {N} {\n",
        "canonical_solution": "    set sum 0\n    foreach digit [split $N {}] {\n        incr sum $digit\n    }\n    set bi \"\"\n    while {$sum > 0} {\n        set bi [expr {$sum % 2}]$bi\n        set sum [expr {$sum / 2}]\n    }\n    return $bi\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[solve 1000] == \"1\"}\nassert {[solve 150] == \"110\"}\nassert {[solve 147] == \"1100\"}\nassert {[solve 333] == \"1001\"}\nassert {[solve 963] == \"10010\"}\n",
        "declaration": "proc solve {N} {\n",
        "example_test": "",
        "prompt_text": "Given a positive integer N, return the total sum of its digits in binary.  Example For N = 1000, the sum of digits will be 1 the output should be \"1\". For N = 150, the sum of digits will be 6 the output should be \"110\". For N = 147, the sum of digits will be 12 the output should be \"1100\".  Variables: @N integer Constraints: 0 ≤ N ≤ 10000. Output: a string of binary number",
        "prompt_explain": "Given a positive integer N, return the total sum of its digits in binary.\n\nExample\nFor N = 1000, the sum of digits will be 1 the output should be \"1\".\nFor N = 150, the sum of digits will be 6 the output should be \"110\".\nFor N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n@N integer\nConstraints: 0 ≤ N ≤ 10000.\nOutput:\na string of binary number",
        "func_title": "proc solve {N}"
    },
    {
        "prompt": "# Given a non-empty list of integers lst. add the even elements that are at odd indices..\n#\n# Examples:\n# add {4 2 6 7} ==> 2\nproc add {lst} {\n",
        "canonical_solution": "    set sum 0\n    set length [llength $lst]\n    for {set i 0} {$i < $length} {incr i 2} {\n        set index [expr {$i + 1}]\n        if {$index < $length && [lindex $lst $index] % 2 == 0} {\n            incr sum [lindex $lst $index]\n        }\n    }\n    return $sum\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[add {4 88}] == 88}\nassert {[add {4 5 6 7 2 122}] == 122}\nassert {[add {4 0 6 7}] == 0}\nassert {[add {4 4 6 8}] == 12}\n",
        "declaration": "proc add {lst} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[add {4 2 6 7}] == 2}\n",
        "prompt_text": "Given a non-empty list of integers lst. add the even elements that are at odd indices..",
        "prompt_explain": "Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\nadd {4 2 6 7} ==> 2",
        "func_title": "proc add {lst}"
    },
    {
        "prompt": "# You are given a 2 dimensional data, as a nested lists,\n# which is similar to matrix, however, unlike matrices,\n# each row may contain a different number of columns.\n# Given lst, and integer x, find integers x in the list,\n# and return list of lists, {{x1, y1}, {x2, y2} ...} such that\n# each list is a coordinate - {row, columns}, starting with 0.\n# Sort coordinates initially by rows in ascending order.\n# Also, sort coordinates of the row by columns in descending order.\n#\n# Examples:\n# get_row {\n#   {1 2 3 4 5 6}\n#   {1 2 3 4 1 6}\n#   {1 2 3 4 5 1}\n# } 1 == {{0 0} {1 4} {1 0} {2 5} {2 0}}\n# get_row {} 1 == {}\n# get_row {{} {1} {1 2 3}} 3 == {{2 2}}\nproc get_row {lst x} {\n",
        "canonical_solution": "    set out {}\n    set row_index 0\n    foreach row $lst {\n        set col_index [expr {[llength $row] - 1}]\n        while {$col_index >= 0} {\n            if {[lindex $row $col_index] == $x} {\n                lappend out [list $row_index $col_index]\n            }\n            incr col_index -1\n        }\n        incr row_index\n    }\n    return $out\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {\n        return false\n    }\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[llength [lindex $a $i]] != [llength [lindex $b $i]]} {\n            return false\n        }\n        for {set j 0} {$j < [llength [lindex $a $i]]} {incr j} {\n            if {[lindex [lindex $a $i] $j] != [lindex [lindex $b $i] $j]} {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nassert {[issame [get_row {\n    {1 2 3 4 5 6}\n    {1 2 3 4 1 6}\n    {1 2 3 4 5 1}\n} 1] {{0 0} {1 4} {1 0} {2 5} {2 0}}]}\nassert {[issame [get_row {\n    {1 2 3 4 5 6}\n    {1 2 3 4 5 6}\n    {1 2 3 4 5 6}\n    {1 2 3 4 5 6}\n    {1 2 3 4 5 6}\n    {1 2 3 4 5 6}\n} 2] {{0 1} {1 1} {2 1} {3 1} {4 1} {5 1}}]}\nassert {[issame [get_row {\n    {1 2 3 4 5 6}\n    {1 2 3 4 5 6}\n    {1 1 3 4 5 6}\n    {1 2 1 4 5 6}\n    {1 2 3 1 5 6}\n    {1 2 3 4 1 6}\n    {1 2 3 4 5 1}\n} 1] {{0 0} {1 0} {2 1} {2 0} {3 2} {3 0} {4 3} {4 0} {5 4} {5 0} {6 5} {6 0}}]}\nassert {[issame [get_row {} 1] {}]}\nassert {[issame [get_row {{1}} 2] {}]}\nassert {[issame [get_row {{} {1} {1 2 3}} 3] {{2 2}}]}\n",
        "declaration": "proc get_row {lst x} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {\n        return false\n    }\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[llength [lindex $a $i]] != [llength [lindex $b $i]]} {\n            return false\n        }\n        for {set j 0} {$j < [llength [lindex $a $i]]} {incr j} {\n            if {[lindex [lindex $a $i] $j] != [lindex [lindex $b $i] $j]} {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nassert {[issame [get_row {\n    {1 2 3 4 5 6}\n    {1 2 3 4 1 6}\n    {1 2 3 4 5 1}\n} 1] {{0 0} {1 4} {1 0} {2 5} {2 0}}]}\nassert {[issame [get_row {} 1] {}]}\nassert {[issame [get_row {{} {1} {1 2 3}} 3] {{2 2}}]}\n",
        "prompt_text": "You are given a 2 dimensional data, as a nested lists, which is similar to matrix, however, unlike matrices, each row may contain a different number of columns. Given lst, and integer x, find integers x in the list, and return list of lists, {{x1, y1}, {x2, y2} ...} such that each list is a coordinate - {row, columns}, starting with 0. Sort coordinates initially by rows in ascending order. Also, sort coordinates of the row by columns in descending order. ",
        "prompt_explain": "You are given a 2 dimensional data, as a nested lists,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the list,\nand return list of lists, {{x1, y1}, {x2, y2} ...} such that\neach list is a coordinate - {row, columns}, starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nExamples:\nget_row {\n{1 2 3 4 5 6}\n{1 2 3 4 1 6}\n{1 2 3 4 5 1}\n} 1 == {{0 0} {1 4} {1 0} {2 5} {2 0}}\nget_row {} 1 == {}\nget_row {{} {1} {1 2 3}} 3 == {{2 2}}",
        "func_title": "proc get_row {lst x}"
    },
    {
        "prompt": "# From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence.\n# >>> rolling_max {1 2 3 2 3 4 2}\n# {1 2 3 3 3 4 4}\nproc rolling_max {numbers} {\n",
        "canonical_solution": "    set out {}\n    set max 0\n    foreach num $numbers {\n        if {$num > $max} {set max $num}\n        lappend out $max\n    }\n    return $out\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {return false}\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {return false}\n    }\n    return true\n}\n\nassert {[issame [rolling_max {}] {}]}\nassert {[issame [rolling_max {1 2 3 4}] {1 2 3 4}]}\nassert {[issame [rolling_max {4 3 2 1}] {4 4 4 4}]}\nassert {[issame [rolling_max {3 2 3 100 3}] {3 3 3 100 100}]}\n",
        "declaration": "proc rolling_max {numbers} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {return false}\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {return false}\n    }\n    return true\n}\n\nassert {[issame [rolling_max {1 2 3 2 3 4 2}] {1 2 3 3 3 4 4}]}\n",
        "prompt_text": "From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence.",
        "prompt_explain": "From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence.\n>>> rolling_max {1 2 3 2 3 4 2}\n{1 2 3 3 3 4 4}",
        "func_title": "proc rolling_max {numbers}"
    },
    {
        "prompt": "# You'll be given a string of words, and your task is to count the number of boredoms. A boredom is a sentence that starts with the word \"I\". Sentences are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored \"Hello world\"\n# 0\n# >>> is_bored \"The sky is blue. The sun is shining. I love this weather\"\n# 1\nproc is_bored {S} {\n",
        "canonical_solution": "    set isstart true\n    set isi false\n    set sum 0\n    for {set i 0} {$i < [string length $S]} {incr i} {\n        set char [string index $S $i]\n        if {$char eq \" \" && $isi} {set isi false; incr sum}\n        if {$char eq \"I\" && $isstart} {set isi true}\n        if {$char ne \"I\"} {set isi false}\n        if {$char ne \" \"} {set isstart false}\n        if {$char eq \".\" || $char eq \"?\" || $char eq \"!\"} {set isstart true}\n    }\n    return $sum\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[is_bored \"Hello world\"] == 0}\nassert {[is_bored \"Is the sky blue?\"] == 0}\nassert {[is_bored \"I love It !\"] == 1}\nassert {[is_bored \"bIt\"] == 0}\nassert {[is_bored \"I feel good today. I will be productive. will kill It\"] == 2}\nassert {[is_bored \"You and I are going for a walk\"] == 0}\n",
        "declaration": "proc is_bored {S} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[is_bored \"Hello world\"] == 0}\nassert {[is_bored \"The sky is blue. The sun is shining. I love this weather\"] == 1}\n",
        "prompt_text": "You'll be given a string of words, and your task is to count the number of boredoms. A boredom is a sentence that starts with the word \"I\". Sentences are delimited by '.', '?' or '!'.",
        "prompt_explain": "You'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n\nFor example:\n>>> is_bored \"Hello world\"\n0\n>>> is_bored \"The sky is blue. The sun is shining. I love this weather\"\n1",
        "func_title": "proc is_bored {S}"
    },
    {
        "prompt": "# Create a function that takes 3 numbers. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases.\n# Examples\n# any_int 5 2 7 ➞ true\n# any_int 3 2 2 ➞ false\n# any_int 3 -2 1 ➞ true\n# any_int 3.6 -2.2 2 ➞ false\nproc any_int {a b c} {\n",
        "canonical_solution": "    if {[expr {round($a) != $a}]} {return false}\n    if {[expr {round($b) != $b}]} {return false}\n    if {[expr {round($c) != $c}]} {return false}\n    if {[expr {$a + $b == $c || $a + $c == $b || $b + $c == $a}]} {return true}\n    return false\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[any_int 2 3 1] == true}\nassert {[any_int 2.5 2 3] == false}\nassert {[any_int 1.5 5 3.5] == false}\nassert {[any_int 2 6 2] == false}\nassert {[any_int 4 2 2] == true}\nassert {[any_int 2.2 2.2 2.2] == false}\nassert {[any_int -4 6 2] == true}\nassert {[any_int 2 1 1] == true}\nassert {[any_int 3 4 7] == true}\nassert {[any_int 3.01 4 7] == false}\n",
        "declaration": "proc any_int {a b c} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[any_int 5 2 7] == true}\nassert {[any_int 3 2 2] == false}\nassert {[any_int 3 -2 1] == true}\nassert {[any_int 3.6 -2.2 2] == false}\n",
        "prompt_text": "Create a function that takes 3 numbers. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases.",
        "prompt_explain": "Create a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\n\nExamples\nany_int 5 2 7 ➞ true\n\nany_int 3 2 2 ➞ false\n\nany_int 3 -2 1 ➞ true\n\nany_int 3.6 -2.2 2 ➞ false\n\n",
        "func_title": "proc any_int {a b c}"
    },
    {
        "prompt": "# You are given a list of integers.\n# You need to find the largest prime value and return the sum of its digits.\n#\n# Examples:\n# For lst = {0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3} the output should be 10\n# For lst = {1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1} the output should be 25\n# For lst = {1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3} the output should be 13\n# For lst = {0 724 32 71 99 32 6 0 5 91 83 0 5 6} the output should be 11\n# For lst = {0 81 12 3 1 21} the output should be 3\n# For lst = {0 8 1 2 1 7} the output should be 7\nproc skjkasdkd {lst} {\n",
        "canonical_solution": "    set largest 0\n    foreach num $lst {\n        if {$num > $largest} {\n            set prime true\n            for {set j 2} {$j * $j <= $num} {incr j} {\n                if {$num % $j == 0} {\n                    set prime false\n                    break\n                }\n            }\n            if {$prime} {\n                set largest $num\n            }\n        }\n    }\n    set sum 0\n    foreach digit [split $largest {}] {\n        incr sum $digit\n    }\n    return $sum\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[skjkasdkd {0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3}] == 10}\nassert {[skjkasdkd {1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1}] == 25}\nassert {[skjkasdkd {1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3}] == 13}\nassert {[skjkasdkd {0 724 32 71 99 32 6 0 5 91 83 0 5 6}] == 11}\nassert {[skjkasdkd {0 81 12 3 1 21}] == 3}\nassert {[skjkasdkd {0 8 1 2 1 7}] == 7}\nassert {[skjkasdkd {8191}] == 19}\nassert {[skjkasdkd {8191 123456 127 7}] == 19}\nassert {[skjkasdkd {127 97 8192}] == 10}\n",
        "declaration": "proc skjkasdkd {lst} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[skjkasdkd {0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3}] == 10}\nassert {[skjkasdkd {1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1}] == 25}\nassert {[skjkasdkd {1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3}] == 13}\nassert {[skjkasdkd {0 724 32 71 99 32 6 0 5 91 83 0 5 6}] == 11}\nassert {[skjkasdkd {0 81 12 3 1 21}] == 3}\nassert {[skjkasdkd {0 8 1 2 1 7}] == 7}\n",
        "prompt_text": "You are given a list of integers. You need to find the largest prime value and return the sum of its digits. Examples: For lst = {0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3} the output should be 10 For lst = {1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1} the output should be 25 For lst = {1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3} the output should be 13 For lst = {0 724 32 71 99 32 6 0 5 91 83 0 5 6} the output should be 11 For lst = {0 81 12 3 1 21} the output should be 3 For lst = {0 8 1 2 1 7} the output should be 7",
        "prompt_explain": "You are given a list of integers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = {0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3} the output should be 10\nFor lst = {1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1} the output should be 25\nFor lst = {1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3} the output should be 13\nFor lst = {0 724 32 71 99 32 6 0 5 91 83 0 5 6} the output should be 11\nFor lst = {0 81 12 3 1 21} the output should be 3\nFor lst = {0 8 1 2 1 7} the output should be 7",
        "func_title": "proc skjkasdkd {lst}"
    },
    {
        "prompt": "# Implement a function that takes a non-negative integer and returns a list of the first n integers that are prime numbers and less than n.\n# for example:\n# count_up_to 5 => {2 3}\n# count_up_to 11 => {2 3 5 7}\n# count_up_to 0 => {}\n# count_up_to 20 => {2 3 5 7 11 13 17 19}\n# count_up_to 1 => {}\n# count_up_to 18 => {2 3 5 7 11 13 17}\nproc count_up_to {n} {\n",
        "canonical_solution": "    set out {}\n    for {set i 2} {$i < $n} {incr i} {\n        if {[llength $out] == 0} {\n            lappend out $i\n        } else {\n            set isp true\n            foreach j $out {\n                if {$j * $j > $i} break\n                if {$i % $j == 0} {\n                    set isp false\n                    break\n                }\n            }\n            if {$isp} {lappend out $i}\n        }\n    }\n    return $out\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {return false}\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {return false}\n    }\n    return true\n}\n\nassert {[issame [count_up_to 5] {2 3}]}\nassert {[issame [count_up_to 6] {2 3 5}]}\nassert {[issame [count_up_to 7] {2 3 5}]}\nassert {[issame [count_up_to 10] {2 3 5 7}]}\nassert {[issame [count_up_to 0] {}]}\nassert {[issame [count_up_to 22] {2 3 5 7 11 13 17 19}]}\nassert {[issame [count_up_to 1] {}]}\nassert {[issame [count_up_to 18] {2 3 5 7 11 13 17}]}\nassert {[issame [count_up_to 47] {2 3 5 7 11 13 17 19 23 29 31 37 41 43}]}\nassert {[issame [count_up_to 101] {2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97}]}\n",
        "declaration": "proc count_up_to {n} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nproc issame {a b} {\n    if {[llength $a] != [llength $b]} {return false}\n    for {set i 0} {$i < [llength $a]} {incr i} {\n        if {[lindex $a $i] != [lindex $b $i]} {return false}\n    }\n    return true\n}\n\nassert {[issame [count_up_to 5] {2 3}]}\nassert {[issame [count_up_to 11] {2 3 5 7}]}\nassert {[issame [count_up_to 0] {}]}\nassert {[issame [count_up_to 20] {2 3 5 7 11 13 17 19}]}\nassert {[issame [count_up_to 1] {}]}\nassert {[issame [count_up_to 18] {2 3 5 7 11 13 17}]}\n",
        "prompt_text": "Implement a function that takes a non-negative integer and returns a list of the first n integers that are prime numbers and less than n.",
        "prompt_explain": "Implement a function that takes a non-negative integer and returns a list of the first n integers that are prime numbers and less than n.\nfor example:\ncount_up_to 5 => {2 3}\ncount_up_to 11 => {2 3 5 7}\ncount_up_to 0 => {}\ncount_up_to 20 => {2 3 5 7 11 13 17 19}\ncount_up_to 1 => {}\ncount_up_to 18 => {2 3 5 7 11 13 17}",
        "func_title": "proc count_up_to {n}"
    },
    {
        "prompt": "# Given a string s, count the number of uppercase vowels in even indices.\n#\n# For example:\n# count_upper \"aBCdEf\" returns 1\n# count_upper \"abcdefg\" returns 0\n# count_upper \"dBBE\" returns 0\nproc count_upper {s} {\n",
        "canonical_solution": "    set uvowel \"AEIOU\"\n    set count 0\n    set length [string length $s]\n    for {set i 0} {$i < $length} {incr i 2} {\n        set char [string index $s $i]\n        if {[string first $char $uvowel] != -1} {\n            incr count\n        }\n    }\n    return $count\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_upper \"aBCdEf\"] == 1}\nassert {[count_upper \"abcdefg\"] == 0}\nassert {[count_upper \"dBBE\"] == 0}\nassert {[count_upper \"B\"] == 0}\nassert {[count_upper \"U\"] == 1}\nassert {[count_upper \"\"] == 0}\nassert {[count_upper \"EEEE\"] == 2}\n",
        "declaration": "proc count_upper {s} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_upper \"aBCdEf\"] == 1}\nassert {[count_upper \"abcdefg\"] == 0}\nassert {[count_upper \"dBBE\"] == 0}\n",
        "prompt_text": "Given a string s, count the number of uppercase vowels in even indices.",
        "prompt_explain": "Given a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper \"aBCdEf\" returns 1\ncount_upper \"abcdefg\" returns 0\ncount_upper \"dBBE\" returns 0",
        "func_title": "proc count_upper {s}"
    },
    {
        "prompt": "# Create a function that takes a value (string) representing a number and returns the closest integer to it. If the number is equidistant from two integers, round it away from zero.\n# Examples\n# >>> closest_integer \"10\"\n# 10\n# >>> closest_integer \"15.3\"\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant from two integers, the one you should return is the one that is the farthest from zero. For example closest_integer \"14.5\" should return 15 and closest_integer \"-14.5\" should return -15.\nproc closest_integer {value} {\n",
        "canonical_solution": "    set w [expr {double($value)}]\n    return [expr {round($w)}]\n}\n",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[closest_integer \"10\"] == 10}\nassert {[closest_integer \"14.5\"] == 15}\nassert {[closest_integer \"-15.5\"] == -16}\nassert {[closest_integer \"15.3\"] == 15}\nassert {[closest_integer \"0\"] == 0}\n",
        "declaration": "proc closest_integer {value} {\n",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[closest_integer \"10\"] == 10}\nassert {[closest_integer \"15.3\"] == 15}\n",
        "prompt_text": "Create a function that takes a value (string) representing a number and returns the closest integer to it. If the number is equidistant from two integers, round it away from zero.",
        "prompt_explain": "Create a function that takes a value (string) representing a number and returns the closest integer to it. If the number is equidistant from two integers, round it away from zero.\nExamples\n>>> closest_integer \"10\"\n10\n>>> closest_integer \"15.3\"\n15\nNote:\nRounding away from zero means that if the given number is equidistant from two integers, the one you should return is the one that is the farthest from zero. For example closest_integer \"14.5\" should return 15 and closest_integer \"-14.5\" should return -15.",
        "func_title": "proc closest_integer {value}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello world, this is a test.\"\n# 6\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world, this is a test.\"] == 6}\nassert {[count_words \"One two three\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world, this is a test.\"] == 6}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello world, this is a test.\"\n6",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 5 3 9 2}\n# 9\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 5 3 9 2}] == 9}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -5 -3}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 5 3 9 2}] == 9}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 5 3 9 2}\n9",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the minimum value.\n# >>> min_value {1 5 3 9 2}\n# 1\nproc min_value {numbers} {",
        "canonical_solution": "    set min [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num < $min} {\n            set min $num\n        }\n    }\n    return $min\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_value {1 5 3 9 2}] == 1}\nassert {[min_value {10 20 30}] == 10}\nassert {[min_value {-1 -5 -3}] == -5}",
        "declaration": "proc min_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_value {1 5 3 9 2}] == 1}",
        "prompt_text": "Given a list of integers, return the minimum value.",
        "prompt_explain": "Given a list of integers, return the minimum value.\n>>> min_value {1 5 3 9 2}\n1",
        "func_title": "proc min_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -2 -3}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello World!\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World!\"] == 2}\nassert {[count_words \"Tcl is fun\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World!\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello World!\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all elements.\n# >>> product_list {1 2 3 4 5}\n# 120\nproc product_list {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}\nassert {[product_list {10 20 30}] == 6000}\nassert {[product_list {0 1 2}] == 0}",
        "declaration": "proc product_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}",
        "prompt_text": "Given a list of integers, return the product of all elements.",
        "prompt_explain": "Given a list of integers, return the product of all elements.\n>>> product_list {1 2 3 4 5}\n120",
        "func_title": "proc product_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Tcl is a powerful scripting language\"\n# 6\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}\nassert {[count_words \"Hello World\"] == 2}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Tcl is a powerful scripting language\"\n6",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> max_list {1 2 3 4 5}\n# 5\nproc max_list {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}\nassert {[max_list {10 20 30}] == 30}\nassert {[max_list {0}] == 0}",
        "declaration": "proc max_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> max_list {1 2 3 4 5}\n5",
        "func_title": "proc max_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 20 30}] == 60}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 2 3 4 5}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3 -4 -5}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 2 3 4 5}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {0 1 2 3}] == 0}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello World\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World\"] == 2}\nassert {[count_words \"Tcl is fun\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello World\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_list {1 2 3 4 5}\n# 5\nproc max_list {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}\nassert {[max_list {10 20 30}] == 30}\nassert {[max_list {-1 -2 -3}] == -1}",
        "declaration": "proc max_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_list {1 2 3 4 5}\n5",
        "func_title": "proc max_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_evens {1 2 3 4 5 6}\n# 12\nproc sum_evens {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}\nassert {[sum_evens {10 20 30}] == 60}\nassert {[sum_evens {1 3 5 7}] == 0}",
        "declaration": "proc sum_evens {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_evens {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_evens {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n# >>> find_max {1 2 3 4 5}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3 -4 -5}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n>>> find_max {1 2 3 4 5}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_list {1 2 3 4}\n# 24\nproc product_list {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4}] == 24}\nassert {[product_list {10 20 30}] == 6000}\nassert {[product_list {0 1 2 3}] == 0}",
        "declaration": "proc product_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_list {1 2 3 4}\n24",
        "func_title": "proc product_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Tcl is a powerful scripting language\"\n# 6\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}\nassert {[count_words \"Hello World\"] == 2}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Tcl is a powerful scripting language\"\n6",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -2 -3}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all elements.\n# >>> product_list {1 2 3 4 5}\n# 120\nproc product_list {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}\nassert {[product_list {10 20 30}] == 6000}\nassert {[product_list {0 1 2}] == 0}",
        "declaration": "proc product_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}",
        "prompt_text": "Given a list of integers, return the product of all elements.",
        "prompt_explain": "Given a list of integers, return the product of all elements.\n>>> product_list {1 2 3 4 5}\n120",
        "func_title": "proc product_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello World\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World\"] == 2}\nassert {[count_words \"Tcl is fun\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello World\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -2 -3}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements in the list.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all elements in the list.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> max_list {1 2 3 4 5}\n# 5\nproc max_list {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}\nassert {[max_list {10 20 30}] == 30}\nassert {[max_list {-1 -2 -3}] == -1}",
        "declaration": "proc max_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> max_list {1 2 3 4 5}\n5",
        "func_title": "proc max_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the minimum value in the list.\n# >>> min_list {1 2 3 4 5}\n# 1\nproc min_list {numbers} {",
        "canonical_solution": "    set min [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num < $min} {\n            set min $num\n        }\n    }\n    return $min\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_list {1 2 3 4 5}] == 1}\nassert {[min_list {10 20 30}] == 10}\nassert {[min_list {-1 -2 -3}] == -3}",
        "declaration": "proc min_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_list {1 2 3 4 5}] == 1}",
        "prompt_text": "Given a list of integers, return the minimum value in the list.",
        "prompt_explain": "Given a list of integers, return the minimum value in the list.\n>>> min_list {1 2 3 4 5}\n1",
        "func_title": "proc min_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello World\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World\"] == 2}\nassert {[count_words \"One Two Three\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello World\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 11 12 13 14}] == 36}\nassert {[sum_even_numbers {1 3 5 7 9}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 2 3 4 5}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}\nassert {[find_max {10 20 30 40 50}] == 50}\nassert {[find_max {-1 -2 -3 -4 -5}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 2 3 4 5}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {0 1 2 3}] == 0}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_list {1 2 3 4 5}\n# 5\nproc max_list {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}\nassert {[max_list {10 20 30}] == 30}\nassert {[max_list {-1 -2 -3}] == -1}",
        "declaration": "proc max_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_list {1 2 3 4 5}\n5",
        "func_title": "proc max_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the minimum value.\n# >>> min_list {1 2 3 4 5}\n# 1\nproc min_list {numbers} {",
        "canonical_solution": "    set min [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num < $min} {\n            set min $num\n        }\n    }\n    return $min\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_list {1 2 3 4 5}] == 1}\nassert {[min_list {10 20 30}] == 10}\nassert {[min_list {-1 -2 -3}] == -3}",
        "declaration": "proc min_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_list {1 2 3 4 5}] == 1}",
        "prompt_text": "Given a list of integers, return the minimum value.",
        "prompt_explain": "Given a list of integers, return the minimum value.\n>>> min_list {1 2 3 4 5}\n1",
        "func_title": "proc min_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"hello world\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"hello world\"] == 2}\nassert {[count_words \"one two three four\"] == 4}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"hello world\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"hello world\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello world\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world\"] == 2}\nassert {[count_words \"Tcl is fun\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello world\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_list {1 2 3 4 5}\n# 5\nproc max_list {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}\nassert {[max_list {10 20 30}] == 30}\nassert {[max_list {-1 -2 -3}] == -1}",
        "declaration": "proc max_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_list {1 2 3 4 5}\n5",
        "func_title": "proc max_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all elements.\n# >>> product_list {1 2 3 4 5}\n# 120\nproc product_list {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}\nassert {[product_list {10 20 30}] == 6000}\nassert {[product_list {0 1 2}] == 0}",
        "declaration": "proc product_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}",
        "prompt_text": "Given a list of integers, return the product of all elements.",
        "prompt_explain": "Given a list of integers, return the product of all elements.\n>>> product_list {1 2 3 4 5}\n120",
        "func_title": "proc product_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_evens {1 2 3 4 5 6}\n# 12\nproc sum_evens {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}\nassert {[sum_evens {10 15 20 25}] == 30}\nassert {[sum_evens {1 3 5 7}] == 0}",
        "declaration": "proc sum_evens {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_evens {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_evens {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string. Words are separated by whitespace.\n# >>> count_words \"Hello world from Tcl\"\n# 4\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}\nassert {[count_words \"One two three\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}",
        "prompt_text": "Given a string, return the number of words in the string. Words are separated by whitespace.",
        "prompt_explain": "Given a string, return the number of words in the string. Words are separated by whitespace.\n>>> count_words \"Hello world from Tcl\"\n4",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the largest number in the list. Do not use the built-in max command.\n# >>> find_max {3 1 4 1 5 9}\n# 9\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {3 1 4 1 5 9}] == 9}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {3 1 4 1 5 9}] == 9}",
        "prompt_text": "Given a list of integers, return the largest number in the list. Do not use the built-in max command.",
        "prompt_explain": "Given a list of integers, return the largest number in the list. Do not use the built-in max command.\n>>> find_max {3 1 4 1 5 9}\n9",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all elements.\n# >>> product_list {1 2 3 4 5}\n# 120\nproc product_list {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}\nassert {[product_list {10 20 30}] == 6000}\nassert {[product_list {0 1 2}] == 0}",
        "declaration": "proc product_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}",
        "prompt_text": "Given a list of integers, return the product of all elements.",
        "prompt_explain": "Given a list of integers, return the product of all elements.\n>>> product_list {1 2 3 4 5}\n120",
        "func_title": "proc product_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_evens {1 2 3 4 5 6}\n# 12\nproc sum_evens {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}\nassert {[sum_evens {10 20 30}] == 60}\nassert {[sum_evens {1 3 5 7}] == 0}",
        "declaration": "proc sum_evens {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_evens {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_evens {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product {1 2 3 4}\n# 24\nproc product {numbers} {",
        "canonical_solution": "    set result 1\n    foreach num $numbers {\n        set result [expr {$result * $num}]\n    }\n    return $result\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product {1 2 3 4}] == 24}\nassert {[product {10 20 30}] == 6000}\nassert {[product {5}] == 5}",
        "declaration": "proc product {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product {1 2 3 4}\n24",
        "func_title": "proc product {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n# >>> find_max {1 2 3 4 5}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n>>> find_max {1 2 3 4 5}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the minimum value in the list. Do not use the built-in min command.\n# >>> find_min {1 2 3 4 5}\n# 1\nproc find_min {numbers} {",
        "canonical_solution": "    set min [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num < $min} {\n            set min $num\n        }\n    }\n    return $min\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_min {1 2 3 4 5}] == 1}\nassert {[find_min {10 20 30}] == 10}\nassert {[find_min {-1 -2 -3}] == -3}",
        "declaration": "proc find_min {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_min {1 2 3 4 5}] == 1}",
        "prompt_text": "Given a list of integers, return the minimum value in the list. Do not use the built-in min command.",
        "prompt_explain": "Given a list of integers, return the minimum value in the list. Do not use the built-in min command.\n>>> find_min {1 2 3 4 5}\n1",
        "func_title": "proc find_min {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Tcl is a scripting language\"\n# 5\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a scripting language\"] == 5}\nassert {[count_words \"\"] == 0}\nassert {[count_words \"OneWord\"] == 1}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a scripting language\"] == 5}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Tcl is a scripting language\"\n5",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 3 2 8 5}\n# 8\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 3 2 8 5}] == 8}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -2 -3}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 3 2 8 5}] == 8}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 3 2 8 5}\n8",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {-1 -2 -3 -4 -5}] == -15}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello World Tcl\"\n# 3\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World Tcl\"] == 3}\nassert {[count_words \"Tcl is fun\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World Tcl\"] == 3}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello World Tcl\"\n3",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_list {1 2 3 4 5}\n# 5\nproc max_list {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}\nassert {[max_list {10 20 30}] == 30}\nassert {[max_list {-1 -2 -3 -4 -5}] == -1}",
        "declaration": "proc max_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_list {1 2 3 4 5}\n5",
        "func_title": "proc max_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the minimum value.\n# >>> min_list {1 2 3 4 5}\n# 1\nproc min_list {numbers} {",
        "canonical_solution": "    set min [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num < $min} {\n            set min $num\n        }\n    }\n    return $min\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_list {1 2 3 4 5}] == 1}\nassert {[min_list {10 20 30}] == 10}\nassert {[min_list {-1 -2 -3 -4 -5}] == -5}",
        "declaration": "proc min_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_list {1 2 3 4 5}] == 1}",
        "prompt_text": "Given a list of integers, return the minimum value.",
        "prompt_explain": "Given a list of integers, return the minimum value.\n>>> min_list {1 2 3 4 5}\n1",
        "func_title": "proc min_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_evens {1 2 3 4 5 6}\n# 12\nproc sum_evens {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}\nassert {[sum_evens {10 20 30}] == 60}\nassert {[sum_evens {1 3 5 7}] == 0}",
        "declaration": "proc sum_evens {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_evens {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_evens {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product {1 2 3 4 5}\n# 120\nproc product {numbers} {",
        "canonical_solution": "    set prod 1\n    foreach num $numbers {\n        set prod [expr {$prod * $num}]\n    }\n    return $prod\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product {1 2 3 4 5}] == 120}\nassert {[product {10 20 30}] == 6000}\nassert {[product {0 1 2 3}] == 0}",
        "declaration": "proc product {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product {1 2 3 4 5}] == 120}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product {1 2 3 4 5}\n120",
        "func_title": "proc product {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {-1 -2 -3 -4 -5}] == -15}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -2 -3 -4 -5}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"hello world\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"hello world\"] == 2}\nassert {[count_words \"tcl programming is fun\"] == 4}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"hello world\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"hello world\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all elements.\n# >>> product_list {1 2 3 4 5}\n# 120\nproc product_list {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}\nassert {[product_list {10 20 30}] == 6000}\nassert {[product_list {-1 -2 -3 -4 -5}] == -120}",
        "declaration": "proc product_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}",
        "prompt_text": "Given a list of integers, return the product of all elements.",
        "prompt_explain": "Given a list of integers, return the product of all elements.\n>>> product_list {1 2 3 4 5}\n120",
        "func_title": "proc product_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello world, this is Tcl.\"\n# 5\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world, this is Tcl.\"] == 5}\nassert {[count_words \"One two three\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world, this is Tcl.\"] == 5}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello world, this is Tcl.\"\n5",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -2 -3}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_evens {1 2 3 4 5 6}\n# 12\nproc sum_evens {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}\nassert {[sum_evens {10 20 30}] == 60}\nassert {[sum_evens {1 3 5 7}] == 0}",
        "declaration": "proc sum_evens {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_evens {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_evens {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n# >>> find_max {1 2 3 4 5}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3 -4 -5}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n>>> find_max {1 2 3 4 5}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello World!\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World!\"] == 2}\nassert {[count_words \"This is a test\"] == 4}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World!\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello World!\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product {1 2 3 4 5}\n# 120\nproc product {numbers} {",
        "canonical_solution": "    set result 1\n    foreach num $numbers {\n        set result [expr {$result * $num}]\n    }\n    return $result\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product {1 2 3 4 5}] == 120}\nassert {[product {10 20 30}] == 6000}\nassert {[product {1 1 1 1 1}] == 1}",
        "declaration": "proc product {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product {1 2 3 4 5}] == 120}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product {1 2 3 4 5}\n120",
        "func_title": "proc product {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> find_max {1 3 2 8 5}\n# 8\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 3 2 8 5}] == 8}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 3 2 8 5}] == 8}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> find_max {1 3 2 8 5}\n8",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the average value.\n# >>> average {1 2 3 4 5}\n# 3.0\nproc average {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return [expr {double($sum) / [llength $numbers]}]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[average {1 2 3 4 5}] == 3.0}\nassert {[average {10 20 30}] == 20.0}\nassert {[average {0}] == 0.0}",
        "declaration": "proc average {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[average {1 2 3 4 5}] == 3.0}",
        "prompt_text": "Given a list of integers, return the average value.",
        "prompt_explain": "Given a list of integers, return the average value.\n>>> average {1 2 3 4 5}\n3.0",
        "func_title": "proc average {numbers}"
    },
    {
        "prompt": "# Given a list of numbers, return the sum of all numbers.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        set sum [expr {$sum + $num}]\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of numbers, return the sum of all numbers.",
        "prompt_explain": "Given a list of numbers, return the sum of all numbers.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Tcl is a scripting language\"\n# 5\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a scripting language\"] == 5}\nassert {[count_words \"OneWord\"] == 1}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a scripting language\"] == 5}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Tcl is a scripting language\"\n5",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a string, return true if the string is a palindrome, otherwise return false.\n# >>> is_palindrome \"racecar\"\n# 1\nproc is_palindrome {str} {",
        "canonical_solution": "    return [expr {$str eq [string reverse $str]}]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[is_palindrome \"racecar\"] == 1}\nassert {[is_palindrome \"hello\"] == 0}\nassert {[is_palindrome \"\"] == 1}",
        "declaration": "proc is_palindrome {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[is_palindrome \"racecar\"] == 1}",
        "prompt_text": "Given a string, return true if the string is a palindrome, otherwise return false.",
        "prompt_explain": "Given a string, return true if the string is a palindrome, otherwise return false.\n>>> is_palindrome \"racecar\"\n1",
        "func_title": "proc is_palindrome {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -2 -3}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {1 3 5 7}] == 0}\nassert {[sum_even_numbers {2 4 6 8 10}] == 30}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 2 3 4 5}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3 -4 -5}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 2 3 4 5}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello World!\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World!\"] == 2}\nassert {[count_words \"This is a test\"] == 4}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World!\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello World!\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4 5}\n# 120\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4 5}] == 120}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {}] == 1}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4 5}] == 120}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4 5}\n120",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even {1 2 3 4 5 6}\n# 12\nproc sum_even {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even {1 2 3 4 5 6}] == 12}\nassert {[sum_even {10 15 20 25}] == 30}\nassert {[sum_even {1 3 5 7}] == 0}",
        "declaration": "proc sum_even {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string. Words are separated by spaces.\n# >>> count_words \"Hello world from Tcl\"\n# 4\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}\nassert {[count_words \"One two three\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}",
        "prompt_text": "Given a string, return the number of words in the string. Words are separated by spaces.",
        "prompt_explain": "Given a string, return the number of words in the string. Words are separated by spaces.\n>>> count_words \"Hello world from Tcl\"\n4",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n# >>> find_max {1 5 3 9 2}\n# 9\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -5 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}",
        "prompt_text": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n>>> find_max {1 5 3 9 2}\n9",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 20 30}] == 60}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 2 3 4 5}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3 -4 -5}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 2 3 4 5}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Tcl is a powerful scripting language\"\n# 6\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}\nassert {[count_words \"\"] == 0}\nassert {[count_words \"OneWord\"] == 1}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Tcl is a powerful scripting language\"\n6",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {}] == 1}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 20 30}] == 60}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value without using the built-in max command.\n# >>> find_max {1 2 3 4 5}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3 -4 -5}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value without using the built-in max command.",
        "prompt_explain": "Given a list of integers, return the maximum value without using the built-in max command.\n>>> find_max {1 2 3 4 5}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"hello world\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"hello world\"] == 2}\nassert {[count_words \"tcl programming is fun\"] == 4}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"hello world\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"hello world\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {5}] == 5}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of numbers, return the sum of all numbers.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        set sum [expr {$sum + $num}]\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of numbers, return the sum of all numbers.",
        "prompt_explain": "Given a list of numbers, return the sum of all numbers.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {3 1 4 1 5 9}\n# 9\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {3 1 4 1 5 9}] == 9}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -2 -3}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {3 1 4 1 5 9}] == 9}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {3 1 4 1 5 9}\n9",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the minimum value.\n# >>> min_value {3 1 4 1 5 9}\n# 1\nproc min_value {numbers} {",
        "canonical_solution": "    set min [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num < $min} {\n            set min $num\n        }\n    }\n    return $min\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_value {3 1 4 1 5 9}] == 1}\nassert {[min_value {10 20 30}] == 10}\nassert {[min_value {-1 -2 -3}] == -3}",
        "declaration": "proc min_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_value {3 1 4 1 5 9}] == 1}",
        "prompt_text": "Given a list of integers, return the minimum value.",
        "prompt_explain": "Given a list of integers, return the minimum value.\n>>> min_value {3 1 4 1 5 9}\n1",
        "func_title": "proc min_value {numbers}"
    },
    {
        "prompt": "# Given a list of numbers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 20 30}] == 60}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of numbers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of numbers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Tcl is a powerful scripting language\"\n# 6\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}\nassert {[count_words \"\"] == 0}\nassert {[count_words \"OneWord\"] == 1}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Tcl is a powerful scripting language\"\n6",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {3 1 4 1 5 9}\n# 9\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {3 1 4 1 5 9}] == 9}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {3 1 4 1 5 9}] == 9}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {3 1 4 1 5 9}\n9",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {0}] == 0}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 20 30}] == 60}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 2 3 4 5}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 2 3 4 5}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello world from Tcl\"\n# 4\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}\nassert {[count_words \"One\"] == 1}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello world from Tcl\"\n4",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the average value.\n# >>> average {1 2 3 4 5}\n# 3\nproc average {numbers} {",
        "canonical_solution": "    set sum 0\n    set count [llength $numbers]\n    foreach num $numbers {\n        incr sum $num\n    }\n    return [expr {$sum / $count}]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[average {1 2 3 4 5}] == 3}\nassert {[average {10 20 30}] == 20}\nassert {[average {0}] == 0}",
        "declaration": "proc average {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[average {1 2 3 4 5}] == 3}",
        "prompt_text": "Given a list of integers, return the average value.",
        "prompt_explain": "Given a list of integers, return the average value.\n>>> average {1 2 3 4 5}\n3",
        "func_title": "proc average {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello World\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World\"] == 2}\nassert {[count_words \"Tcl is fun\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello World\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> max_list {1 2 3 4 5}\n# 5\nproc max_list {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}\nassert {[max_list {10 20 30}] == 30}\nassert {[max_list {-1 -2 -3}] == -1}",
        "declaration": "proc max_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> max_list {1 2 3 4 5}\n5",
        "func_title": "proc max_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 20 30}] == 60}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello world from Tcl\"\n# 4\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}\nassert {[count_words \"One two three\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello world from Tcl\"\n4",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 2 3 4 5}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 2 3 4 5}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {0 1 2 3}] == 0}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello world, this is Tcl.\"\n# 5\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world, this is Tcl.\"] == 5}\nassert {[count_words \"One two three\"] == 3}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world, this is Tcl.\"] == 5}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello world, this is Tcl.\"\n5",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all elements.\n# >>> product_list {1 2 3 4}\n# 24\nproc product_list {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4}] == 24}\nassert {[product_list {5 2 3}] == 30}",
        "declaration": "proc product_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all elements.",
        "prompt_explain": "Given a list of integers, return the product of all elements.\n>>> product_list {1 2 3 4}\n24",
        "func_title": "proc product_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -2 -3}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"hello world\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"hello world\"] == 2}\nassert {[count_words \"Tcl is fun\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"hello world\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"hello world\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the average value.\n# >>> average_value {1 2 3 4 5}\n# 3.0\nproc average_value {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return [expr {$sum / double([llength $numbers])}]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[average_value {1 2 3 4 5}] == 3.0}\nassert {[average_value {10 20 30}] == 20.0}\nassert {[average_value {0 0 0}] == 0.0}",
        "declaration": "proc average_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[average_value {1 2 3 4 5}] == 3.0}",
        "prompt_text": "Given a list of integers, return the average value.",
        "prompt_explain": "Given a list of integers, return the average value.\n>>> average_value {1 2 3 4 5}\n3.0",
        "func_title": "proc average_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string. Words are separated by whitespace.\n# >>> count_words \"Tcl is a scripting language\"\n# 5\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a scripting language\"] == 5}\nassert {[count_words \"Hello World!\"] == 2}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a scripting language\"] == 5}",
        "prompt_text": "Given a string, return the number of words in the string. Words are separated by whitespace.",
        "prompt_explain": "Given a string, return the number of words in the string. Words are separated by whitespace.\n>>> count_words \"Tcl is a scripting language\"\n5",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -2 -3}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the minimum value.\n# >>> min_value {1 2 3 4 5}\n# 1\nproc min_value {numbers} {",
        "canonical_solution": "    set min [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num < $min} {\n            set min $num\n        }\n    }\n    return $min\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_value {1 2 3 4 5}] == 1}\nassert {[min_value {10 20 30}] == 10}\nassert {[min_value {-1 -2 -3}] == -3}",
        "declaration": "proc min_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_value {1 2 3 4 5}] == 1}",
        "prompt_text": "Given a list of integers, return the minimum value.",
        "prompt_explain": "Given a list of integers, return the minimum value.\n>>> min_value {1 2 3 4 5}\n1",
        "func_title": "proc min_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 15 20 25}] == 30}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 2 3 4 5}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}\nassert {[find_max {10 20 30 40 50}] == 50}\nassert {[find_max {-1 -2 -3 -4 -5}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 2 3 4 5}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Tcl is a powerful scripting language\"\n# 6\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}\nassert {[count_words \"One two three\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Tcl is a powerful scripting language\"\n6",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {0 1 2 3}] == 0}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 11 12 13 14}] == 36}\nassert {[sum_even_numbers {1 3 5 7 9}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 2 3 4 5}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}\nassert {[find_max {10 20 30 40 50}] == 50}\nassert {[find_max {-1 -2 -3 -4 -5}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 2 3 4 5}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4 5}\n# 120\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4 5}] == 120}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {0 1 2 3}] == 0}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4 5}] == 120}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4 5}\n120",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello World!\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World!\"] == 2}\nassert {[count_words \"Tcl is a scripting language\"] == 5}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World!\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello World!\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello World\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World\"] == 2}\nassert {[count_words \"Tcl is fun\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello World\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_list {1 2 3 4 5}\n# 5\nproc max_list {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}\nassert {[max_list {10 20 30}] == 30}\nassert {[max_list {0 -1 -2}] == 0}",
        "declaration": "proc max_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_list {1 2 3 4 5}\n5",
        "func_title": "proc max_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello world from Tcl\"\n# 4\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}\nassert {[count_words \"OneWord\"] == 1}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello world from Tcl\"\n4",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_list {1 2 3 4 5}\n# 5\nproc max_list {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}\nassert {[max_list {10 20 30}] == 30}\nassert {[max_list {-1 -2 -3}] == -1}",
        "declaration": "proc max_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_list {1 2 3 4 5}\n5",
        "func_title": "proc max_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 20 30}] == 60}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list without using the built-in max command.\n# >>> find_max {1 5 3 9 2}\n# 9\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}",
        "prompt_text": "Given a list of integers, return the maximum value in the list without using the built-in max command.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list without using the built-in max command.\n>>> find_max {1 5 3 9 2}\n9",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {5 10 2}] == 100}\nassert {[product_of_numbers {0 1 2 3}] == 0}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"hello world\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"hello world\"] == 2}\nassert {[count_words \"tcl programming is fun\"] == 4}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"hello world\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"hello world\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Tcl is a powerful scripting language\"\n# 6\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}\nassert {[count_words \"Hello World\"] == 2}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Tcl is a powerful scripting language\"\n6",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {0 -1 -2}] == 0}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the minimum value.\n# >>> min_value {1 2 3 4 5}\n# 1\nproc min_value {numbers} {",
        "canonical_solution": "    set min [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num < $min} {\n            set min $num\n        }\n    }\n    return $min\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_value {1 2 3 4 5}] == 1}\nassert {[min_value {10 20 30}] == 10}\nassert {[min_value {0 -1 -2}] == -2}",
        "declaration": "proc min_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_value {1 2 3 4 5}] == 1}",
        "prompt_text": "Given a list of integers, return the minimum value.",
        "prompt_explain": "Given a list of integers, return the minimum value.\n>>> min_value {1 2 3 4 5}\n1",
        "func_title": "proc min_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Tcl is a scripting language\"\n# 5\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a scripting language\"] == 5}\nassert {[count_words \"One two three\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a scripting language\"] == 5}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Tcl is a scripting language\"\n5",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {0 -1 -2}] == 0}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the minimum value.\n# >>> min_value {1 2 3 4 5}\n# 1\nproc min_value {numbers} {",
        "canonical_solution": "    set min [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num < $min} {\n            set min $num\n        }\n    }\n    return $min\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_value {1 2 3 4 5}] == 1}\nassert {[min_value {10 20 30}] == 10}\nassert {[min_value {0 -1 -2}] == -2}",
        "declaration": "proc min_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_value {1 2 3 4 5}] == 1}",
        "prompt_text": "Given a list of integers, return the minimum value.",
        "prompt_explain": "Given a list of integers, return the minimum value.\n>>> min_value {1 2 3 4 5}\n1",
        "func_title": "proc min_value {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of times a specified character appears in the string.\n# >>> count_char \"hello world\" \"l\"\n# 3\nproc count_char {str char} {",
        "canonical_solution": "    set count 0\n    foreach chr [split $str \"\"] {\n        if {$chr eq $char} {\n            incr count\n        }\n    }\n    return $count\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_char \"hello world\" \"l\"] == 3}\nassert {[count_char \"hello world\" \"o\"] == 2}\nassert {[count_char \"hello world\" \"z\"] == 0}",
        "declaration": "proc count_char {str char} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_char \"hello world\" \"l\"] == 3}",
        "prompt_text": "Given a string, return the number of times a specified character appears in the string.",
        "prompt_explain": "Given a string, return the number of times a specified character appears in the string.\n>>> count_char \"hello world\" \"l\"\n3",
        "func_title": "proc count_char {str char}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_evens {1 2 3 4 5 6}\n# 12\nproc sum_evens {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}\nassert {[sum_evens {10 20 30}] == 60}\nassert {[sum_evens {1 3 5 7}] == 0}",
        "declaration": "proc sum_evens {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_evens {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_evens {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_list {1 2 3 4}\n# 24\nproc product_list {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4}] == 24}\nassert {[product_list {10 20 30}] == 6000}\nassert {[product_list {0 1 2 3}] == 0}",
        "declaration": "proc product_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_list {1 2 3 4}\n24",
        "func_title": "proc product_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum number in the list.\n# >>> find_max {1 2 3 4 5}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3 -4 -5}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum number in the list.",
        "prompt_explain": "Given a list of integers, return the maximum number in the list.\n>>> find_max {1 2 3 4 5}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_evens {1 2 3 4 5 6}\n# 12\nproc sum_evens {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}\nassert {[sum_evens {10 20 30}] == 60}\nassert {[sum_evens {1 3 5 7}] == 0}",
        "declaration": "proc sum_evens {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_evens {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_evens {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n# >>> find_max {1 2 3 4 5}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3 -4 -5}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n>>> find_max {1 2 3 4 5}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello World\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World\"] == 2}\nassert {[count_words \"Tcl is fun\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello World\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_list {1 2 3 4}\n# 24\nproc product_of_list {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_list {1 2 3 4}] == 24}\nassert {[product_of_list {10 20 30}] == 6000}\nassert {[product_of_list {0 1 2 3}] == 0}",
        "declaration": "proc product_of_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_list {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_list {1 2 3 4}\n24",
        "func_title": "proc product_of_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 20 30}] == 60}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 5 3 9 2}\n# 9\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 5 3 9 2}\n9",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Tcl is a powerful scripting language\"\n# 6\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}\nassert {[count_words \"\"] == 0}\nassert {[count_words \"OneWord\"] == 1}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Tcl is a powerful scripting language\"\n6",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {0 1 2 3}] == 0}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a string, return true if the string is a palindrome, otherwise return false.\n# >>> is_palindrome \"racecar\"\n# true\nproc is_palindrome {str} {",
        "canonical_solution": "    return [expr {$str eq [string reverse $str]}]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[is_palindrome \"racecar\"] == 1}\nassert {[is_palindrome \"hello\"] == 0}\nassert {[is_palindrome \"\"] == 1}",
        "declaration": "proc is_palindrome {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[is_palindrome \"racecar\"] == 1}",
        "prompt_text": "Given a string, return true if the string is a palindrome, otherwise return false.",
        "prompt_explain": "Given a string, return true if the string is a palindrome, otherwise return false.\n>>> is_palindrome \"racecar\"\ntrue",
        "func_title": "proc is_palindrome {str}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_evens {1 2 3 4 5 6}\n# 12\nproc sum_evens {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}\nassert {[sum_evens {10 20 30}] == 60}\nassert {[sum_evens {1 3 5 7}] == 0}",
        "declaration": "proc sum_evens {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_evens {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_evens {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 2 3 4 5}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3 -4 -5}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 2 3 4 5}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_list {1 2 3 4 5}\n# 120\nproc product_list {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}\nassert {[product_list {10 20 30}] == 6000}\nassert {[product_list {1 3 5 7}] == 105}",
        "declaration": "proc product_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_list {1 2 3 4 5}\n120",
        "func_title": "proc product_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the minimum value in the list.\n# >>> find_min {1 2 3 4 5}\n# 1\nproc find_min {numbers} {",
        "canonical_solution": "    set min [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num < $min} {\n            set min $num\n        }\n    }\n    return $min\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_min {1 2 3 4 5}] == 1}\nassert {[find_min {10 20 30}] == 10}\nassert {[find_min {-1 -2 -3 -4 -5}] == -5}",
        "declaration": "proc find_min {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_min {1 2 3 4 5}] == 1}",
        "prompt_text": "Given a list of integers, return the minimum value in the list.",
        "prompt_explain": "Given a list of integers, return the minimum value in the list.\n>>> find_min {1 2 3 4 5}\n1",
        "func_title": "proc find_min {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string. Words are separated by spaces.\n# >>> count_words \"Hello world from Tcl\"\n# 4\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}\nassert {[count_words \"One\"] == 1}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}",
        "prompt_text": "Given a string, return the number of words in the string. Words are separated by spaces.",
        "prompt_explain": "Given a string, return the number of words in the string. Words are separated by spaces.\n>>> count_words \"Hello world from Tcl\"\n4",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> max_list {1 2 3 4 5}\n# 5\nproc max_list {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}\nassert {[max_list {10 20 30}] == 30}\nassert {[max_list {-1 -2 -3}] == -1}",
        "declaration": "proc max_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> max_list {1 2 3 4 5}\n5",
        "func_title": "proc max_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the average value of the list.\n# >>> average_list {1 2 3 4 5}\n# 3\nproc average_list {numbers} {",
        "canonical_solution": "    set sum 0\n    set count [llength $numbers]\n    foreach num $numbers {\n        incr sum $num\n    }\n    return [expr {$sum / double($count)}]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[average_list {1 2 3 4 5}] == 3}\nassert {[average_list {10 20 30}] == 20}\nassert {[average_list {}] == 0}",
        "declaration": "proc average_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[average_list {1 2 3 4 5}] == 3}",
        "prompt_text": "Given a list of integers, return the average value of the list.",
        "prompt_explain": "Given a list of integers, return the average value of the list.\n>>> average_list {1 2 3 4 5}\n3",
        "func_title": "proc average_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_evens {1 2 3 4 5 6}\n# 12\nproc sum_evens {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}\nassert {[sum_evens {10 20 30}] == 60}\nassert {[sum_evens {1 3 5 7}] == 0}",
        "declaration": "proc sum_evens {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_evens {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_evens {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product {1 2 3 4}\n# 24\nproc product {numbers} {",
        "canonical_solution": "    set prod 1\n    foreach num $numbers {\n        set prod [expr {$prod * $num}]\n    }\n    return $prod\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product {1 2 3 4}] == 24}\nassert {[product {10 20 30}] == 6000}\nassert {[product {5}] == 5}",
        "declaration": "proc product {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product {1 2 3 4}\n24",
        "func_title": "proc product {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello World Tcl\"\n# 3\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World Tcl\"] == 3}\nassert {[count_words \"One\"] == 1}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World Tcl\"] == 3}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello World Tcl\"\n3",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello World Tcl\"\n# 3\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World Tcl\"] == 3}\nassert {[count_words \"One two three four\"] == 4}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World Tcl\"] == 3}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello World Tcl\"\n3",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -2 -3}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 20 30}] == 60}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Tcl is a scripting language\"\n# 5\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a scripting language\"] == 5}\nassert {[count_words \"Hello World\"] == 2}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a scripting language\"] == 5}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Tcl is a scripting language\"\n5",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 2 3 4 5}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 2 3 4 5}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {0 1 2 3}] == 0}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    }
]