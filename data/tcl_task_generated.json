[
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 15 20 25}] == 30}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {5 0 10}] == 0}\nassert {[product_of_numbers {2 2 2 2}] == 16}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello world from Tcl\"\n# 4\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}\nassert {[count_words \"One two three four five\"] == 5}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello world from Tcl\"\n4",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_evens {1 2 3 4 5 6}\n# 12\nproc sum_evens {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}\nassert {[sum_evens {10 20 30}] == 60}\nassert {[sum_evens {1 3 5 7}] == 0}",
        "declaration": "proc sum_evens {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_evens {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_evens {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product {1 2 3 4 5}\n# 120\nproc product {numbers} {",
        "canonical_solution": "    set result 1\n    foreach num $numbers {\n        set result [expr {$result * $num}]\n    }\n    return $result\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product {1 2 3 4 5}] == 120}\nassert {[product {10 20 30}] == 6000}\nassert {[product {1 3 5 7}] == 105}",
        "declaration": "proc product {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product {1 2 3 4 5}] == 120}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product {1 2 3 4 5}\n120",
        "func_title": "proc product {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {0 -1 -2}] == 0}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello World!\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World!\"] == 2}\nassert {[count_words \"Tcl is fun\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World!\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello World!\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all elements.\n# >>> product_list {1 2 3 4 5}\n# 120\nproc product_list {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}\nassert {[product_list {10 20 30}] == 6000}\nassert {[product_list {0 1 2}] == 0}",
        "declaration": "proc product_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}",
        "prompt_text": "Given a list of integers, return the product of all elements.",
        "prompt_explain": "Given a list of integers, return the product of all elements.\n>>> product_list {1 2 3 4 5}\n120",
        "func_title": "proc product_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 20 30}] == 60}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 2 3 4 5}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 2 3 4 5}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {0 1 2 3}] == 0}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello world from Tcl\"\n# 4\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}\nassert {[count_words \"One two three\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello world from Tcl\"\n4",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -2 -3}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the minimum value.\n# >>> min_value {1 2 3 4 5}\n# 1\nproc min_value {numbers} {",
        "canonical_solution": "    set min [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num < $min} {\n            set min $num\n        }\n    }\n    return $min\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_value {1 2 3 4 5}] == 1}\nassert {[min_value {10 20 30}] == 10}\nassert {[min_value {-1 -2 -3}] == -3}",
        "declaration": "proc min_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_value {1 2 3 4 5}] == 1}",
        "prompt_text": "Given a list of integers, return the minimum value.",
        "prompt_explain": "Given a list of integers, return the minimum value.\n>>> min_value {1 2 3 4 5}\n1",
        "func_title": "proc min_value {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello World!\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World!\"] == 2}\nassert {[count_words \"Tcl is fun\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World!\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello World!\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> max_list {1 2 3 4 5}\n# 5\nproc max_list {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}\nassert {[max_list {10 20 30}] == 30}\nassert {[max_list {-1 -2 -3}] == -1}",
        "declaration": "proc max_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> max_list {1 2 3 4 5}\n5",
        "func_title": "proc max_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> max_list {1 3 2 8 5}\n# 8\nproc max_list {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 3 2 8 5}] == 8}\nassert {[max_list {10 20 30}] == 30}\nassert {[max_list {-1 -2 -3}] == -1}",
        "declaration": "proc max_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 3 2 8 5}] == 8}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> max_list {1 3 2 8 5}\n8",
        "func_title": "proc max_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_evens {1 2 3 4 5 6}\n# 12\nproc sum_evens {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}\nassert {[sum_evens {10 20 30}] == 60}\nassert {[sum_evens {1 3 5 7}] == 0}",
        "declaration": "proc sum_evens {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_evens {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_evens {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n# >>> find_max {3 1 4 1 5 9}\n# 9\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {3 1 4 1 5 9}] == 9}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {3 1 4 1 5 9}] == 9}",
        "prompt_text": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n>>> find_max {3 1 4 1 5 9}\n9",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello World!\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World!\"] == 2}\nassert {[count_words \"Tcl programming is fun\"] == 4}\nassert {[count_words \"OneWord\"] == 1}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World!\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello World!\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4 5}\n# 120\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4 5}] == 120}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {0 1 2 3}] == 0}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4 5}] == 120}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4 5}\n120",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Tcl is a scripting language\"\n# 5\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a scripting language\"] == 5}\nassert {[count_words \"Hello World\"] == 2}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a scripting language\"] == 5}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Tcl is a scripting language\"\n5",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> max_list {1 2 3 4 5}\n# 5\nproc max_list {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}\nassert {[max_list {10 20 30}] == 30}\nassert {[max_list {-1 -2 -3}] == -1}",
        "declaration": "proc max_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> max_list {1 2 3 4 5}\n5",
        "func_title": "proc max_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_evens {1 2 3 4 5 6}\n# 12\nproc sum_evens {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}\nassert {[sum_evens {10 15 20 25}] == 30}\nassert {[sum_evens {1 3 5 7}] == 0}",
        "declaration": "proc sum_evens {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_evens {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_evens {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n# >>> find_max {1 2 3 4 5}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n>>> find_max {1 2 3 4 5}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello World Tcl\"\n# 3\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World Tcl\"] == 3}\nassert {[count_words \"One Two Three Four\"] == 4}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World Tcl\"] == 3}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello World Tcl\"\n3",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {5}] == 5}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_evens {1 2 3 4 5 6}\n# 12\nproc sum_evens {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}\nassert {[sum_evens {10 15 20 25}] == 30}\nassert {[sum_evens {1 3 5 7}] == 0}",
        "declaration": "proc sum_evens {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_evens {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_evens {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n# >>> find_max {1 3 2 8 5}\n# 8\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 3 2 8 5}] == 8}\nassert {[find_max {10 20 30 40 50}] == 50}\nassert {[find_max {-1 -2 -3 -4 -5}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 3 2 8 5}] == 8}",
        "prompt_text": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n>>> find_max {1 3 2 8 5}\n8",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4 5}\n# 120\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4 5}] == 120}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {0 1 2 3}] == 0}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4 5}] == 120}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4 5}\n120",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string. Words are separated by spaces.\n# >>> count_words \"Hello World!\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World!\"] == 2}\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World!\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string. Words are separated by spaces.",
        "prompt_explain": "Given a string, return the number of words in the string. Words are separated by spaces.\n>>> count_words \"Hello World!\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even {1 2 3 4 5 6}\n# 12\nproc sum_even {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even {1 2 3 4 5 6}] == 12}\nassert {[sum_even {10 20 30}] == 60}\nassert {[sum_even {1 3 5 7}] == 0}",
        "declaration": "proc sum_even {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 2 3 4 5}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 2 3 4 5}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_list {1 2 3 4}\n# 24\nproc product_list {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4}] == 24}\nassert {[product_list {10 20 30}] == 6000}\nassert {[product_list {0 1 2 3}] == 0}",
        "declaration": "proc product_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_list {1 2 3 4}\n24",
        "func_title": "proc product_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"hello world\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"hello world\"] == 2}\nassert {[count_words \"Tcl is fun\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"hello world\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"hello world\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Tcl is a powerful scripting language\"\n# 6\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}\nassert {[count_words \"\"] == 0}\nassert {[count_words \"SingleWord\"] == 1}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Tcl is a powerful scripting language\"\n6",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_in_list {1 3 2 8 5}\n# 8\nproc max_in_list {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_in_list {1 3 2 8 5}] == 8}\nassert {[max_in_list {10 20 30}] == 30}\nassert {[max_in_list {-1 -2 -3}] == -1}",
        "declaration": "proc max_in_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_in_list {1 3 2 8 5}] == 8}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_in_list {1 3 2 8 5}\n8",
        "func_title": "proc max_in_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the average value.\n# >>> average_list {1 2 3 4 5}\n# 3\nproc average_list {numbers} {",
        "canonical_solution": "    set sum 0\n    set count [llength $numbers]\n    foreach num $numbers {\n        incr sum $num\n    }\n    return [expr {$sum / $count}]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[average_list {1 2 3 4 5}] == 3}\nassert {[average_list {10 20 30}] == 20}\nassert {[average_list {2 4 6 8}] == 5}",
        "declaration": "proc average_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[average_list {1 2 3 4 5}] == 3}",
        "prompt_text": "Given a list of integers, return the average value.",
        "prompt_explain": "Given a list of integers, return the average value.\n>>> average_list {1 2 3 4 5}\n3",
        "func_title": "proc average_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -2 -3}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello world from Tcl\"\n# 4\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}\nassert {[count_words \"OneWord\"] == 1}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello world from Tcl\"\n4",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the average value.\n# >>> average_value {1 2 3 4 5}\n# 3.0\nproc average_value {numbers} {",
        "canonical_solution": "    set sum 0\n    set count [llength $numbers]\n    foreach num $numbers {\n        incr sum $num\n    }\n    return [expr {$sum / double($count)}]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[average_value {1 2 3 4 5}] == 3.0}\nassert {[average_value {10 20 30}] == 20.0}\nassert {[average_value {1}] == 1.0}",
        "declaration": "proc average_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[average_value {1 2 3 4 5}] == 3.0}",
        "prompt_text": "Given a list of integers, return the average value.",
        "prompt_explain": "Given a list of integers, return the average value.\n>>> average_value {1 2 3 4 5}\n3.0",
        "func_title": "proc average_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 20 30}] == 60}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list without using the built-in max command.\n# >>> find_max {1 5 3 9 2}\n# 9\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}",
        "prompt_text": "Given a list of integers, return the maximum value in the list without using the built-in max command.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list without using the built-in max command.\n>>> find_max {1 5 3 9 2}\n9",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"hello world\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"hello world\"] == 2}\nassert {[count_words \"one two three four\"] == 4}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"hello world\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"hello world\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {0 1 2 3}] == 0}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 15 20 25}] == 30}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello world from Tcl\"\n# 4\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}\nassert {[count_words \"One two three\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello world from Tcl\"\n4",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value without using the built-in max command.\n# >>> find_max {1 3 2 8 5}\n# 8\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 3 2 8 5}] == 8}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 3 2 8 5}] == 8}",
        "prompt_text": "Given a list of integers, return the maximum value without using the built-in max command.",
        "prompt_explain": "Given a list of integers, return the maximum value without using the built-in max command.\n>>> find_max {1 3 2 8 5}\n8",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {5 10 2}] == 100}\nassert {[product_of_numbers {0 1 2 3}] == 0}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers.",
        "prompt_explain": "Given a list of integers, return the product of all numbers.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_evens {1 2 3 4 5 6}\n# 12\nproc sum_evens {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}\nassert {[sum_evens {10 20 30}] == 60}\nassert {[sum_evens {1 3 5 7}] == 0}",
        "declaration": "proc sum_evens {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_evens {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_evens {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n# >>> find_max {1 3 2 5 4}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 3 2 5 4}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 3 2 5 4}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n>>> find_max {1 3 2 5 4}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {0 1 2 3}] == 0}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_evens {1 2 3 4 5 6}\n# 12\nproc sum_evens {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}\nassert {[sum_evens {10 20 30}] == 60}\nassert {[sum_evens {1 3 5 7}] == 0}",
        "declaration": "proc sum_evens {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_evens {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_evens {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product {1 2 3 4 5}\n# 120\nproc product {numbers} {",
        "canonical_solution": "    set prod 1\n    foreach num $numbers {\n        set prod [expr {$prod * $num}]\n    }\n    return $prod\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product {1 2 3 4 5}] == 120}\nassert {[product {10 20 30}] == 6000}\nassert {[product {0 1 2 3}] == 0}",
        "declaration": "proc product {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product {1 2 3 4 5}] == 120}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product {1 2 3 4 5}\n120",
        "func_title": "proc product {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 20 30}] == 60}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 5 3 9 2}\n# 9\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -5 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 5 3 9 2}\n9",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {0 1 2 3}] == 0}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even {1 2 3 4 5 6}\n# 12\nproc sum_even {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even {1 2 3 4 5 6}] == 12}\nassert {[sum_even {10 15 20 25}] == 30}\nassert {[sum_even {1 3 5 7}] == 0}",
        "declaration": "proc sum_even {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 2 3 4 5}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 2 3 4 5}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello world from Tcl\"\n# 4\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}\nassert {[count_words \"One two three\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello world from Tcl\"\n4",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_list {1 2 3 4 5}\n# 120\nproc product_list {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}\nassert {[product_list {10 20 30}] == 6000}\nassert {[product_list {1 1 1 1}] == 1}",
        "declaration": "proc product_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_list {1 2 3 4 5}\n120",
        "func_title": "proc product_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -2 -3}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all elements.\n# >>> product_list {1 2 3 4 5}\n# 120\nproc product_list {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}\nassert {[product_list {10 20 30}] == 6000}\nassert {[product_list {}] == 1}",
        "declaration": "proc product_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}",
        "prompt_text": "Given a list of integers, return the product of all elements.",
        "prompt_explain": "Given a list of integers, return the product of all elements.\n>>> product_list {1 2 3 4 5}\n120",
        "func_title": "proc product_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 20 30}] == 60}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 2 3 4 5}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3 -4 -5}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 2 3 4 5}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4 5}\n# 120\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4 5}] == 120}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {0 1 2 3}] == 0}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4 5}] == 120}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4 5}\n120",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_list {1 2 3 4 5}\n# 5\nproc max_list {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}\nassert {[max_list {10 20 30}] == 30}\nassert {[max_list {0 0 0}] == 0}",
        "declaration": "proc max_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_list {1 2 3 4 5}\n5",
        "func_title": "proc max_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"hello world\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"hello world\"] == 2}\nassert {[count_words \"tcl programming is fun\"] == 4}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"hello world\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"hello world\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even {1 2 3 4 5 6}\n# 12\nproc sum_even {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even {1 2 3 4 5 6}] == 12}\nassert {[sum_even {10 20 30}] == 60}\nassert {[sum_even {1 3 5 7}] == 0}",
        "declaration": "proc sum_even {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n# >>> find_max {1 3 2 5 4}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 3 2 5 4}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 3 2 5 4}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n>>> find_max {1 3 2 5 4}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the minimum value in the list. Do not use the built-in min command.\n# >>> find_min {1 3 2 5 4}\n# 1\nproc find_min {numbers} {",
        "canonical_solution": "    set min [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num < $min} {\n            set min $num\n        }\n    }\n    return $min\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_min {1 3 2 5 4}] == 1}\nassert {[find_min {10 20 30}] == 10}\nassert {[find_min {-1 -2 -3}] == -3}",
        "declaration": "proc find_min {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_min {1 3 2 5 4}] == 1}",
        "prompt_text": "Given a list of integers, return the minimum value in the list. Do not use the built-in min command.",
        "prompt_explain": "Given a list of integers, return the minimum value in the list. Do not use the built-in min command.\n>>> find_min {1 3 2 5 4}\n1",
        "func_title": "proc find_min {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_list {1 2 3 4 5}\n# 120\nproc product_list {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}\nassert {[product_list {10 20 30}] == 6000}\nassert {[product_list {1 1 1 1}] == 1}",
        "declaration": "proc product_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_list {1 2 3 4 5}\n120",
        "func_title": "proc product_list {numbers}"
    },
    {
        "prompt": "# Given a list of numbers, return the sum of all numbers.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        set sum [expr {$sum + $num}]\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of numbers, return the sum of all numbers.",
        "prompt_explain": "Given a list of numbers, return the sum of all numbers.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello world\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world\"] == 2}\nassert {[count_words \"Tcl is fun\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello world\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -2 -3}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the minimum value.\n# >>> min_value {1 2 3 4 5}\n# 1\nproc min_value {numbers} {",
        "canonical_solution": "    set min [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num < $min} {\n            set min $num\n        }\n    }\n    return $min\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_value {1 2 3 4 5}] == 1}\nassert {[min_value {10 20 30}] == 10}\nassert {[min_value {-1 -2 -3}] == -3}",
        "declaration": "proc min_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_value {1 2 3 4 5}] == 1}",
        "prompt_text": "Given a list of integers, return the minimum value.",
        "prompt_explain": "Given a list of integers, return the minimum value.\n>>> min_value {1 2 3 4 5}\n1",
        "func_title": "proc min_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello world\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world\"] == 2}\nassert {[count_words \"Tcl is fun\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello world\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -2 -3}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the minimum value.\n# >>> min_value {1 2 3 4 5}\n# 1\nproc min_value {numbers} {",
        "canonical_solution": "    set min [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num < $min} {\n            set min $num\n        }\n    }\n    return $min\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_value {1 2 3 4 5}] == 1}\nassert {[min_value {10 20 30}] == 10}\nassert {[min_value {-1 -2 -3}] == -3}",
        "declaration": "proc min_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_value {1 2 3 4 5}] == 1}",
        "prompt_text": "Given a list of integers, return the minimum value.",
        "prompt_explain": "Given a list of integers, return the minimum value.\n>>> min_value {1 2 3 4 5}\n1",
        "func_title": "proc min_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 20 30 40}] == 100}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello world from Tcl\"\n# 4\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}\nassert {[count_words \"One two three\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello world from Tcl\"\n4",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 2 3 4 5}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 2 3 4 5}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4 5}\n# 120\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4 5}] == 120}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {0 1 2 3}] == 0}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4 5}] == 120}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4 5}\n120",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 20 30}] == 60}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Tcl is a scripting language\"\n# 5\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a scripting language\"] == 5}\nassert {[count_words \"\"] == 0}\nassert {[count_words \"OneWord\"] == 1}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a scripting language\"] == 5}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Tcl is a scripting language\"\n5",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 5 3 9 2}\n# 9\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 5 3 9 2}\n9",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {}] == 1}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello world from Tcl\"\n# 4\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}\nassert {[count_words \"One two three\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello world from Tcl\"\n4",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_list {1 2 3 4 5}\n# 5\nproc max_list {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}\nassert {[max_list {10 20 30}] == 30}\nassert {[max_list {-1 -2 -3}] == -1}",
        "declaration": "proc max_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_list {1 2 3 4 5}\n5",
        "func_title": "proc max_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a list, return the number of elements in the list.\n# >>> list_length {1 2 3 4 5}\n# 5\nproc list_length {lst} {",
        "canonical_solution": "    return [llength $lst]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[list_length {1 2 3 4 5}] == 5}\nassert {[list_length {}] == 0}\nassert {[list_length {a b c d e f g}] == 7}",
        "declaration": "proc list_length {lst} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[list_length {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list, return the number of elements in the list.",
        "prompt_explain": "Given a list, return the number of elements in the list.\n>>> list_length {1 2 3 4 5}\n5",
        "func_title": "proc list_length {lst}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {0 -1 -2}] == 0}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_evens {1 2 3 4 5 6}\n# 12\nproc sum_evens {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}\nassert {[sum_evens {10 20 30}] == 60}\nassert {[sum_evens {1 3 5 7}] == 0}",
        "declaration": "proc sum_evens {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_evens {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_evens {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 3 2 5 4}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 3 2 5 4}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 3 2 5 4}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 3 2 5 4}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Tcl is a scripting language\"\n# 5\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a scripting language\"] == 5}\nassert {[count_words \"One two three\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a scripting language\"] == 5}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Tcl is a scripting language\"\n5",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product {1 2 3 4}\n# 24\nproc product {numbers} {",
        "canonical_solution": "    set result 1\n    foreach num $numbers {\n        set result [expr {$result * $num}]\n    }\n    return $result\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product {1 2 3 4}] == 24}\nassert {[product {10 20 30}] == 6000}\nassert {[product {0 1 2 3}] == 0}",
        "declaration": "proc product {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product {1 2 3 4}\n24",
        "func_title": "proc product {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_evens {1 2 3 4 5 6}\n# 12\nproc sum_evens {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}\nassert {[sum_evens {10 20 30}] == 60}\nassert {[sum_evens {1 3 5 7}] == 0}",
        "declaration": "proc sum_evens {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_evens {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_evens {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string. Words are separated by spaces.\n# >>> count_words \"Hello world from Tcl\"\n# 4\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}\nassert {[count_words \"One\"] == 1}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}",
        "prompt_text": "Given a string, return the number of words in the string. Words are separated by spaces.",
        "prompt_explain": "Given a string, return the number of words in the string. Words are separated by spaces.\n>>> count_words \"Hello world from Tcl\"\n4",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n# >>> find_max {1 3 2 5 4}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 3 2 5 4}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 3 2 5 4}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n>>> find_max {1 3 2 5 4}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 20 30}] == 60}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Tcl is a powerful scripting language\"\n# 6\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}\nassert {[count_words \"\"] == 0}\nassert {[count_words \"OneWord\"] == 1}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Tcl is a powerful scripting language\"\n6",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {3 1 4 1 5 9}\n# 9\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {3 1 4 1 5 9}] == 9}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {3 1 4 1 5 9}] == 9}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {3 1 4 1 5 9}\n9",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {0 1 2 3}] == 0}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_evens {1 2 3 4 5 6}\n# 12\nproc sum_evens {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}\nassert {[sum_evens {10 15 20 25}] == 30}\nassert {[sum_evens {1 3 5 7}] == 0}",
        "declaration": "proc sum_evens {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_evens {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_evens {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n# >>> find_max {3 1 4 1 5 9}\n# 9\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {3 1 4 1 5 9}] == 9}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {3 1 4 1 5 9}] == 9}",
        "prompt_text": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n>>> find_max {3 1 4 1 5 9}\n9",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello World\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    set words [split $str \" \"]\n    return [llength $words]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World\"] == 2}\nassert {[count_words \"Tcl is fun\"] == 3}\nassert {[count_words \"One\"] == 1}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello World\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Tcl is a scripting language\"\n# 5\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a scripting language\"] == 5}\nassert {[count_words \"\"] == 0}\nassert {[count_words \"OneWord\"] == 1}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a scripting language\"] == 5}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Tcl is a scripting language\"\n5",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 5 3 9 2}\n# 9\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 5 3 9 2}] == 9}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -2 -3}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 5 3 9 2}] == 9}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 5 3 9 2}\n9",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all elements.\n# >>> product_list {1 2 3 4 5}\n# 120\nproc product_list {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}\nassert {[product_list {10 20 30}] == 6000}\nassert {[product_list {}] == 1}",
        "declaration": "proc product_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}",
        "prompt_text": "Given a list of integers, return the product of all elements.",
        "prompt_explain": "Given a list of integers, return the product of all elements.\n>>> product_list {1 2 3 4 5}\n120",
        "func_title": "proc product_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello World\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World\"] == 2}\nassert {[count_words \"Tcl is fun\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello World\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a string, return true if the string is a palindrome, false otherwise.\n# >>> is_palindrome \"madam\"\n# true\nproc is_palindrome {str} {",
        "canonical_solution": "    return [expr {$str eq [string reverse $str]}]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[is_palindrome \"madam\"] == 1}\nassert {[is_palindrome \"hello\"] == 0}\nassert {[is_palindrome \"racecar\"] == 1}",
        "declaration": "proc is_palindrome {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[is_palindrome \"madam\"] == 1}",
        "prompt_text": "Given a string, return true if the string is a palindrome, false otherwise.",
        "prompt_explain": "Given a string, return true if the string is a palindrome, false otherwise.\n>>> is_palindrome \"madam\"\ntrue",
        "func_title": "proc is_palindrome {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> max_list {1 2 3 4 5}\n# 5\nproc max_list {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}\nassert {[max_list {10 20 30}] == 30}\nassert {[max_list {-1 -2 -3}] == -1}",
        "declaration": "proc max_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> max_list {1 2 3 4 5}\n5",
        "func_title": "proc max_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 20 30}] == 60}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Tcl is a powerful scripting language\"\n# 6\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}\nassert {[count_words \"Hello World\"] == 2}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Tcl is a powerful scripting language\"\n6",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 5 3 9 2}\n# 9\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -5 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 5 3 9 2}\n9",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {0 1 2 3}] == 0}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {1 3 5 7}] == 0}\nassert {[sum_even_numbers {2 4 6 8}] == 20}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 2 3 4 5}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 2 3 4 5}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello World Tcl Programming\"\n# 4\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World Tcl Programming\"] == 4}\nassert {[count_words \"One\"] == 1}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World Tcl Programming\"] == 4}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello World Tcl Programming\"\n4",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Tcl is a scripting language\"\n# 5\nproc count_words {str} {",
        "canonical_solution": "    set words [split $str \" \"]\n    return [llength $words]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a scripting language\"] == 5}\nassert {[count_words \"\"] == 0}\nassert {[count_words \"OneWord\"] == 1}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a scripting language\"] == 5}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Tcl is a scripting language\"\n5",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 5 3 9 2}\n# 9\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 5 3 9 2}] == 9}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -2 -3}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 5 3 9 2}] == 9}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 5 3 9 2}\n9",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the minimum value.\n# >>> min_value {5 3 9 1 4}\n# 1\nproc min_value {numbers} {",
        "canonical_solution": "    set min [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num < $min} {\n            set min $num\n        }\n    }\n    return $min\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_value {5 3 9 1 4}] == 1}\nassert {[min_value {10 20 30}] == 10}\nassert {[min_value {-1 -2 -3}] == -3}",
        "declaration": "proc min_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_value {5 3 9 1 4}] == 1}",
        "prompt_text": "Given a list of integers, return the minimum value.",
        "prompt_explain": "Given a list of integers, return the minimum value.\n>>> min_value {5 3 9 1 4}\n1",
        "func_title": "proc min_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_evens {1 2 3 4 5 6}\n# 12\nproc sum_evens {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}\nassert {[sum_evens {10 20 30}] == 60}\nassert {[sum_evens {1 3 5 7}] == 0}",
        "declaration": "proc sum_evens {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_evens {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_evens {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n# >>> find_max {1 2 3 4 5}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3 -4 -5}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n>>> find_max {1 2 3 4 5}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the minimum value in the list. Do not use the built-in min command.\n# >>> find_min {1 2 3 4 5}\n# 1\nproc find_min {numbers} {",
        "canonical_solution": "    set min [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num < $min} {\n            set min $num\n        }\n    }\n    return $min\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_min {1 2 3 4 5}] == 1}\nassert {[find_min {10 20 30}] == 10}\nassert {[find_min {-1 -2 -3 -4 -5}] == -5}",
        "declaration": "proc find_min {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_min {1 2 3 4 5}] == 1}",
        "prompt_text": "Given a list of integers, return the minimum value in the list. Do not use the built-in min command.",
        "prompt_explain": "Given a list of integers, return the minimum value in the list. Do not use the built-in min command.\n>>> find_min {1 2 3 4 5}\n1",
        "func_title": "proc find_min {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even {1 2 3 4 5 6}\n# 12\nproc sum_even {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even {1 2 3 4 5 6}] == 12}\nassert {[sum_even {10 15 20 25}] == 30}\nassert {[sum_even {1 3 5 7}] == 0}",
        "declaration": "proc sum_even {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 2 3 4 5}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 2 3 4 5}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_list {1 2 3 4 5}\n# 120\nproc product_list {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}\nassert {[product_list {10 20 30}] == 6000}\nassert {[product_list {}] == 1}",
        "declaration": "proc product_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_list {1 2 3 4 5}\n120",
        "func_title": "proc product_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 20 30}] == 60}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string. Words are separated by spaces.\n# >>> count_words \"Hello world from Tcl\"\n# 4\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}\nassert {[count_words \"OneWord\"] == 1}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}",
        "prompt_text": "Given a string, return the number of words in the string. Words are separated by spaces.",
        "prompt_explain": "Given a string, return the number of words in the string. Words are separated by spaces.\n>>> count_words \"Hello world from Tcl\"\n4",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value without using the built-in max command.\n# >>> find_max {1 5 3 9 2}\n# 9\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}",
        "prompt_text": "Given a list of integers, return the maximum value without using the built-in max command.",
        "prompt_explain": "Given a list of integers, return the maximum value without using the built-in max command.\n>>> find_max {1 5 3 9 2}\n9",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {5 10 2}] == 100}\nassert {[product_of_numbers {0 1 2 3}] == 0}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 20 30}] == 60}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello world from Tcl\"\n# 4\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}\nassert {[count_words \"One two three\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello world from Tcl\"\n4",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list without using the built-in max command.\n# >>> find_max {1 3 2 5 4}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 3 2 5 4}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 3 2 5 4}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list without using the built-in max command.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list without using the built-in max command.\n>>> find_max {1 3 2 5 4}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4 5}\n# 120\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4 5}] == 120}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {0 1 2}] == 0}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4 5}] == 120}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4 5}\n120",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Tcl is a scripting language\"\n# 5\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a scripting language\"] == 5}\nassert {[count_words \"Hello World\"] == 2}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a scripting language\"] == 5}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Tcl is a scripting language\"\n5",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a string, return true if the string is a palindrome, false otherwise.\n# >>> is_palindrome \"racecar\"\n# 1\nproc is_palindrome {str} {",
        "canonical_solution": "    return [expr {$str eq [string reverse $str]}]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[is_palindrome \"racecar\"] == 1}\nassert {[is_palindrome \"hello\"] == 0}\nassert {[is_palindrome \"\"] == 1}",
        "declaration": "proc is_palindrome {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[is_palindrome \"racecar\"] == 1}",
        "prompt_text": "Given a string, return true if the string is a palindrome, false otherwise.",
        "prompt_explain": "Given a string, return true if the string is a palindrome, false otherwise.\n>>> is_palindrome \"racecar\"\n1",
        "func_title": "proc is_palindrome {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> max_value {1 5 3 9 2}\n# 9\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 5 3 9 2}] == 9}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -2 -3}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 5 3 9 2}] == 9}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> max_value {1 5 3 9 2}\n9",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Tcl is a scripting language\"\n# 5\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a scripting language\"] == 5}\nassert {[count_words \"OneWord\"] == 1}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a scripting language\"] == 5}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Tcl is a scripting language\"\n5",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -2 -3}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all elements.\n# >>> product_list {1 2 3 4 5}\n# 120\nproc product_list {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}\nassert {[product_list {10 20 30}] == 6000}\nassert {[product_list {0}] == 0}",
        "declaration": "proc product_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}",
        "prompt_text": "Given a list of integers, return the product of all elements.",
        "prompt_explain": "Given a list of integers, return the product of all elements.\n>>> product_list {1 2 3 4 5}\n120",
        "func_title": "proc product_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello world from Tcl\"\n# 4\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}\nassert {[count_words \"One two three\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello world from Tcl\"\n4",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -2 -3}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 20 30}] == 60}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 3 2 5 4}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 3 2 5 4}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 3 2 5 4}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 3 2 5 4}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello world from Tcl\"\n# 4\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}\nassert {[count_words \"One two three\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello world from Tcl\"\n4",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4 5}\n# 120\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4 5}] == 120}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {}] == 1}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4 5}] == 120}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4 5}\n120",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello World\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World\"] == 2}\nassert {[count_words \"Tcl is fun\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello World\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -2 -3}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the minimum value.\n# >>> min_value {1 2 3 4 5}\n# 1\nproc min_value {numbers} {",
        "canonical_solution": "    set min [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num < $min} {\n            set min $num\n        }\n    }\n    return $min\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_value {1 2 3 4 5}] == 1}\nassert {[min_value {10 20 30}] == 10}\nassert {[min_value {-1 -2 -3}] == -3}",
        "declaration": "proc min_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_value {1 2 3 4 5}] == 1}",
        "prompt_text": "Given a list of integers, return the minimum value.",
        "prompt_explain": "Given a list of integers, return the minimum value.\n>>> min_value {1 2 3 4 5}\n1",
        "func_title": "proc min_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 20 30}] == 60}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 2 3 4 5}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 2 3 4 5}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello World\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World\"] == 2}\nassert {[count_words \"Tcl programming is fun\"] == 4}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello World\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {}] == 1}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 15 20 25}] == 30}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string. Words are separated by spaces.\n# >>> count_words \"Hello world from Tcl\"\n# 4\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}\nassert {[count_words \"One two three\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}",
        "prompt_text": "Given a string, return the number of words in the string. Words are separated by spaces.",
        "prompt_explain": "Given a string, return the number of words in the string. Words are separated by spaces.\n>>> count_words \"Hello world from Tcl\"\n4",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n# >>> find_max {1 5 3 9 2}\n# 9\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -5 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}",
        "prompt_text": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n>>> find_max {1 5 3 9 2}\n9",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {0}] == 0}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a list of strings, return the number of strings that start with a vowel.\n# >>> count_vowel_start {apple banana orange melon}\n# 2\nproc count_vowel_start {strings} {",
        "canonical_solution": "    set vowels {a e i o u A E I O U}\n    set count 0\n    foreach str $strings {\n        if {[string index $str 0] in $vowels} {\n            incr count\n        }\n    }\n    return $count\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_vowel_start {apple banana orange melon}] == 2}\nassert {[count_vowel_start {Elephant Umbrella}] == 2}\nassert {[count_vowel_start {Cat Dog}] == 0}",
        "declaration": "proc count_vowel_start {strings} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_vowel_start {apple banana orange melon}] == 2}",
        "prompt_text": "Given a list of strings, return the number of strings that start with a vowel.",
        "prompt_explain": "Given a list of strings, return the number of strings that start with a vowel.\n>>> count_vowel_start {apple banana orange melon}\n2",
        "func_title": "proc count_vowel_start {strings}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello World\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World\"] == 2}\nassert {[count_words \"Tcl is fun\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello World\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> max_list {1 2 3 4 5}\n# 5\nproc max_list {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}\nassert {[max_list {10 20 30}] == 30}\nassert {[max_list {-1 -2 -3}] == -1}",
        "declaration": "proc max_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> max_list {1 2 3 4 5}\n5",
        "func_title": "proc max_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all elements.\n# >>> product_list {1 2 3 4 5}\n# 120\nproc product_list {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}\nassert {[product_list {10 20 30}] == 6000}\nassert {[product_list {0 1 2}] == 0}",
        "declaration": "proc product_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}",
        "prompt_text": "Given a list of integers, return the product of all elements.",
        "prompt_explain": "Given a list of integers, return the product of all elements.\n>>> product_list {1 2 3 4 5}\n120",
        "func_title": "proc product_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even {1 2 3 4 5 6}\n# 12\nproc sum_even {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even {1 2 3 4 5 6}] == 12}\nassert {[sum_even {10 20 30}] == 60}\nassert {[sum_even {1 3 5 7}] == 0}",
        "declaration": "proc sum_even {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string. Words are separated by whitespace.\n# >>> count_words \"Hello world from Tcl\"\n# 4\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}\nassert {[count_words \"One two three\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}",
        "prompt_text": "Given a string, return the number of words in the string. Words are separated by whitespace.",
        "prompt_explain": "Given a string, return the number of words in the string. Words are separated by whitespace.\n>>> count_words \"Hello world from Tcl\"\n4",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n# >>> find_max {1 3 2 5 4}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 3 2 5 4}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 3 2 5 4}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n>>> find_max {1 3 2 5 4}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 20 30}] == 60}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Tcl is a powerful scripting language\"\n# 6\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}\nassert {[count_words \"\"] == 0}\nassert {[count_words \"OneWord\"] == 1}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Tcl is a powerful scripting language\"\n6",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 3 2 8 5}\n# 8\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 3 2 8 5}] == 8}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 3 2 8 5}] == 8}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 3 2 8 5}\n8",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {0 1 2 3}] == 0}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        set sum [expr {$sum + $num}]\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Tcl is a powerful scripting language\"\n# 6\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}\nassert {[count_words \"One two three\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Tcl is a powerful scripting language\"\n6",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -2 -3}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_evens {1 2 3 4 5 6}\n# 12\nproc sum_evens {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}\nassert {[sum_evens {10 15 20 25}] == 30}\nassert {[sum_evens {1 3 5 7}] == 0}",
        "declaration": "proc sum_evens {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_evens {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_evens {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string. Words are separated by whitespace.\n# >>> count_words \"Hello world from Tcl\"\n# 4\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}\nassert {[count_words \"One two three\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}",
        "prompt_text": "Given a string, return the number of words in the string. Words are separated by whitespace.",
        "prompt_explain": "Given a string, return the number of words in the string. Words are separated by whitespace.\n>>> count_words \"Hello world from Tcl\"\n4",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n# >>> find_max {1 5 3 9 2}\n# 9\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -5 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}",
        "prompt_text": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n>>> find_max {1 5 3 9 2}\n9",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 20 30}] == 60}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 2 3 4 5}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 2 3 4 5}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello world from Tcl\"\n# 4\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}\nassert {[count_words \"One two three\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello world from Tcl\"\n4",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {1}] == 1}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a list, return the number of elements in the list.\n# >>> list_length {a b c d e}\n# 5\nproc list_length {lst} {",
        "canonical_solution": "    return [llength $lst]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[list_length {a b c d e}] == 5}\nassert {[list_length {1 2 3}] == 3}\nassert {[list_length {}] == 0}",
        "declaration": "proc list_length {lst} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[list_length {a b c d e}] == 5}",
        "prompt_text": "Given a list, return the number of elements in the list.",
        "prompt_explain": "Given a list, return the number of elements in the list.\n>>> list_length {a b c d e}\n5",
        "func_title": "proc list_length {lst}"
    },
    {
        "prompt": "# Given a string, return true if the string is a palindrome, otherwise return false.\n# >>> is_palindrome \"racecar\"\n# 1\nproc is_palindrome {str} {",
        "canonical_solution": "    return [expr {$str eq [string reverse $str]}]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[is_palindrome \"racecar\"] == 1}\nassert {[is_palindrome \"hello\"] == 0}\nassert {[is_palindrome \"12321\"] == 1}",
        "declaration": "proc is_palindrome {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[is_palindrome \"racecar\"] == 1}",
        "prompt_text": "Given a string, return true if the string is a palindrome, otherwise return false.",
        "prompt_explain": "Given a string, return true if the string is a palindrome, otherwise return false.\n>>> is_palindrome \"racecar\"\n1",
        "func_title": "proc is_palindrome {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {0 -1 -2}] == 0}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello World\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World\"] == 2}\nassert {[count_words \"Tcl is fun\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello World\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 20 30}] == 60}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Tcl is a powerful scripting language\"\n# 6\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}\nassert {[count_words \"\"] == 0}\nassert {[count_words \"OneWord\"] == 1}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Tcl is a powerful scripting language\"\n6",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 5 3 9 2}\n# 9\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 5 3 9 2}\n9",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even {1 2 3 4 5 6}\n# 12\nproc sum_even {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even {1 2 3 4 5 6}] == 12}\nassert {[sum_even {10 20 30}] == 60}\nassert {[sum_even {1 3 5 7}] == 0}",
        "declaration": "proc sum_even {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 2 3 4 5}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3 -4 -5}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 2 3 4 5}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello world from Tcl\"\n# 4\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}\nassert {[count_words \"One two three\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello world from Tcl\"\n4",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_list {1 2 3 4 5}\n# 120\nproc product_list {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}\nassert {[product_list {10 20 30}] == 6000}\nassert {[product_list {1 1 1 1}] == 1}",
        "declaration": "proc product_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_list {1 2 3 4 5}\n120",
        "func_title": "proc product_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_evens {1 2 3 4 5 6}\n# 12\nproc sum_evens {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}\nassert {[sum_evens {10 15 20 25}] == 30}\nassert {[sum_evens {1 3 5 7}] == 0}",
        "declaration": "proc sum_evens {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_evens {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_evens {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product {1 2 3 4}\n# 24\nproc product {numbers} {",
        "canonical_solution": "    set prod 1\n    foreach num $numbers {\n        set prod [expr {$prod * $num}]\n    }\n    return $prod\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product {1 2 3 4}] == 24}\nassert {[product {5 0 10}] == 0}\nassert {[product {1 1 1 1}] == 1}",
        "declaration": "proc product {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product {1 2 3 4}\n24",
        "func_title": "proc product {numbers}"
    },
    {
        "prompt": "# Given a string, return the length of the longest word in the string.\n# >>> longest_word_length \"The quick brown fox\"\n# 5\nproc longest_word_length {str} {",
        "canonical_solution": "    set words [split $str \" \"]\n    set max_length 0\n    foreach word $words {\n        set length [string length $word]\n        if {$length > $max_length} {\n            set max_length $length\n        }\n    }\n    return $max_length\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[longest_word_length \"The quick brown fox\"] == 5}\nassert {[longest_word_length \"Jumped over the lazy dog\"] == 5}\nassert {[longest_word_length \"a bb ccc dddd\"] == 4}",
        "declaration": "proc longest_word_length {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[longest_word_length \"The quick brown fox\"] == 5}",
        "prompt_text": "Given a string, return the length of the longest word in the string.",
        "prompt_explain": "Given a string, return the length of the longest word in the string.\n>>> longest_word_length \"The quick brown fox\"\n5",
        "func_title": "proc longest_word_length {str}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello World\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World\"] == 2}\nassert {[count_words \"One two three four\"] == 4}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello World\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -2 -3}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all elements.\n# >>> product_list {1 2 3 4 5}\n# 120\nproc product_list {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}\nassert {[product_list {10 20 30}] == 6000}\nassert {[product_list {0}] == 0}",
        "declaration": "proc product_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}",
        "prompt_text": "Given a list of integers, return the product of all elements.",
        "prompt_explain": "Given a list of integers, return the product of all elements.\n>>> product_list {1 2 3 4 5}\n120",
        "func_title": "proc product_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello World!\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World!\"] == 2}\nassert {[count_words \"One two three four\"] == 4}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World!\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello World!\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the average of all elements.\n# >>> average_list {1 2 3 4 5}\n# 3\nproc average_list {numbers} {",
        "canonical_solution": "    set sum 0\n    set count 0\n    foreach num $numbers {\n        incr sum $num\n        incr count\n    }\n    return [expr {$sum / $count}]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[average_list {1 2 3 4 5}] == 3}\nassert {[average_list {10 20 30}] == 20}\nassert {[average_list {0}] == 0}",
        "declaration": "proc average_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[average_list {1 2 3 4 5}] == 3}",
        "prompt_text": "Given a list of integers, return the average of all elements.",
        "prompt_explain": "Given a list of integers, return the average of all elements.\n>>> average_list {1 2 3 4 5}\n3",
        "func_title": "proc average_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all elements.\n# >>> product_list {1 2 3 4 5}\n# 120\nproc product_list {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}\nassert {[product_list {10 20 30}] == 6000}\nassert {[product_list {}] == 1}",
        "declaration": "proc product_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}",
        "prompt_text": "Given a list of integers, return the product of all elements.",
        "prompt_explain": "Given a list of integers, return the product of all elements.\n>>> product_list {1 2 3 4 5}\n120",
        "func_title": "proc product_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello World!\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World!\"] == 2}\nassert {[count_words \"Tcl is fun\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World!\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello World!\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -2 -3}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 20 30}] == 60}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Tcl is a scripting language\"\n# 5\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a scripting language\"] == 5}\nassert {[count_words \"\"] == 0}\nassert {[count_words \"OneWord\"] == 1}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a scripting language\"] == 5}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Tcl is a scripting language\"\n5",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 5 3 9 2}\n# 9\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 5 3 9 2}\n9",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {0 1 2 3}] == 0}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of numbers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        set sum [expr {$sum + $num}]\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of numbers, return the sum of all elements.",
        "prompt_explain": "Given a list of numbers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a list, return the number of elements in the list.\n# >>> list_length {1 2 3 4 5}\n# 5\nproc list_length {lst} {",
        "canonical_solution": "    return [llength $lst]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[list_length {1 2 3 4 5}] == 5}\nassert {[list_length {}] == 0}\nassert {[list_length {a b c d e f g}] == 7}",
        "declaration": "proc list_length {lst} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[list_length {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list, return the number of elements in the list.",
        "prompt_explain": "Given a list, return the number of elements in the list.\n>>> list_length {1 2 3 4 5}\n5",
        "func_title": "proc list_length {lst}"
    },
    {
        "prompt": "# Given a list of numbers, return the maximum value.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -2 -3}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of numbers, return the maximum value.",
        "prompt_explain": "Given a list of numbers, return the maximum value.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a list of numbers, return the minimum value.\n# >>> min_value {1 2 3 4 5}\n# 1\nproc min_value {numbers} {",
        "canonical_solution": "    set min [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num < $min} {\n            set min $num\n        }\n    }\n    return $min\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_value {1 2 3 4 5}] == 1}\nassert {[min_value {10 20 30}] == 10}\nassert {[min_value {-1 -2 -3}] == -3}",
        "declaration": "proc min_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_value {1 2 3 4 5}] == 1}",
        "prompt_text": "Given a list of numbers, return the minimum value.",
        "prompt_explain": "Given a list of numbers, return the minimum value.\n>>> min_value {1 2 3 4 5}\n1",
        "func_title": "proc min_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_evens {1 2 3 4 5 6}\n# 12\nproc sum_evens {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}\nassert {[sum_evens {10 20 30}] == 60}\nassert {[sum_evens {1 3 5 7}] == 0}",
        "declaration": "proc sum_evens {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_evens {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_evens {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 2 3 4 5}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3 -4 -5}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 2 3 4 5}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello World!\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World!\"] == 2}\nassert {[count_words \"Tcl is fun\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World!\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello World!\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {0 1 2 3}] == 0}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello world from Tcl\"\n# 4\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}\nassert {[count_words \"One two three\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello world from Tcl\"\n4",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -2 -3}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the minimum value.\n# >>> min_value {1 2 3 4 5}\n# 1\nproc min_value {numbers} {",
        "canonical_solution": "    set min [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num < $min} {\n            set min $num\n        }\n    }\n    return $min\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_value {1 2 3 4 5}] == 1}\nassert {[min_value {10 20 30}] == 10}\nassert {[min_value {-1 -2 -3}] == -3}",
        "declaration": "proc min_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_value {1 2 3 4 5}] == 1}",
        "prompt_text": "Given a list of integers, return the minimum value.",
        "prompt_explain": "Given a list of integers, return the minimum value.\n>>> min_value {1 2 3 4 5}\n1",
        "func_title": "proc min_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {1 3 5 7}] == 0}\nassert {[sum_even_numbers {2 4 6 8}] == 20}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Tcl is a powerful scripting language\"\n# 6\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}\nassert {[count_words \"\"] == 0}\nassert {[count_words \"OneWord\"] == 1}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Tcl is a powerful scripting language\"\n6",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 3 2 8 5}\n# 8\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 3 2 8 5}] == 8}\nassert {[find_max {-1 -3 -2 -8 -5}] == -1}\nassert {[find_max {10}] == 10}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 3 2 8 5}] == 8}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 3 2 8 5}\n8",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {5}] == 5}\nassert {[product_of_numbers {}] == 1}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello world from Tcl\"\n# 4\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}\nassert {[count_words \"One\"] == 1}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello world from Tcl\"\n4",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 100 1000}] == 1000}\nassert {[max_value {-1 -2 -3}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the minimum value.\n# >>> min_value {1 2 3 4 5}\n# 1\nproc min_value {numbers} {",
        "canonical_solution": "    set min [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num < $min} {\n            set min $num\n        }\n    }\n    return $min\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_value {1 2 3 4 5}] == 1}\nassert {[min_value {10 100 1000}] == 10}\nassert {[min_value {-1 -2 -3}] == -3}",
        "declaration": "proc min_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_value {1 2 3 4 5}] == 1}",
        "prompt_text": "Given a list of integers, return the minimum value.",
        "prompt_explain": "Given a list of integers, return the minimum value.\n>>> min_value {1 2 3 4 5}\n1",
        "func_title": "proc min_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello World\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World\"] == 2}\nassert {[count_words \"Tcl is a scripting language\"] == 5}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello World\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -2 -3}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of times a specific character appears in the string.\n# >>> count_char \"hello\" l\n# 2\nproc count_char {str char} {",
        "canonical_solution": "    set count 0\n    foreach chr [split $str \"\"] {\n        if {$chr eq $char} {\n            incr count\n        }\n    }\n    return $count\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_char \"hello\" l] == 2}\nassert {[count_char \"mississippi\" s] == 4}\nassert {[count_char \"abcdef\" z] == 0}",
        "declaration": "proc count_char {str char} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_char \"hello\" l] == 2}",
        "prompt_text": "Given a string, return the number of times a specific character appears in the string.",
        "prompt_explain": "Given a string, return the number of times a specific character appears in the string.\n>>> count_char \"hello\" l\n2",
        "func_title": "proc count_char {str char}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_evens {1 2 3 4 5 6}\n# 12\nproc sum_evens {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}\nassert {[sum_evens {10 15 20 25}] == 30}\nassert {[sum_evens {1 3 5 7}] == 0}",
        "declaration": "proc sum_evens {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_evens {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_evens {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string. Words are separated by whitespace.\n# >>> count_words \"Hello world from Tcl\"\n# 4\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}\nassert {[count_words \"One two three\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}",
        "prompt_text": "Given a string, return the number of words in the string. Words are separated by whitespace.",
        "prompt_explain": "Given a string, return the number of words in the string. Words are separated by whitespace.\n>>> count_words \"Hello world from Tcl\"\n4",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n# >>> find_max {3 1 4 1 5 9}\n# 9\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {3 1 4 1 5 9}] == 9}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {3 1 4 1 5 9}] == 9}",
        "prompt_text": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n>>> find_max {3 1 4 1 5 9}\n9",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_list {1 2 3 4}\n# 24\nproc product_list {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4}] == 24}\nassert {[product_list {5 0 10}] == 0}\nassert {[product_list {-1 -2 -3}] == -6}",
        "declaration": "proc product_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_list {1 2 3 4}\n24",
        "func_title": "proc product_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 15 20 25}] == 30}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n# >>> find_max {3 1 4 1 5 9}\n# 9\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {3 1 4 1 5 9}] == 9}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {3 1 4 1 5 9}] == 9}",
        "prompt_text": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n>>> find_max {3 1 4 1 5 9}\n9",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello World\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    set words [split $str \" \"]\n    return [llength $words]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World\"] == 2}\nassert {[count_words \"Tcl is fun\"] == 3}\nassert {[count_words \"One\"] == 1}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello World\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 20 30}] == 60}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string. Words are separated by spaces.\n# >>> count_words \"Hello world from Tcl\"\n# 4\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}\nassert {[count_words \"One two three\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}",
        "prompt_text": "Given a string, return the number of words in the string. Words are separated by spaces.",
        "prompt_explain": "Given a string, return the number of words in the string. Words are separated by spaces.\n>>> count_words \"Hello world from Tcl\"\n4",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n# >>> find_max {1 5 3 9 2}\n# 9\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}",
        "prompt_text": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n>>> find_max {1 5 3 9 2}\n9",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {1 3 5 7}] == 0}\nassert {[sum_even_numbers {2 4 6 8}] == 20}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Tcl is a powerful scripting language\"\n# 6\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}\nassert {[count_words \"\"] == 0}\nassert {[count_words \"OneWord\"] == 1}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Tcl is a powerful scripting language\"\n6",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n# >>> find_max {1 5 3 9 2}\n# 9\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -5 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}",
        "prompt_text": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n>>> find_max {1 5 3 9 2}\n9",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4 5}\n# 120\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4 5}] == 120}\nassert {[product_of_numbers {10}] == 10}\nassert {[product_of_numbers {}] == 1}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4 5}] == 120}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4 5}\n120",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 20 30}] == 60}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 2 3 4 5}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3 -4 -5}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 2 3 4 5}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"hello world\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"hello world\"] == 2}\nassert {[count_words \"tcl programming is fun\"] == 4}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"hello world\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"hello world\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {0 1 2 3}] == 0}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {-1 -2 -3 -4 -5}] == -15}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello World\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World\"] == 2}\nassert {[count_words \"Tcl is a scripting language\"] == 5}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello World\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -2 -3 -4 -5}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of times a specific character appears in the string.\n# >>> count_char \"hello\" l\n# 2\nproc count_char {str char} {",
        "canonical_solution": "    set count 0\n    foreach chr [split $str \"\"] {\n        if {$chr eq $char} {\n            incr count\n        }\n    }\n    return $count\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_char \"hello\" l] == 2}\nassert {[count_char \"mississippi\" s] == 4}\nassert {[count_char \"abcdef\" z] == 0}",
        "declaration": "proc count_char {str char} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_char \"hello\" l] == 2}",
        "prompt_text": "Given a string, return the number of times a specific character appears in the string.",
        "prompt_explain": "Given a string, return the number of times a specific character appears in the string.\n>>> count_char \"hello\" l\n2",
        "func_title": "proc count_char {str char}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello world\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world\"] == 2}\nassert {[count_words \"One two three four\"] == 4}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello world\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a string, return true if the string is a palindrome, false otherwise.\n# >>> is_palindrome \"racecar\"\n# true\nproc is_palindrome {str} {",
        "canonical_solution": "    return [expr {$str eq [string reverse $str]}]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[is_palindrome \"racecar\"] == 1}\nassert {[is_palindrome \"hello\"] == 0}\nassert {[is_palindrome \"\"] == 1}",
        "declaration": "proc is_palindrome {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[is_palindrome \"racecar\"] == 1}",
        "prompt_text": "Given a string, return true if the string is a palindrome, false otherwise.",
        "prompt_explain": "Given a string, return true if the string is a palindrome, false otherwise.\n>>> is_palindrome \"racecar\"\ntrue",
        "func_title": "proc is_palindrome {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -2 -3}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the minimum value.\n# >>> min_value {1 2 3 4 5}\n# 1\nproc min_value {numbers} {",
        "canonical_solution": "    set min [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num < $min} {\n            set min $num\n        }\n    }\n    return $min\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_value {1 2 3 4 5}] == 1}\nassert {[min_value {10 20 30}] == 10}\nassert {[min_value {-1 -2 -3}] == -3}",
        "declaration": "proc min_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_value {1 2 3 4 5}] == 1}",
        "prompt_text": "Given a list of integers, return the minimum value.",
        "prompt_explain": "Given a list of integers, return the minimum value.\n>>> min_value {1 2 3 4 5}\n1",
        "func_title": "proc min_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even {1 2 3 4 5 6}\n# 12\nproc sum_even {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even {1 2 3 4 5 6}] == 12}\nassert {[sum_even {10 20 30}] == 60}\nassert {[sum_even {1 3 5 7}] == 0}",
        "declaration": "proc sum_even {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 2 3 4 5}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 2 3 4 5}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello world, this is Tcl.\"\n# 5\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world, this is Tcl.\"] == 5}\nassert {[count_words \"One two three\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world, this is Tcl.\"] == 5}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello world, this is Tcl.\"\n5",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all elements.\n# >>> product_list {1 2 3 4}\n# 24\nproc product_list {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4}] == 24}\nassert {[product_list {10 20 30}] == 6000}\nassert {[product_list {0 1 2 3}] == 0}",
        "declaration": "proc product_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all elements.",
        "prompt_explain": "Given a list of integers, return the product of all elements.\n>>> product_list {1 2 3 4}\n24",
        "func_title": "proc product_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 15 20 25}] == 30}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Tcl is a powerful scripting language\"\n# 6\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}\nassert {[count_words \"\"] == 0}\nassert {[count_words \"OneWord\"] == 1}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Tcl is a powerful scripting language\"\n6",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 5 3 9 2}\n# 9\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -5 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 5 3 9 2}\n9",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {0 1 2 3}] == 0}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {-1 -2 -3 -4 -5}] == -15}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -2 -3 -4 -5}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the minimum value.\n# >>> min_value {1 2 3 4 5}\n# 1\nproc min_value {numbers} {",
        "canonical_solution": "    set min [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num < $min} {\n            set min $num\n        }\n    }\n    return $min\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_value {1 2 3 4 5}] == 1}\nassert {[min_value {10 20 30}] == 10}\nassert {[min_value {-1 -2 -3 -4 -5}] == -5}",
        "declaration": "proc min_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_value {1 2 3 4 5}] == 1}",
        "prompt_text": "Given a list of integers, return the minimum value.",
        "prompt_explain": "Given a list of integers, return the minimum value.\n>>> min_value {1 2 3 4 5}\n1",
        "func_title": "proc min_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 20 30}] == 60}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Tcl is a powerful scripting language\"\n# 6\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}\nassert {[count_words \"Hello World\"] == 2}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Tcl is a powerful scripting language\"\n6",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 5 3 9 2}\n# 9\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 5 3 9 2}\n9",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {5 0 10}] == 0}\nassert {[product_of_numbers {2 2 2 2}] == 16}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_evens {1 2 3 4 5 6}\n# 12\nproc sum_evens {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}\nassert {[sum_evens {10 20 30}] == 60}\nassert {[sum_evens {1 3 5 7}] == 0}",
        "declaration": "proc sum_evens {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_evens {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_evens {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 2 3 4 5}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3 -4 -5}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 2 3 4 5}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4 5}\n# 120\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4 5}] == 120}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {1 1 1 1}] == 1}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4 5}] == 120}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4 5}\n120",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Tcl is a scripting language\"\n# 5\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a scripting language\"] == 5}\nassert {[count_words \"Hello World\"] == 2}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a scripting language\"] == 5}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Tcl is a scripting language\"\n5",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -2 -3}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the average value.\n# >>> average_value {1 2 3 4 5}\n# 3.0\nproc average_value {numbers} {",
        "canonical_solution": "    set sum 0\n    set count [llength $numbers]\n    foreach num $numbers {\n        incr sum $num\n    }\n    return [expr {$sum / double($count)}]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[average_value {1 2 3 4 5}] == 3.0}\nassert {[average_value {10 20 30}] == 20.0}\nassert {[average_value {1}] == 1.0}",
        "declaration": "proc average_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[average_value {1 2 3 4 5}] == 3.0}",
        "prompt_text": "Given a list of integers, return the average value.",
        "prompt_explain": "Given a list of integers, return the average value.\n>>> average_value {1 2 3 4 5}\n3.0",
        "func_title": "proc average_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 11 12 13 14}] == 36}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello world from Tcl\"\n# 4\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}\nassert {[count_words \"One\"] == 1}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello world from Tcl\"\n4",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value without using the built-in max command.\n# >>> find_max {1 5 3 9 2}\n# 9\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}",
        "prompt_text": "Given a list of integers, return the maximum value without using the built-in max command.",
        "prompt_explain": "Given a list of integers, return the maximum value without using the built-in max command.\n>>> find_max {1 5 3 9 2}\n9",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {0 1 2 3}] == 0}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers.",
        "prompt_explain": "Given a list of integers, return the product of all numbers.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_evens {1 2 3 4 5 6}\n# 12\nproc sum_evens {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}\nassert {[sum_evens {10 15 20 25}] == 30}\nassert {[sum_evens {1 3 5 7}] == 0}",
        "declaration": "proc sum_evens {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_evens {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_evens {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string. Words are separated by whitespace.\n# >>> count_words \"Hello world from Tcl\"\n# 4\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}\nassert {[count_words \"One two three\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}",
        "prompt_text": "Given a string, return the number of words in the string. Words are separated by whitespace.",
        "prompt_explain": "Given a string, return the number of words in the string. Words are separated by whitespace.\n>>> count_words \"Hello world from Tcl\"\n4",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n# >>> find_max {1 5 3 9 2}\n# 9\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -5 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}",
        "prompt_text": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n>>> find_max {1 5 3 9 2}\n9",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_list {1 2 3 4}\n# 24\nproc product_of_list {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_list {1 2 3 4}] == 24}\nassert {[product_of_list {5 0 10}] == 0}\nassert {[product_of_list {1 1 1 1}] == 1}",
        "declaration": "proc product_of_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_list {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_list {1 2 3 4}\n24",
        "func_title": "proc product_of_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even {1 2 3 4 5 6}\n# 12\nproc sum_even {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even {1 2 3 4 5 6}] == 12}\nassert {[sum_even {10 20 30}] == 60}\nassert {[sum_even {1 3 5 7}] == 0}",
        "declaration": "proc sum_even {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 5 3 9 2}\n# 9\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -5 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 5 3 9 2}\n9",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello World Tcl\"\n# 3\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World Tcl\"] == 3}\nassert {[count_words \"One two three four\"] == 4}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World Tcl\"] == 3}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello World Tcl\"\n3",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_list {1 2 3 4}\n# 24\nproc product_list {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4}] == 24}\nassert {[product_list {10 20 30}] == 6000}\nassert {[product_list {}] == 1}",
        "declaration": "proc product_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_list {1 2 3 4}\n24",
        "func_title": "proc product_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        set sum [expr {$sum + $num}]\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_list {1 2 3 4 5}\n# 5\nproc max_list {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}\nassert {[max_list {10 20 30}] == 30}\nassert {[max_list {0 0 0}] == 0}",
        "declaration": "proc max_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_list {1 2 3 4 5}\n5",
        "func_title": "proc max_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the minimum value.\n# >>> min_list {1 2 3 4 5}\n# 1\nproc min_list {numbers} {",
        "canonical_solution": "    set min [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num < $min} {\n            set min $num\n        }\n    }\n    return $min\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_list {1 2 3 4 5}] == 1}\nassert {[min_list {10 20 30}] == 10}\nassert {[min_list {0 0 0}] == 0}",
        "declaration": "proc min_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_list {1 2 3 4 5}] == 1}",
        "prompt_text": "Given a list of integers, return the minimum value.",
        "prompt_explain": "Given a list of integers, return the minimum value.\n>>> min_list {1 2 3 4 5}\n1",
        "func_title": "proc min_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello World!\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World!\"] == 2}\nassert {[count_words \"Tcl is fun\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello World!\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello World!\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello world from Tcl\"\n# 4\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}\nassert {[count_words \"One\"] == 1}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello world from Tcl\"\n4",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_list {1 2 3 4 5}\n# 5\nproc max_list {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}\nassert {[max_list {10 20 30}] == 30}\nassert {[max_list {0 -1 -2}] == 0}",
        "declaration": "proc max_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_list {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_list {1 2 3 4 5}\n5",
        "func_title": "proc max_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of times a specified substring occurs in the string.\n# >>> count_substring \"hello hello hello\" \"hello\"\n# 3\nproc count_substring {str substr} {",
        "canonical_solution": "    set count 0\n    set idx [string first $substr $str]\n    while {$idx != -1} {\n        incr count\n        set idx [string first $substr $str [expr {$idx + 1}]]\n    }\n    return $count\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_substring \"hello hello hello\" \"hello\"] == 3}\nassert {[count_substring \"abcabcabc\" \"abc\"] == 3}\nassert {[count_substring \"xyz\" \"abc\"] == 0}",
        "declaration": "proc count_substring {str substr} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_substring \"hello hello hello\" \"hello\"] == 3}",
        "prompt_text": "Given a string, return the number of times a specified substring occurs in the string.",
        "prompt_explain": "Given a string, return the number of times a specified substring occurs in the string.\n>>> count_substring \"hello hello hello\" \"hello\"\n3",
        "func_title": "proc count_substring {str substr}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 20 30}] == 60}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Tcl is a scripting language\"\n# 5\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a scripting language\"] == 5}\nassert {[count_words \"\"] == 0}\nassert {[count_words \"OneWord\"] == 1}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a scripting language\"] == 5}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Tcl is a scripting language\"\n5",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 3 2 5 4}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 3 2 5 4}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 3 2 5 4}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 3 2 5 4}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {0 1 2 3}] == 0}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 20 30}] == 60}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value without using the built-in max command.\n# >>> find_max {1 5 3 9 2}\n# 9\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 5 3 9 2}] == 9}",
        "prompt_text": "Given a list of integers, return the maximum value without using the built-in max command.",
        "prompt_explain": "Given a list of integers, return the maximum value without using the built-in max command.\n>>> find_max {1 5 3 9 2}\n9",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"hello world\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"hello world\"] == 2}\nassert {[count_words \"tcl programming is fun\"] == 4}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"hello world\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"hello world\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {0 1 2 3}] == 0}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 20 30}] == 60}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 2 3 4 5}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 2 3 4 5}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {10 20 30}] == 6000}\nassert {[product_of_numbers {0 1 2 3}] == 0}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even {1 2 3 4 5 6}\n# 12\nproc sum_even {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even {1 2 3 4 5 6}] == 12}\nassert {[sum_even {10 20 30}] == 60}\nassert {[sum_even {1 3 5 7}] == 0}",
        "declaration": "proc sum_even {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 2 3 4 5}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 2 3 4 5}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello world\"\n# 2\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world\"] == 2}\nassert {[count_words \"Tcl is fun\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world\"] == 2}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello world\"\n2",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the average value of the list.\n# >>> average {1 2 3 4 5}\n# 3\nproc average {numbers} {",
        "canonical_solution": "    set sum 0\n    set count [llength $numbers]\n    foreach num $numbers {\n        incr sum $num\n    }\n    return [expr {$sum / $count}]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[average {1 2 3 4 5}] == 3}\nassert {[average {10 20 30}] == 20}\nassert {[average {0}] == 0}",
        "declaration": "proc average {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[average {1 2 3 4 5}] == 3}",
        "prompt_text": "Given a list of integers, return the average value of the list.",
        "prompt_explain": "Given a list of integers, return the average value of the list.\n>>> average {1 2 3 4 5}\n3",
        "func_title": "proc average {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even_numbers {1 2 3 4 5 6}\n# 12\nproc sum_even_numbers {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}\nassert {[sum_even_numbers {10 11 12 13}] == 22}\nassert {[sum_even_numbers {1 3 5 7}] == 0}",
        "declaration": "proc sum_even_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even_numbers {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even_numbers {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 3 2 8 5}\n# 8\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 3 2 8 5}] == 8}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 3 2 8 5}] == 8}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 3 2 8 5}\n8",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Tcl is a scripting language\"\n# 5\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a scripting language\"] == 5}\nassert {[count_words \"OneWord\"] == 1}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a scripting language\"] == 5}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Tcl is a scripting language\"\n5",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_of_numbers {1 2 3 4}\n# 24\nproc product_of_numbers {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}\nassert {[product_of_numbers {5 0 10}] == 0}\nassert {[product_of_numbers {1 1 1 1}] == 1}",
        "declaration": "proc product_of_numbers {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_of_numbers {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_of_numbers {1 2 3 4}\n24",
        "func_title": "proc product_of_numbers {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -2 -3}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the minimum value.\n# >>> min_value {1 2 3 4 5}\n# 1\nproc min_value {numbers} {",
        "canonical_solution": "    set min [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num < $min} {\n            set min $num\n        }\n    }\n    return $min\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_value {1 2 3 4 5}] == 1}\nassert {[min_value {10 20 30}] == 10}\nassert {[min_value {-1 -2 -3}] == -3}",
        "declaration": "proc min_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_value {1 2 3 4 5}] == 1}",
        "prompt_text": "Given a list of integers, return the minimum value.",
        "prompt_explain": "Given a list of integers, return the minimum value.\n>>> min_value {1 2 3 4 5}\n1",
        "func_title": "proc min_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_even {1 2 3 4 5 6}\n# 12\nproc sum_even {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even {1 2 3 4 5 6}] == 12}\nassert {[sum_even {10 15 20 25}] == 30}\nassert {[sum_even {1 3 5 7}] == 0}",
        "declaration": "proc sum_even {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_even {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_even {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_even {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list.\n# >>> find_max {1 3 2 8 5}\n# 8\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 3 2 8 5}] == 8}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 3 2 8 5}] == 8}",
        "prompt_text": "Given a list of integers, return the maximum value in the list.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list.\n>>> find_max {1 3 2 8 5}\n8",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Tcl is a powerful scripting language\"\n# 6\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}\nassert {[count_words \"\"] == 0}\nassert {[count_words \"OneWord\"] == 1}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Tcl is a powerful scripting language\"\n6",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_list {1 2 3 4}\n# 24\nproc product_list {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4}] == 24}\nassert {[product_list {10 20 30}] == 6000}\nassert {[product_list {}] == 1}",
        "declaration": "proc product_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4}] == 24}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_list {1 2 3 4}\n24",
        "func_title": "proc product_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_evens {1 2 3 4 5 6}\n# 12\nproc sum_evens {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}\nassert {[sum_evens {10 20 30}] == 60}\nassert {[sum_evens {1 3 5 7}] == 0}",
        "declaration": "proc sum_evens {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_evens {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_evens {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n# >>> find_max {1 3 2 5 4}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 3 2 5 4}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 3 2 5 4}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.",
        "prompt_explain": "Given a list of integers, return the maximum value in the list. Do not use the built-in max command.\n>>> find_max {1 3 2 5 4}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_list {1 2 3 4 5}\n# 120\nproc product_list {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}\nassert {[product_list {10 20 30}] == 6000}\nassert {[product_list {1 1 1 1}] == 1}",
        "declaration": "proc product_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_list {1 2 3 4 5}\n120",
        "func_title": "proc product_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0 0 0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Hello world from Tcl\"\n# 4\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}\nassert {[count_words \"One two three\"] == 3}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Hello world from Tcl\"] == 4}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Hello world from Tcl\"\n4",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {-1 -2 -3}] == -1}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the minimum value.\n# >>> min_value {1 2 3 4 5}\n# 1\nproc min_value {numbers} {",
        "canonical_solution": "    set min [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num < $min} {\n            set min $num\n        }\n    }\n    return $min\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_value {1 2 3 4 5}] == 1}\nassert {[min_value {10 20 30}] == 10}\nassert {[min_value {-1 -2 -3}] == -3}",
        "declaration": "proc min_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[min_value {1 2 3 4 5}] == 1}",
        "prompt_text": "Given a list of integers, return the minimum value.",
        "prompt_explain": "Given a list of integers, return the minimum value.\n>>> min_value {1 2 3 4 5}\n1",
        "func_title": "proc min_value {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all even numbers in the list.\n# >>> sum_evens {1 2 3 4 5 6}\n# 12\nproc sum_evens {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        if {$num % 2 == 0} {\n            incr sum $num\n        }\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}\nassert {[sum_evens {10 20 30}] == 60}\nassert {[sum_evens {1 3 5 7}] == 0}",
        "declaration": "proc sum_evens {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_evens {1 2 3 4 5 6}] == 12}",
        "prompt_text": "Given a list of integers, return the sum of all even numbers in the list.",
        "prompt_explain": "Given a list of integers, return the sum of all even numbers in the list.\n>>> sum_evens {1 2 3 4 5 6}\n12",
        "func_title": "proc sum_evens {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value without using the built-in max command.\n# >>> find_max {1 3 2 5 4}\n# 5\nproc find_max {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 3 2 5 4}] == 5}\nassert {[find_max {10 20 30}] == 30}\nassert {[find_max {-1 -2 -3}] == -1}",
        "declaration": "proc find_max {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[find_max {1 3 2 5 4}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value without using the built-in max command.",
        "prompt_explain": "Given a list of integers, return the maximum value without using the built-in max command.\n>>> find_max {1 3 2 5 4}\n5",
        "func_title": "proc find_max {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"hello world tcl programming\"\n# 4\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"hello world tcl programming\"] == 4}\nassert {[count_words \"one\"] == 1}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"hello world tcl programming\"] == 4}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"hello world tcl programming\"\n4",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the product of all numbers in the list.\n# >>> product_list {1 2 3 4 5}\n# 120\nproc product_list {numbers} {",
        "canonical_solution": "    set product 1\n    foreach num $numbers {\n        set product [expr {$product * $num}]\n    }\n    return $product\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}\nassert {[product_list {10 20 30}] == 6000}\nassert {[product_list {}] == 1}",
        "declaration": "proc product_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[product_list {1 2 3 4 5}] == 120}",
        "prompt_text": "Given a list of integers, return the product of all numbers in the list.",
        "prompt_explain": "Given a list of integers, return the product of all numbers in the list.\n>>> product_list {1 2 3 4 5}\n120",
        "func_title": "proc product_list {numbers}"
    },
    {
        "prompt": "# Given a list of integers, return the sum of all elements.\n# >>> sum_list {1 2 3 4 5}\n# 15\nproc sum_list {numbers} {",
        "canonical_solution": "    set sum 0\n    foreach num $numbers {\n        incr sum $num\n    }\n    return $sum\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}\nassert {[sum_list {10 20 30}] == 60}\nassert {[sum_list {0}] == 0}",
        "declaration": "proc sum_list {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[sum_list {1 2 3 4 5}] == 15}",
        "prompt_text": "Given a list of integers, return the sum of all elements.",
        "prompt_explain": "Given a list of integers, return the sum of all elements.\n>>> sum_list {1 2 3 4 5}\n15",
        "func_title": "proc sum_list {numbers}"
    },
    {
        "prompt": "# Given a string, return the number of words in the string.\n# >>> count_words \"Tcl is a powerful scripting language\"\n# 6\nproc count_words {str} {",
        "canonical_solution": "    return [llength [split $str \" \"]]\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}\nassert {[count_words \"Hello World\"] == 2}\nassert {[count_words \"\"] == 0}",
        "declaration": "proc count_words {str} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[count_words \"Tcl is a powerful scripting language\"] == 6}",
        "prompt_text": "Given a string, return the number of words in the string.",
        "prompt_explain": "Given a string, return the number of words in the string.\n>>> count_words \"Tcl is a powerful scripting language\"\n6",
        "func_title": "proc count_words {str}"
    },
    {
        "prompt": "# Given a list of integers, return the maximum value.\n# >>> max_value {1 2 3 4 5}\n# 5\nproc max_value {numbers} {",
        "canonical_solution": "    set max [lindex $numbers 0]\n    foreach num $numbers {\n        if {$num > $max} {\n            set max $num\n        }\n    }\n    return $max\n}",
        "test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}\nassert {[max_value {10 20 30}] == 30}\nassert {[max_value {0}] == 0}",
        "declaration": "proc max_value {numbers} {",
        "example_test": "proc assert {condition} {\n    if {![uplevel 1 expr $condition]} {\n        return -code error \"Assertion failed\"\n    }\n}\n\nassert {[max_value {1 2 3 4 5}] == 5}",
        "prompt_text": "Given a list of integers, return the maximum value.",
        "prompt_explain": "Given a list of integers, return the maximum value.\n>>> max_value {1 2 3 4 5}\n5",
        "func_title": "proc max_value {numbers}"
    }
]